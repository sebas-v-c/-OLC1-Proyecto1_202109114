package gt.edu.usac.ingenieria.analyzer;
import java.util.stream.Collectors;
import java_cup.runtime.*;
import java.util.Arrays;
import java.util.ArrayList;
import gt.edu.usac.ingenieria.analyzer.errors.ErrorStpS;

// PARSER
{:
    ArrayList<ErrorStpS> errors = new ArrayList<>();
    public void syntax_error(Symbol s){
        errors.add(new ErrorStpS(s.left, s.right, s.value, SYM.terminalNames[s.sym]));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        errors.add(new ERrorStpS("Syntax error, impossible to recover"));
    }
    public String getErrors() {
        return errors.stream().map(Object::toString).collect(Collectors.joining("\n-> "));
    }
    public boolean isSuccessExecution() {
        return !(errors.size() > 0);
    }
:}

// TERMINALS
terminal Element KW_MAIN
// data types
terminal String KW_VOID, KW_INT, KW_DOUBLE, KW_BOOL, KW_STRING
// control structures
terminal Element KW_IF, KW_ELSE, KW_SWITCH, KW_CASE, KW_DEFAULT
terminal Element KW_BREAK, KW_FOR, KW_DO, KW_WHILE, KW_CONTINUE, KW_RETURN
