package gt.edu.usac.ingenieria.analyzer.statpy;
import java.util.stream.Collectors;
import java_cup.runtime.*;
import java.util.Arrays;
import java.util.ArrayList;
import gt.edu.usac.ingenieria.analyzer.errors.SynError;
import gt.edu.usac.ingenieria.lang.statpy.*;
import gt.edu.usac.ingenieria.lang.statpy.expression.*;
import gt.edu.usac.ingenieria.lang.statpy.graph.*;
import gt.edu.usac.ingenieria.lang.statpy.sentence.*;
import gt.edu.usac.ingenieria.lang.statpy.structure.*;


// PARSER
parser code
{:
    public ArrayList<Instruction> inst;
    public ArrayList<SynError> errors = new ArrayList<>();
    public void syntax_error(Symbol s){
        errors.add(new SynError(s.left, s.right, s.value, SYM.terminalNames[s.sym]));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        errors.add(new SynError("Syntax error, impossible to recover"));
    }
    public ArrayList<SynError> getErrors() {
        return errors;
        //return errors.stream().map(Object::toString).collect(Collectors.joining("\n-> "));
    }
    public boolean isSuccessExecution() {
        return !(errors.size() > 0);
    }
:}

/* TERMINAL */
terminal String KW_MAIN;
// data types
terminal String KW_VOID, KW_INT, KW_DOUBLE, KW_CHAR, KW_BOOL, KW_STRING;
// control structures
terminal String KW_IF, KW_ELSE, KW_SWITCH, KW_CASE, KW_DEFAULT;
terminal String KW_BREAK, KW_FOR, KW_DO, KW_WHILE, KW_CONTINUE, KW_RETURN;
terminal String KW_NVAL, KW_PRINT;
// bools
terminal String KW_TRUE, KW_FALSE;
// graph key words
terminal String KW_DEFGLB, KW_BARGRPH, KW_PIEGRPH, KW_TITLE, KW_XAXIS, KW_VALUES, KW_TITLEX, KW_TITLEY;
// literals
terminal String TK_STRING, TK_CHAR, TK_INT, TK_DOUBLE, TK_ID;
// operators
terminal String TK_INC, TK_DEC;
terminal String TK_PLUS, TK_MINUS, TK_MULT, TK_DIV;
terminal String TK_GEQ, TK_LEQ, TK_EQEQ, TK_NOTEQ;
terminal String TK_GREATER, TK_LESS, TK_AND, TK_OR, TK_NOT;
terminal String TK_UMINUS;
// groups
terminal String TK_LPAR, TK_RPAR, TK_LBRC, TK_RBRC, TK_LBRK, TK_RBRK;
// assign
terminal String TK_EQ;
// punctuation
terminal String TK_COMA, TK_SCOLON, TK_COLON;
// especial
terminal String TK_DOLL;

/* NON TERMINALS */
non terminal String Init;
non terminal Main Main;
// instructions
non terminal ArrayList<Instruction> Instructions;
non terminal Instruction Instruction;
non terminal Expression IncreDecre;
// variable declaration
non terminal Sentence DeclareVar, DeclareArr;
non terminal PrimitiveType DataType;
// expresion control
non terminal Expression Expresion;
non terminal Expression Math;
non terminal Expression Relation;
non terminal Expression Logic;
non terminal ReasignId ReasignVar;
// Conditional structures
non terminal Instruction IfStatement;
non terminal Instruction SwitchStatement;
non terminal Object[] CaseDeft;
non terminal ArrayList<Case> Cases;
non terminal Case Case;
non terminal CodeBlock Default;
// loop structures
non terminal Instruction ForLoop;
non terminal Object[] ForArgs;
non terminal Sentence ForInitArg;
non terminal While WhileLoop;
non terminal DoWhile DoWhileLoop;

// call a function
non terminal Expression CallFunc;
non terminal ArrayList<Expression> ArgsList;

//non terminal DeclareFunc;

non terminal Graph GlobalVarsFunc;
non terminal ArrayList<Instruction> GlobalVarsEnv;
non terminal ArrayList<Instruction> GlobalVarsInsts;
non terminal Instruction GlobalVarsInst;

non terminal Instruction GraphFuncs;
non terminal Pie PieGraph;
non terminal Bars BarGraph;
non terminal ArrayList<Instruction> PieGraphInsts, BarGraphInsts;
non terminal Instruction PieGraphInst, BarGraphInst;

non terminal CallJson CallJson;
non terminal Expression JsonArg;
// local environment
non terminal CodeBlock LocalEnv;
non terminal Object[] LocalEnvs;
non terminal Print Print;


/*PRECEDENCES*/
precedence left TK_OR;
precedence left TK_AND;
precedence right TK_NOT;
precedence left TK_EQEQ, TK_NOTEQ;
precedence left TK_LEQ, TK_GEQ, TK_LESS, TK_GREATER;
precedence left TK_PLUS, TK_MINUS;
precedence left TK_MULT, TK_DIV;
precedence right TK_UMINUS;
precedence right TK_DOLL;

/* GRAMATIC */

start with Init;

// beginnig
Init            ::= Main:m {:ArrayList<Instruction> arr= new ArrayList<Instruction>(); arr.add(m); inst=arr;:};

Main            ::= KW_VOID KW_MAIN:m TK_LPAR TK_RPAR TK_LBRC Instructions:i TK_RBRC {:RESULT = new Main(mleft, mright, i);:};



Instructions    ::=
                    Instructions:s Instruction:i    {:RESULT = s; RESULT.add(i);:}
                |   Instruction:i                   {:RESULT = new ArrayList<>(Arrays.asList(i));:}
                ;

GraphFuncs      ::=
                    BarGraph:b {:RESULT = b;:}
                |   PieGraph:b {:RESULT = b;:}
                ;

PieGraph        ::= KW_VOID KW_PIEGRPH:p TK_LPAR TK_RPAR TK_LBRC PieGraphInsts:i TK_RBRC {:RESULT = new Pie(pleft, pright, i);:};

BarGraph        ::= KW_VOID KW_BARGRPH:b TK_LPAR TK_RPAR TK_LBRC BarGraphInsts:i TK_RBRC {:RESULT = new Bars(bleft, bright, i);:};

PieGraphInsts   ::=
                    PieGraphInsts:s PieGraphInst:i {:RESULT = s; RESULT.add(i);:}
                |   PieGraphInst:i                 {:RESULT = new ArrayList<Instruction>(Arrays.asList(i));:}
                ;

PieGraphInst    ::=
                    KW_STRING KW_TITLE:t TK_EQ TK_ID:v TK_SCOLON                                     {:RESULT = new DeclareId(tleft, tright, t, new AccesId(vleft, vright, v));:}
                |   KW_STRING KW_TITLE:t TK_EQ TK_STRING:v TK_SCOLON                                 {:RESULT = new DeclareId(tleft, tright, t, new Primitive(vleft, vright, v, PrimitiveType.STRING));:}
                |   KW_STRING TK_LBRC TK_RBRC KW_XAXIS:x TK_EQ TK_LBRC ArgsList:a TK_RBRC TK_SCOLON  {:RESULT = new DeclareArr(xleft, xright, x, a);:}
                |   KW_DOUBLE TK_LBRC TK_RBRC KW_VALUES:v TK_EQ TK_LBRC ArgsList:a TK_RBRC TK_SCOLON {:RESULT = new DeclareArr(vleft, vright, v, a);:}
                ;


BarGraphInsts   ::=
                    BarGraphInsts:s BarGraphInst:i {:RESULT = s; RESULT.add(i);:}
                |   BarGraphInst:i                 {:RESULT = new ArrayList<>(Arrays.asList(i));:}
                ;

BarGraphInst    ::=
                    KW_STRING KW_TITLE:t TK_EQ TK_ID:id TK_SCOLON                                    {:RESULT = new DeclareId(tleft, tright, t, new AccesId(idleft, idright, id));:}
                |   KW_STRING KW_TITLE:t TK_EQ TK_STRING:s TK_SCOLON                                 {:RESULT = new DeclareId(tleft, tright, t, new Primitive(sleft, sright, s, PrimitiveType.STRING));:}
                |   KW_STRING KW_TITLEX:tx TK_EQ TK_STRING:s TK_SCOLON                               {:RESULT = new DeclareId(txleft, txright, tx, new Primitive(sleft, sright, s, PrimitiveType.STRING));:}
                |   KW_STRING KW_TITLEX:tx TK_EQ TK_ID:id TK_SCOLON                                  {:RESULT = new DeclareId(txleft, txright, tx, new AccesId(idleft, idright, id));:}
                |   KW_STRING KW_TITLEY:ty TK_EQ TK_STRING:s TK_SCOLON                               {:RESULT = new DeclareId(tyleft, tyright, ty, new Primitive(sleft, sright, s, PrimitiveType.STRING));:}
                |   KW_STRING KW_TITLEY:ty TK_EQ TK_ID:id TK_SCOLON                                  {:RESULT = new DeclareId(tyleft, tyright, ty, new AccesId(idleft, idright, id));:}
                |   KW_STRING TK_LBRK TK_RBRK KW_XAXIS:x TK_EQ TK_LBRC ArgsList:a TK_RBRC TK_SCOLON  {:RESULT = new DeclareArr(xleft, xright, x, a);:}
                |   KW_DOUBLE TK_LBRK TK_RBRK KW_VALUES:v TK_EQ TK_LBRC ArgsList:a TK_RBRC TK_SCOLON {:RESULT = new DeclareArr(vleft, vright, v, a);:}
                ;

GlobalVarsFunc  ::=
                    KW_VOID KW_DEFGLB:g TK_LPAR TK_RPAR GlobalVarsEnv:genv {:RESULT = new Global(gleft, gright, genv);:};

GlobalVarsEnv   ::=
                    TK_LBRC GlobalVarsInsts:i TK_RBRC {:RESULT = i;:}
                |   TK_LBRC TK_RBRC                   {:RESULT = new ArrayList<Instruction>();:}
                ;

GlobalVarsInsts ::=
                    GlobalVarsInsts:s GlobalVarsInst:i {:RESULT = s; RESULT.add(i);:}
                |   GlobalVarsInst:i                   {:RESULT = new ArrayList<>(Arrays.asList(i));:}
                ;

GlobalVarsInst  ::=
                    KW_STRING TK_ID:id TK_EQ TK_STRING:str TK_SCOLON {:RESULT = new DeclareId(idleft, idright, id, new Primitive(strleft, strright, str, PrimitiveType.STRING));:}
                |   KW_DOUBLE TK_ID:id TK_EQ TK_DOUBLE:db TK_SCOLON  {:RESULT = new DeclareId(idleft, idright, id, new Primitive(dbleft, dbright, db, PrimitiveType.DOUBLE));:}
                |   KW_STRING TK_ID:id TK_EQ CallJson:js TK_SCOLON   {:RESULT = new DeclareId(idleft, idright, id, js);:}
                |   KW_DOUBLE TK_ID:id TK_EQ CallJson:js TK_SCOLON   {:RESULT = new DeclareId(idleft, idright, id, js);:}
                ;


Instruction     ::=
                    DeclareVar:i TK_SCOLON                  {:RESULT=i;:}
                |   DeclareArr:i TK_SCOLON                  {:RESULT=i;:}
                |   CallFunc:i TK_SCOLON                    {:RESULT=i;:}
                |   IfStatement:i                           {:RESULT=i;:}
                |   SwitchStatement:i                       {:RESULT=i;:}
                |   ForLoop:i                               {:RESULT=i;:}
                |   WhileLoop:i                             {:RESULT=i;:}
                |   Print:i                                 {:RESULT=i;:}
                |   DoWhileLoop:i TK_SCOLON                 {:RESULT=i;:}
                |   ReasignVar:i TK_SCOLON                  {:RESULT=i;:}
                |   IncreDecre:i TK_SCOLON                  {:RESULT=i;:}
                |   KW_BREAK:i TK_SCOLON                    {:RESULT= new ControlRW(ileft, iright, i);:}
                |   KW_RETURN:i TK_SCOLON                   {:RESULT= new Return(ileft, iright, null);:}
                |   KW_RETURN:i Expresion:exp TK_SCOLON     {:RESULT= new Return(ileft, iright, exp);:}
                |   KW_CONTINUE:i TK_SCOLON                 {:RESULT= new ControlRW(ileft, iright, i);:}
                |   GlobalVarsFunc:i                        {:RESULT=i;:}
                |   GraphFuncs:i                            {:RESULT=i;:}
                |   error
                ;


DeclareVar      ::=
                    DataType TK_ID:id TK_EQ Expresion:exp  {:RESULT = new DeclareId(idleft, idright, id, exp);:}
                |   DataType TK_ID:id                      {:RESULT = new DeclareId(idleft, idright, id, null);:}
                ;

DeclareArr      ::=
                    DataType TK_LBRK TK_RBRK TK_ID:id TK_EQ TK_LBRC ArgsList:arg TK_RBRC {:RESULT = new DeclareArr(idleft, idright, id, arg);:}
                ;

DataType        ::=
                    KW_INT      {:RESULT = PrimitiveType.INT;:}
                |   KW_BOOL     {:RESULT = PrimitiveType.BOOLEAN;:}
                |   KW_DOUBLE   {:RESULT = PrimitiveType.DOUBLE;:}
                |   KW_CHAR     {:RESULT = PrimitiveType.CHAR;:}
                |   KW_STRING   {:RESULT = PrimitiveType.STRING;:}
                ;

ReasignVar      ::= TK_ID:id TK_EQ Expresion:exp {:RESULT = new ReasignId(idleft, idright, id, exp);:};

//DeclareFunc     ::= KW_VOID TK_ID TK_LPAR TK_RPAR LocalEnv;

CallFunc        ::=
                    TK_ID:id TK_LPAR ArgsList:args TK_RPAR {:RESULT = new CallFunc(idleft, idright, id, args);:}
                |   TK_ID:id TK_LPAR TK_RPAR               {:RESULT = new CallFunc(idleft, idright, id, null);:}
                ;

ArgsList        ::=
                    ArgsList:l TK_COMA Expresion:e {:RESULT=l; RESULT.add(e);:}
                |   Expresion:e                    {:RESULT= new ArrayList<>(Arrays.asList(e));:}
                ;

IfStatement     ::=
                    KW_IF:f TK_LPAR Expresion:exp TK_RPAR LocalEnv:env KW_ELSE IfStatement:f2 {:RESULT = new If(fleft, fright, exp, env, f2);:}
                |   KW_IF:f TK_LPAR Expresion:exp TK_RPAR LocalEnv:env KW_ELSE LocalEnv:env2  {:RESULT = new If(fleft, fright, exp, env, env2);:}
                |   KW_IF:f TK_LPAR Expresion:exp TK_RPAR LocalEnv:env                        {:RESULT = new If(fleft, fright, exp, env, null);:}
                ;

LocalEnv        ::=
                    TK_LBRC:l Instructions:i TK_RBRC {:RESULT = new CodeBlock(lleft, lright, i);:}
                |   TK_LBRC:l TK_RBRC                {:RESULT = new CodeBlock(lleft, lright, new ArrayList<>());:}
                ;

SwitchStatement ::=
                    KW_SWITCH:s TK_LPAR Expresion:exp TK_RPAR LocalEnvs:env {:RESULT = new Switch(sleft, sright, exp, (ArrayList<Case>) env[0], (CodeBlock)env[1]);:}

                ;

LocalEnvs       ::=
                    TK_LBRC CaseDeft:cd TK_RBRC {:RESULT = cd;:}
                |   TK_LBRC TK_RBRC             {:RESULT = new Object[]{null, null};:}
                ;

CaseDeft        ::=
                    Cases:c Default:d {:RESULT = new Object[] {c, d};:}
                |   Cases:c           {:RESULT = new Object[] {c, null};:}
                |   Default:d         {:RESULT = new Object[] {null, d};:}
                ;

Cases           ::=
                    Cases:cs Case:c {:RESULT = cs; RESULT.add(c);:}
                |   Case:c          {:RESULT = new ArrayList<>(Arrays.asList(c));:}
                ;

Case            ::=
                    KW_CASE:c Expresion:exp TK_COLON Instructions:i {:RESULT = new Case(cleft, cright, exp, new CodeBlock(ileft, iright, i));:}
                |   KW_CASE:c Expresion:exp TK_COLON                {:RESULT = new Case(cleft, cright, exp, new CodeBlock(cleft, cright, new ArrayList<>()));:}
                ;

Default         ::=
                    KW_DEFAULT:d TK_COLON Instructions:i {:RESULT = new CodeBlock(dleft, dright, i);:}
                |   KW_DEFAULT:d TK_COLON                {:RESULT = new CodeBlock(dleft, dright, new ArrayList<>());:}
                ;

ForLoop         ::=
                    KW_FOR:f TK_LPAR ForArgs:fa TK_RPAR LocalEnv:env {:RESULT = new For(fleft, fright, (Sentence)fa[0],(Expression) fa[1], (IncDec) fa[2],env);:}
                ;

ForArgs         ::= ForInitArg:fi TK_SCOLON Expresion:exp TK_SCOLON IncreDecre:inc {:RESULT = new Object[] {fi, exp, inc};:};


ForInitArg      ::= KW_INT TK_ID:id TK_EQ TK_INT:i {:RESULT = new DeclareId(idleft, idright, id,new Primitive(ileft, iright, i, PrimitiveType.INT));:}
                |   ReasignVar:r                   {:RESULT = r;:}
                ;


IncreDecre      ::=
                    TK_ID:id TK_INC {:RESULT = new IncDec(idleft, idright, "++", id);:}
                |   TK_ID:id TK_DEC {:RESULT = new IncDec(idleft, idright, "--", id);:}
                ;

WhileLoop       ::= KW_WHILE:w TK_LPAR Expresion:exp TK_RPAR LocalEnv:env {:RESULT = new While(wleft, wright, exp, env);:};

DoWhileLoop     ::= KW_DO:d LocalEnv:env KW_WHILE:w TK_LPAR Expresion:exp TK_RPAR {:RESULT = new DoWhile(dleft, dright, env, exp);:};

CallJson        ::=
                    TK_DOLL:d TK_LBRC KW_NVAL TK_COMA JsonArg:f TK_COMA JsonArg:k TK_RBRC {:RESULT = new CallJson(dleft, dright, f, k);:}
                ;

JsonArg         ::=
                    TK_ID:id    {:RESULT = new AccesId(idleft, idright, id);:}
                |   TK_STRING:s {:RESULT = new Primitive(sleft, sright, s, PrimitiveType.STRING);:}
                ;

Expresion       ::=
                    Math:e                      {:RESULT = e;:}
                |   Relation:e                  {:RESULT = e;:}
                |   Logic:e                     {:RESULT = e;:}
                |   CallFunc:e                  {:RESULT = e;:}
                |   CallJson:e                  {:RESULT = e;:}
                |   IncreDecre:e                {:RESULT = e;:}
                |   TK_ID:e                     {:RESULT = new AccesId(eleft, eright, e);:}
                |   TK_STRING:e                 {:RESULT = new Primitive(eleft, eright, e, PrimitiveType.STRING);:}
                |   TK_CHAR:e                   {:RESULT = new Primitive(eleft, eright, e, PrimitiveType.CHAR);:}
                |   TK_INT:e                    {:RESULT = new Primitive(eleft, eright, e, PrimitiveType.INT);:}
                |   TK_DOUBLE:e                 {:RESULT = new Primitive(eleft, eright, e, PrimitiveType.DOUBLE);:}
                |   KW_TRUE:e                   {:RESULT = new Primitive(eleft, eright, e, PrimitiveType.BOOLEAN);:}
                |   KW_FALSE:e                  {:RESULT = new Primitive(eleft, eright, e, PrimitiveType.BOOLEAN);:}
                |   TK_LPAR Expresion:e TK_RPAR {:RESULT = e;:}
                ;

Math            ::=
                    Expresion:e1 TK_PLUS:s Expresion:e2  {:RESULT = new gt.edu.usac.ingenieria.lang.statpy.expression.Math(e1left, e1right, e1, s, e2);:}
                |   Expresion:e1 TK_MINUS:s Expresion:e2 {:RESULT = new gt.edu.usac.ingenieria.lang.statpy.expression.Math(e1left, e1right, e1, s, e2);:}
                |   Expresion:e1 TK_MULT:s Expresion:e2  {:RESULT = new gt.edu.usac.ingenieria.lang.statpy.expression.Math(e1left, e1right, e1, s, e2);:}
                |   Expresion:e1 TK_DIV:s Expresion:e2   {:RESULT = new gt.edu.usac.ingenieria.lang.statpy.expression.Math(e1left, e1right, e1, s, e2);:}
                |   TK_MINUS:s Expresion:e1              {:RESULT = new gt.edu.usac.ingenieria.lang.statpy.expression.Math(e1left, e1right, null, s, e1);:} %prec TK_UMINUS
                ;

Relation        ::=
                    Expresion:e1 TK_GEQ:s Expresion:e2     {:RESULT = new Relational(e1left, e1right, e1, s, e2);:}
                |   Expresion:e1 TK_LEQ:s Expresion:e2     {:RESULT = new Relational(e1left, e1right, e1, s, e2);:}
                |   Expresion:e1 TK_EQEQ:s Expresion:e2    {:RESULT = new Relational(e1left, e1right, e1, s, e2);:}
                |   Expresion:e1 TK_NOTEQ:s Expresion:e2   {:RESULT = new Relational(e1left, e1right, e1, s, e2);:}
                |   Expresion:e1 TK_GREATER:s Expresion:e2 {:RESULT = new Relational(e1left, e1right, e1, s, e2);:}
                |   Expresion:e1 TK_LESS:s Expresion:e2    {:RESULT = new Relational(e1left, e1right, e1, s, e2);:}
                ;

Logic           ::=
                    Expresion:e1 TK_AND:s Expresion:e2 {:RESULT = new Logic(e1left, e1right, e1, s, e2);:}
                |   Expresion:e1 TK_OR:s Expresion:e2  {:RESULT = new Logic(e1left, e1right, e1, s, e2);:}
                |   TK_NOT:s Expresion:e               {:RESULT = new Logic(eleft, eright, null, s, e);:}
                ;


Print           ::=
                    KW_PRINT:p TK_LPAR Expresion:exp TK_RPAR TK_SCOLON {:RESULT= new Print(pleft, pright, exp);:}
                |   KW_PRINT:p TK_LPAR TK_RPAR TK_SCOLON               {:RESULT= new Print(pleft, pright, null);:}
                ;
