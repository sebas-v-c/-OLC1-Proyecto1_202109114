package gt.edu.usac.ingenieria.analyzer.statpy;
import java.util.stream.Collectors;
import java_cup.runtime.*;
import java.util.Arrays;
import java.util.ArrayList;
import gt.edu.usac.ingenieria.analyzer.errors.ErrorStpS;


// PARSER
parser code
{:
    ArrayList<ErrorStpS> errors = new ArrayList<>();
    public void syntax_error(Symbol s){
        errors.add(new ErrorStpS(s.left, s.right, s.value, SYM.terminalNames[s.sym]));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        errors.add(new ErrorStpS("Syntax error, impossible to recover"));
    }
    public ArrayList<ErrorStpS> getErrors() {
        return errors;
        //return errors.stream().map(Object::toString).collect(Collectors.joining("\n-> "));
    }
    public boolean isSuccessExecution() {
        return !(errors.size() > 0);
    }
:}

/* TERMINAL */
terminal String KW_MAIN;
// data types
terminal String KW_VOID, KW_INT, KW_DOUBLE, KW_CHAR, KW_BOOL, KW_STRING;
// control structures
terminal String KW_IF, KW_ELSE, KW_SWITCH, KW_CASE, KW_DEFAULT;
terminal String KW_BREAK, KW_FOR, KW_DO, KW_WHILE, KW_CONTINUE, KW_RETURN;
// bools
terminal boolean KW_TRUE, KW_FALSE;
// literals
terminal String TK_STRING, TK_CHAR, TK_INT, TK_DOUBLE, TK_ID;
// operators
terminal String TK_PLUS, TK_MINUS, TK_MULT, TK_DIV;
terminal String TK_GEQ, TK_LEQ, TK_EQEQ, TK_NOTEQ;
terminal String TK_GREATER, TK_LESS, TK_AND, TK_OR, TK_NOT;
terminal String TK_UMINUS;
// groups
terminal String TK_LPAR, TK_RPAR, TK_LBRC, TK_RBRC, TK_LBRK, TK_RBRK;
// assign
terminal String TK_EQ;
// punctuation
terminal String TK_COMA, TK_SCOLON;
// especial
terminal String TK_DOLL;

/* NON TERMINALS */
non terminal Init;
non terminal Main;

non terminal Instructions;
non terminal Instruction;

non terminal DeclareVar;

non terminal DataType;

non terminal Expresion;
non terminal Math;
non terminal Relation;
non terminal Logic;
non terminal CallFunc;
non terminal CallJson;


/*PRECEDENCES*/
precedence left TK_OR;
precedence left TK_AND;
precedence right TK_NOT;
precedence left TK_EQEQ, TK_NOTEQ;
precedence left TK_LEQ, TK_GEQ, TK_LESS, TK_GREATER;
precedence left TK_PLUS, TK_MINUS;
precedence left TK_MULT, TK_DIV;
precedence right TK_UMINUS;

/* GRAMATIC */

start with Init;

// beginnig
Init            ::= Main;

Main            ::= KW_VOID KW_MAIN TK_LPAR TK_RPAR TK_LBRC Instructions TK_RBRC;

Instructions    ::=
                    Instructions Instruction
                |   Instruction
                ;

Instruction     ::=
                    DeclareVar TK_SCOLON
                |   error
                ;

DeclareVar      ::= DataType TK_ID TK_EQ Expresion;

Expresion       ::=
                    Math
                |   Relation
                |   Logic
                |   CallFunc
                |   CallJson
                |   TK_ID
                |   TK_STRING
                |   TK_CHAR
                |   TK_INT
                |   TK_DOUBLE
                |   KW_TRUE
                |   KW_FALSE
                |   TK_LPAR Expresion TK_RPAR
                ;


DataType        ::=
                    KW_INT
                |   KW_BOOL
                |   KW_DOUBLE
                |   KW_CHAR
                |   KW_STRING
                ;
