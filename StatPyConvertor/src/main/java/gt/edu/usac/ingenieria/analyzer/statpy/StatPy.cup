package gt.edu.usac.ingenieria.analyzer.statpy;
import java.util.stream.Collectors;
import java_cup.runtime.*;
import java.util.Arrays;
import java.util.ArrayList;
import gt.edu.usac.ingenieria.analyzer.errors.SynError;
import gt.edu.usac.ingenieria.lang.statpy.*;
import gt.edu.usac.ingenieria.lang.statpy.expression.*;
import gt.edu.usac.ingenieria.lang.statpy.graph.*;
import gt.edu.usac.ingenieria.lang.statpy.sentence.*;
import gt.edu.usac.ingenieria.lang.statpy.structure.*;


// PARSER
parser code
{:
    public ArrayList<Instruction> inst;
    ArrayList<SynError> errors = new ArrayList<>();
    public void syntax_error(Symbol s){
        errors.add(new SynError(s.left, s.right, s.value, SYM.terminalNames[s.sym]));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        errors.add(new SynError("Syntax error, impossible to recover"));
    }
    public ArrayList<SynError> getErrors() {
        return errors;
        //return errors.stream().map(Object::toString).collect(Collectors.joining("\n-> "));
    }
    public boolean isSuccessExecution() {
        return !(errors.size() > 0);
    }
:}

/* TERMINAL */
terminal String KW_MAIN;
// data types
terminal String KW_VOID, KW_INT, KW_DOUBLE, KW_CHAR, KW_BOOL, KW_STRING;
// control structures
terminal String KW_IF, KW_ELSE, KW_SWITCH, KW_CASE, KW_DEFAULT;
terminal String KW_BREAK, KW_FOR, KW_DO, KW_WHILE, KW_CONTINUE, KW_RETURN;
terminal String KW_PRINT;
// bools
terminal String KW_TRUE, KW_FALSE;
// graph key words
terminal String KW_DEFGLB, KW_BARGRPH, KW_PIEGRPH, KW_TITLE, KW_XAXIS, KW_VALUES, KW_TITLEX, KW_TITLEY;
// literals
terminal String TK_STRING, TK_CHAR, TK_INT, TK_DOUBLE, TK_ID;
// operators
terminal String TK_INC, TK_DEC;
terminal String TK_PLUS, TK_MINUS, TK_MULT, TK_DIV;
terminal String TK_GEQ, TK_LEQ, TK_EQEQ, TK_NOTEQ;
terminal String TK_GREATER, TK_LESS, TK_AND, TK_OR, TK_NOT;
terminal String TK_UMINUS;
// groups
terminal String TK_LPAR, TK_RPAR, TK_LBRC, TK_RBRC, TK_LBRK, TK_RBRK;
// assign
terminal String TK_EQ;
// punctuation
terminal String TK_COMA, TK_SCOLON, TK_COLON;
// especial
terminal String TK_DOLL;

/* NON TERMINALS */
non terminal String Init;
non terminal Main;
// instructions
non terminal ArrayList<Instruction> Instructions;
non terminal Instruction Instruction;
non terminal Expression IncreDecre;
// variable declaration
non terminal Sentence DeclareVar, DeclareArr;
non terminal Expression ArrArgs, DataType;
// expresion control
non terminal Expression Expresion;
non terminal Expression Math;
non terminal Expression Relation;
non terminal Expression Logic;
non terminal Expression ReasignVar;
// Conditional structures
non terminal Instruction IfStatement;
non terminal SwitchStatement, CaseDeft;
non terminal ArrayList<Case> Cases;
non terminal Case Case, Default;
// loop structures
non terminal ForLoop, ForArgs, ForInitArg;
non terminal WhileLoop, DoWhileLoop;

// call a function
non terminal CallFunc;
non terminal ArgsList;

//non terminal DeclareFunc;

non terminal GlobalVarsFunc, GlobalVarsEnv, GlobalVarsInsts, GlobalVarsInst;

non terminal GraphFuncs;
non terminal PieGraphInsts, PieGraphInst;
non terminal BarGraphInsts, BarGraphInst;
non terminal ArrArgsX, ArrArgsV;

non terminal CallJson, JsonArg;
// local environment
non terminal LocalEnv;
non terminal LocalEnvs;
non terminal Print;


/*PRECEDENCES*/
precedence left TK_OR;
precedence left TK_AND;
precedence right TK_NOT;
precedence left TK_EQEQ, TK_NOTEQ;
precedence left TK_LEQ, TK_GEQ, TK_LESS, TK_GREATER;
precedence left TK_PLUS, TK_MINUS;
precedence left TK_MULT, TK_DIV;
precedence right TK_UMINUS;
precedence right TK_DOLL;

/* GRAMATIC */

start with Init;

// beginnig
Init            ::= Main;

Main            ::= KW_VOID KW_MAIN TK_LPAR TK_RPAR TK_LBRC Instructions:i TK_RBRC {:inst=i;:};



Instructions    ::=
                    Instructions:s Instruction:i    {:RESULT = s; RESULT.add(i);:}
                |   Instruction:i                   {:RESULT = new ArrayList<>(Arrays.asList(i));:}
                ;

GraphFuncs      ::=
                    KW_VOID KW_BARGRPH TK_LPAR TK_RPAR TK_LBRC BarGraphInsts TK_RBRC
                |   KW_VOID KW_PIEGRPH TK_LPAR TK_RPAR TK_LBRC PieGraphInsts TK_RBRC
                ;

PieGraphInsts   ::=
                    PieGraphInsts PieGraphInst
                |   PieGraphInst
                ;

PieGraphInst    ::=
                    KW_STRING KW_TITLE TK_EQ TK_ID TK_SCOLON
                |   KW_STRING KW_TITLE TK_EQ TK_STRING TK_SCOLON
                |   KW_STRING TK_LBRC TK_RBRC KW_XAXIS TK_EQ TK_LBRC ArrArgsX TK_RBRC TK_SCOLON
                |   KW_DOUBLE TK_LBRC TK_RBRC KW_VALUES TK_EQ TK_LBRC ArrArgsV TK_RBRC TK_SCOLON
                ;


BarGraphInsts   ::=
                    BarGraphInsts BarGraphInst
                |   BarGraphInst
                ;

BarGraphInst    ::=
                    KW_STRING KW_TITLE TK_EQ TK_ID TK_SCOLON
                |   KW_STRING KW_TITLE TK_EQ TK_STRING TK_SCOLON
                |   KW_STRING KW_TITLEX TK_EQ TK_STRING TK_SCOLON
                |   KW_STRING KW_TITLEX TK_EQ TK_ID TK_SCOLON
                |   KW_STRING KW_TITLEY TK_EQ TK_STRING TK_SCOLON
                |   KW_STRING KW_TITLEY TK_EQ TK_ID TK_SCOLON
                |   KW_STRING TK_LBRK TK_RBRK KW_XAXIS TK_EQ TK_LBRC ArrArgsX TK_RBRC TK_SCOLON
                |   KW_DOUBLE TK_LBRK TK_RBRK KW_VALUES TK_EQ TK_LBRC ArrArgsV TK_RBRC TK_SCOLON
                ;

ArrArgsX        ::=
                    ArrArgsX TK_COMA TK_STRING
                |   ArrArgsX TK_COMA TK_ID
                |   TK_STRING
                |   TK_ID
                ;

ArrArgsV        ::=
                    ArrArgsV TK_COMA TK_DOUBLE
                |   ArrArgsV TK_COMA TK_ID
                |   ArrArgsV TK_COMA CallJson
                |   TK_DOUBLE
                |   TK_ID
                |   CallJson
                ;


GlobalVarsFunc  ::=
                    KW_VOID KW_DEFGLB TK_LPAR TK_RPAR GlobalVarsEnv;

GlobalVarsEnv   ::=
                    TK_LBRC GlobalVarsInsts TK_RBRC
                |   TK_LBRC TK_RBRC
                ;

GlobalVarsInsts ::= GlobalVarsInsts GlobalVarsInst
                |   GlobalVarsInst
                ;

GlobalVarsInst  ::=
                    KW_STRING TK_ID TK_EQ TK_STRING TK_SCOLON
                |   KW_DOUBLE TK_ID TK_EQ TK_DOUBLE TK_SCOLON
                |   KW_STRING TK_ID TK_EQ CallJson TK_SCOLON
                |   KW_DOUBLE TK_ID TK_EQ CallJson TK_SCOLON
                ;


Instruction     ::=
                    DeclareVar:i TK_SCOLON                  {:RESULT=i;:}
                |   DeclareArr:i TK_SCOLON                  {:RESULT=i;:}
                |   CallFunc:i TK_SCOLON                    {:RESULT=i;:}
                |   IfStatement:i                           {:RESULT=i;:}
                |   SwitchStatement:i                       {:RESULT=i;:}
                |   ForLoop:i                               {:RESULT=i;:}
                |   WhileLoop:i                             {:RESULT=i;:}
                |   Print:i                                 {:RESULT=i;:}
                |   DoWhileLoop:i TK_SCOLON                 {:RESULT=i;:}
                |   ReasignVar:i TK_SCOLON                  {:RESULT=i;:}
                |   IncreDecre:i TK_SCOLON                  {:RESULT=i;:}
                |   KW_BREAK:i TK_SCOLON                    {:RESULT= new ControlRW(ileft, iright, i);:}
                |   KW_RETURN:i TK_SCOLON                   {:RESULT= new Return(ileft, iright, null);:}
                |   KW_RETURN:i Expresion:exp TK_SCOLON     {:RESULT= new Return(ileft, iright, exp);:}
                |   KW_CONTINUE:i TK_SCOLON                 {:RESULT= new ControlRW(ileft, iright, i);:}
                |   GlobalVarsFunc:i                        {:RESULT=i;:}
                |   GraphFuncs:i                            {:RESULT=i;:}
                |   error
                ;


DeclareVar      ::=
                    DataType TK_ID:id TK_EQ Expresion:exp  {:RESULT = new DeclareId(idleft, idright, id, exp);:}
                |   DataType TK_ID:id                      {:RESULT = new DeclareId(idleft, idright, id, null);:}
                ;

DeclareArr      ::=
                    DataType TK_LBRK TK_RBRK TK_ID:id TK_EQ TK_LBRC ArgsList:arg TK_RBRC {:RESULT = new DeclareArr(idleft, idright, id, arg);:}
                ;

DataType        ::=
                    KW_INT      {:RESULT = PrimitiveType.INT;:}
                |   KW_BOOL     {:RESULT = PrimitiveType.BOOLEA;:}
                |   KW_DOUBLE   {:RESULT = PrimitiveType.DOUBLE;:}
                |   KW_CHAR     {:RESULT = PrimitiveType.CHAR;:}
                |   KW_STRING   {:RESULT = PrimitiveType.STRING;:}
                ;

ReasignVar      ::= TK_ID TK_EQ Expresion;

//DeclareFunc     ::= KW_VOID TK_ID TK_LPAR TK_RPAR LocalEnv;

CallFunc        ::=
                    TK_ID TK_LPAR ArgsList TK_RPAR
                |   TK_ID TK_LPAR TK_RPAR
                ;

ArgsList        ::=
                    ArgsList:l TK_COMA Expresion:e {:RESULT=l; RESULT.add(e);:}
                |   Expresion:e                    {:RESULT= new ArrayList<>(Arrays(e));:}
                ;

IfStatement     ::=
                    KW_IF TK_LPAR Expresion TK_RPAR LocalEnv KW_ELSE IfStatement
                |   KW_IF TK_LPAR Expresion TK_RPAR LocalEnv KW_ELSE LocalEnv
                |   KW_IF TK_LPAR Expresion TK_RPAR LocalEnv
                ;

LocalEnv        ::=
                    TK_LBRC Instructions TK_RBRC
                |   TK_LBRC TK_RBRC
                ;

SwitchStatement ::=
                    KW_SWITCH TK_LPAR Expresion TK_RPAR LocalEnvs;

LocalEnvs       ::=
                    TK_LBRC CaseDeft TK_RBRC
                |   TK_LBRC TK_RBRC
                ;

CaseDeft        ::=
                    Cases Default
                |   Cases
                |   Default
                ;

Cases           ::=
                    Cases Case
                |   Case
                ;

Case            ::=
                    KW_CASE Expresion TK_COLON Instructions
                |   KW_CASE Expresion TK_COLON
                ;

Default         ::=
                    KW_DEFAULT TK_COLON Instructions
                |   KW_DEFAULT TK_COLON
                ;

ForLoop         ::=
                    KW_FOR TK_LPAR ForArgs TK_RPAR LocalEnv
                ;

ForArgs         ::= ForInitArg TK_SCOLON Expresion TK_SCOLON IncreDecre;

WhileLoop       ::= KW_WHILE TK_LPAR Expresion TK_RPAR LocalEnv;

DoWhileLoop     ::= KW_DO LocalEnv KW_WHILE TK_LPAR Expresion TK_RPAR;

ForInitArg      ::= KW_INT TK_ID TK_EQ TK_INT
                |   ReasignVar;


IncreDecre      ::=
                    TK_ID TK_INC
                |   TK_ID TK_DEC
                ;

CallJson        ::=
                    TK_DOLL TK_LBRC JsonArg TK_COMA JsonArg TK_COMA JsonArg TK_RBRC
                ;

JsonArg         ::=
                    TK_ID
                |   TK_STRING
                ;

Expresion       ::=
                    Math
                |   Relation
                |   Logic
                |   CallFunc
                |   CallJson
                |   IncreDecre
                |   TK_ID
                |   TK_STRING
                |   TK_CHAR
                |   TK_INT
                |   TK_DOUBLE
                |   KW_TRUE
                |   KW_FALSE
                |   TK_LPAR Expresion TK_RPAR
                ;

Math            ::=
                    Expresion TK_PLUS Expresion
                |   Expresion TK_MINUS Expresion
                |   Expresion TK_MULT Expresion
                |   Expresion TK_DIV Expresion
                |   TK_MINUS Expresion                 %prec TK_UMINUS
                ;

Relation        ::=
                    Expresion TK_GEQ Expresion
                |   Expresion TK_LEQ Expresion
                |   Expresion TK_EQEQ Expresion
                |   Expresion TK_NOTEQ Expresion
                |   Expresion TK_GREATER Expresion
                |   Expresion TK_LESS Expresion
                ;

Logic           ::=
                    Expresion TK_AND Expresion
                |   Expresion TK_OR Expresion
                |   TK_NOT Expresion
                ;


Print           ::=
                    KW_PRINT:p TK_LPAR Expresion:exp TK_RPAR TK_SCOLON {:RESULT= new Print(pleft, pright, exp);:}
                |   KW_PRINT:p TK_LPAR TK_RPAR TK_SCOLON               {:RESULT= new Print(pleft, pright, null):}
                ;
