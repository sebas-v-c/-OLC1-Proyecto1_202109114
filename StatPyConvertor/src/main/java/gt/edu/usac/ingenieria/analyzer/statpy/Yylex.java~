// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/java/gt/edu/usac/ingenieria/analyzer/statpy/StatPy.flex

// package and imports
package gt.edu.usac.ingenieria.analyzer.statpy;
import gt.edu.usac.ingenieria.analyzer.errors.LexError;import java_cup.runtime.*;
import java_cup.sym;
import java.util.ArrayList;
import gt.edu.usac.ingenieria.analyzer.errors.LexError;


@SuppressWarnings("fallthrough")
class Yylex {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\1\0\1\7\1\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\12\22\1\23"+
    "\1\24\1\25\1\26\1\27\2\0\1\30\1\31\1\32"+
    "\1\33\1\34\1\30\1\35\6\30\1\36\1\30\1\37"+
    "\3\30\1\40\1\30\1\41\1\42\1\43\1\44\1\30"+
    "\1\45\1\46\1\47\1\0\1\50\1\0\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\2\30\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\3\30\1\76\1\77\1\100"+
    "\7\0\1\3\113\0\1\30\37\0\1\30\u0136\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\2\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\10\23\1\24\1\25"+
    "\1\1\14\23\1\26\1\1\1\27\1\30\1\0\1\31"+
    "\1\0\1\32\2\0\1\33\1\34\1\0\1\2\1\0"+
    "\1\35\1\36\1\37\7\23\1\0\6\23\1\40\3\23"+
    "\1\41\10\23\1\42\1\43\1\0\1\44\20\23\1\45"+
    "\1\46\7\23\1\2\2\23\1\47\4\23\1\50\1\23"+
    "\1\51\1\52\3\23\1\53\1\23\1\54\3\23\1\55"+
    "\1\56\7\23\1\57\3\23\1\60\3\23\1\61\4\23"+
    "\1\62\3\23\1\63\1\64\1\65\1\66\4\23\1\67"+
    "\1\70\1\71\1\23\1\72\1\0\3\23\1\73\1\74"+
    "\1\0\3\23\1\0\2\23\1\75\1\0\2\23\1\0"+
    "\2\23\1\76\1\23\1\77\1\23\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\101\0\303\0\u0104\0\101\0\u0145"+
    "\0\u0186\0\101\0\101\0\101\0\u01c7\0\101\0\u0208\0\u0249"+
    "\0\u028a\0\101\0\101\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"+
    "\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\101\0\101"+
    "\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d"+
    "\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\101\0\u08e3\0\101"+
    "\0\101\0\u0104\0\101\0\u0924\0\101\0\u0965\0\u09a6\0\101"+
    "\0\101\0\u09e7\0\u0a28\0\u0a69\0\101\0\101\0\101\0\u0aaa"+
    "\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0596\0\u0c71"+
    "\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38\0\u0e79"+
    "\0\u0eba\0\u038e\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040"+
    "\0\u1081\0\u10c2\0\101\0\101\0\u1103\0\u0a69\0\u1144\0\u1185"+
    "\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d"+
    "\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513\0\u038e\0\u038e"+
    "\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da\0\101"+
    "\0\u171b\0\u175c\0\u038e\0\u179d\0\u17de\0\u181f\0\u1860\0\u038e"+
    "\0\u18a1\0\u038e\0\u038e\0\u18e2\0\u1923\0\u1964\0\u038e\0\u19a5"+
    "\0\u038e\0\u19e6\0\u1a27\0\u1a68\0\u038e\0\u038e\0\u1aa9\0\u1aea"+
    "\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u038e\0\u1c70\0\u1cb1"+
    "\0\u1cf2\0\u038e\0\u1d33\0\u1d74\0\u1db5\0\u038e\0\u1df6\0\u1e37"+
    "\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u038e\0\u038e"+
    "\0\u038e\0\u038e\0\u1ffe\0\u203f\0\u2080\0\u20c1\0\u038e\0\u038e"+
    "\0\u038e\0\u2102\0\u038e\0\u2143\0\u2184\0\u21c5\0\u2206\0\u038e"+
    "\0\u038e\0\u2247\0\u2288\0\u22c9\0\u230a\0\u234b\0\u238c\0\u23cd"+
    "\0\u038e\0\u240e\0\u244f\0\u2490\0\u24d1\0\u2512\0\u2553\0\101"+
    "\0\u2594\0\u038e\0\u25d5\0\u038e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\3\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\2\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\2\27\1\30\1\31\1\32\1\33\1\34\1\27\1\35"+
    "\1\36\3\27\1\37\1\2\1\40\1\41\1\27\1\42"+
    "\1\43\1\44\1\45\1\46\2\27\1\47\3\27\1\50"+
    "\2\27\1\51\1\52\1\53\1\27\1\54\1\55\1\56"+
    "\1\57\1\60\102\0\1\3\2\0\1\3\122\0\1\61"+
    "\52\0\2\62\1\0\3\62\1\63\37\62\1\64\32\62"+
    "\10\0\1\65\70\0\2\66\1\0\3\66\1\0\37\66"+
    "\1\67\32\66\15\0\1\70\102\0\1\71\75\0\1\72"+
    "\4\0\1\73\77\0\1\74\1\0\1\21\104\0\1\75"+
    "\100\0\1\76\100\0\1\77\74\0\1\27\5\0\15\27"+
    "\3\0\26\27\25\0\1\27\5\0\15\27\3\0\17\27"+
    "\1\100\6\27\25\0\1\27\5\0\15\27\3\0\5\27"+
    "\1\101\20\27\25\0\1\27\5\0\15\27\3\0\12\27"+
    "\1\102\13\27\25\0\1\27\5\0\15\27\3\0\20\27"+
    "\1\103\5\27\25\0\1\27\5\0\15\27\3\0\5\27"+
    "\1\104\20\27\25\0\1\27\5\0\15\27\3\0\11\27"+
    "\1\105\14\27\25\0\1\27\5\0\15\27\3\0\1\27"+
    "\1\106\24\27\33\0\15\27\3\0\1\107\25\27\25\0"+
    "\1\27\5\0\15\27\3\0\17\27\1\110\1\111\5\27"+
    "\25\0\1\27\5\0\15\27\3\0\1\27\1\112\6\27"+
    "\1\113\6\27\1\114\6\27\25\0\1\27\5\0\15\27"+
    "\3\0\5\27\1\115\11\27\1\116\6\27\25\0\1\27"+
    "\5\0\15\27\3\0\14\27\1\117\11\27\25\0\1\27"+
    "\5\0\15\27\3\0\1\27\1\120\15\27\1\121\6\27"+
    "\25\0\1\27\5\0\15\27\3\0\6\27\1\122\7\27"+
    "\1\123\7\27\25\0\1\27\5\0\15\27\3\0\1\27"+
    "\1\124\24\27\25\0\1\27\5\0\15\27\3\0\5\27"+
    "\1\125\20\27\25\0\1\27\5\0\15\27\3\0\22\27"+
    "\1\126\2\27\1\127\25\0\1\27\5\0\15\27\3\0"+
    "\20\27\1\130\5\27\25\0\1\27\5\0\15\27\3\0"+
    "\17\27\1\131\6\27\25\0\1\27\5\0\15\27\3\0"+
    "\10\27\1\132\15\27\102\0\1\133\1\0\2\62\3\0"+
    "\74\62\11\0\1\134\67\0\2\66\3\0\74\66\14\72"+
    "\1\135\64\72\2\73\1\0\1\73\1\0\74\73\22\0"+
    "\1\136\100\0\1\27\5\0\15\27\3\0\16\27\1\137"+
    "\7\27\25\0\1\27\5\0\15\27\3\0\6\27\1\140"+
    "\17\27\25\0\1\27\5\0\15\27\3\0\5\27\1\141"+
    "\20\27\25\0\1\27\5\0\15\27\3\0\1\27\1\142"+
    "\24\27\25\0\1\27\5\0\15\27\3\0\25\27\1\143"+
    "\25\0\1\27\5\0\15\27\3\0\22\27\1\144\3\27"+
    "\25\0\1\27\5\0\15\27\3\0\14\27\1\145\11\27"+
    "\25\0\1\27\5\0\15\27\3\0\17\27\1\146\6\27"+
    "\25\0\1\27\5\0\15\27\3\0\5\27\1\147\20\27"+
    "\25\0\1\27\5\0\15\27\3\0\21\27\1\150\4\27"+
    "\25\0\1\27\5\0\15\27\3\0\1\27\1\151\24\27"+
    "\25\0\1\27\5\0\15\27\3\0\16\27\1\152\7\27"+
    "\25\0\1\27\5\0\15\27\3\0\6\27\1\153\17\27"+
    "\25\0\1\27\5\0\15\27\3\0\23\27\1\154\2\27"+
    "\25\0\1\27\5\0\15\27\3\0\21\27\1\155\4\27"+
    "\25\0\1\27\5\0\15\27\3\0\14\27\1\156\11\27"+
    "\25\0\1\27\5\0\15\27\3\0\20\27\1\157\5\27"+
    "\25\0\1\27\5\0\15\27\3\0\22\27\1\160\3\27"+
    "\25\0\1\27\5\0\15\27\3\0\11\27\1\161\14\27"+
    "\25\0\1\27\5\0\15\27\3\0\22\27\1\162\3\27"+
    "\25\0\1\27\5\0\15\27\3\0\20\27\1\163\5\27"+
    "\25\0\1\27\5\0\15\27\3\0\11\27\1\164\14\27"+
    "\25\0\1\27\5\0\15\27\3\0\23\27\1\165\2\27"+
    "\25\0\1\27\5\0\15\27\3\0\11\27\1\166\14\27"+
    "\25\0\1\27\5\0\15\27\3\0\11\27\1\167\14\27"+
    "\3\0\14\72\1\135\4\72\1\170\57\72\22\0\1\27"+
    "\5\0\15\27\3\0\21\27\1\171\4\27\25\0\1\27"+
    "\5\0\15\27\3\0\11\27\1\172\14\27\25\0\1\27"+
    "\5\0\13\27\1\173\1\27\3\0\26\27\25\0\1\27"+
    "\5\0\15\27\3\0\6\27\1\174\17\27\25\0\1\27"+
    "\5\0\11\27\1\175\3\27\3\0\26\27\25\0\1\27"+
    "\5\0\15\27\3\0\23\27\1\176\2\27\25\0\1\27"+
    "\5\0\15\27\3\0\17\27\1\177\6\27\25\0\1\27"+
    "\5\0\15\27\3\0\14\27\1\200\11\27\25\0\1\27"+
    "\5\0\15\27\3\0\1\27\1\201\24\27\25\0\1\27"+
    "\5\0\15\27\3\0\5\27\1\202\20\27\25\0\1\27"+
    "\5\0\15\27\3\0\20\27\1\203\5\27\25\0\1\27"+
    "\5\0\15\27\3\0\22\27\1\204\3\27\25\0\1\27"+
    "\5\0\15\27\3\0\1\27\1\205\24\27\25\0\1\27"+
    "\5\0\15\27\3\0\2\27\1\206\23\27\25\0\1\27"+
    "\5\0\15\27\3\0\5\27\1\207\20\27\25\0\1\27"+
    "\5\0\15\27\3\0\21\27\1\210\4\27\25\0\1\27"+
    "\5\0\15\27\3\0\16\27\1\211\7\27\25\0\1\27"+
    "\5\0\15\27\3\0\23\27\1\212\2\27\25\0\1\27"+
    "\5\0\15\27\3\0\11\27\1\213\14\27\25\0\1\27"+
    "\5\0\15\27\3\0\22\27\1\214\3\27\25\0\1\27"+
    "\5\0\15\27\3\0\5\27\1\215\20\27\25\0\1\27"+
    "\5\0\15\27\3\0\4\27\1\216\21\27\25\0\1\27"+
    "\5\0\15\27\3\0\14\27\1\217\11\27\25\0\1\27"+
    "\5\0\15\27\3\0\17\27\1\220\6\27\25\0\1\27"+
    "\5\0\15\27\3\0\16\27\1\221\7\27\25\0\1\27"+
    "\5\0\15\27\3\0\11\27\1\222\14\27\25\0\1\27"+
    "\5\0\15\27\3\0\1\27\1\223\24\27\25\0\1\27"+
    "\5\0\15\27\3\0\14\27\1\224\11\27\25\0\1\27"+
    "\5\0\15\27\3\0\20\27\1\225\5\27\25\0\1\27"+
    "\5\0\15\27\3\0\13\27\1\226\12\27\25\0\1\27"+
    "\5\0\15\27\3\0\11\27\1\227\14\27\25\0\1\27"+
    "\5\0\15\27\3\0\23\27\1\230\2\27\25\0\1\27"+
    "\5\0\15\27\3\0\14\27\1\231\11\27\25\0\1\27"+
    "\5\0\15\27\3\0\5\27\1\232\20\27\25\0\1\27"+
    "\5\0\15\27\3\0\20\27\1\233\5\27\25\0\1\27"+
    "\5\0\15\27\3\0\16\27\1\234\7\27\25\0\1\27"+
    "\5\0\15\27\3\0\3\27\1\235\22\27\25\0\1\27"+
    "\5\0\15\27\3\0\5\27\1\236\20\27\25\0\1\27"+
    "\5\0\15\27\3\0\14\27\1\237\11\27\25\0\1\27"+
    "\5\0\15\27\3\0\11\27\1\240\14\27\25\0\1\27"+
    "\5\0\15\27\3\0\3\27\1\241\22\27\25\0\1\27"+
    "\5\0\15\27\3\0\14\27\1\242\11\27\25\0\1\27"+
    "\5\0\15\27\3\0\17\27\1\243\6\27\25\0\1\27"+
    "\5\0\15\27\3\0\5\27\1\244\20\27\25\0\1\27"+
    "\5\0\15\27\3\0\16\27\1\245\7\27\25\0\1\27"+
    "\5\0\15\27\3\0\14\27\1\246\11\27\25\0\1\27"+
    "\5\0\15\27\3\0\5\27\1\247\20\27\25\0\1\27"+
    "\5\0\15\27\3\0\16\27\1\250\7\27\25\0\1\27"+
    "\5\0\15\27\3\0\7\27\1\251\16\27\25\0\1\27"+
    "\5\0\15\27\3\0\10\27\1\252\15\27\25\0\1\27"+
    "\5\0\15\27\3\0\5\27\1\253\20\27\25\0\1\27"+
    "\5\0\15\27\3\0\20\27\1\254\5\27\25\0\1\27"+
    "\5\0\15\27\3\0\1\27\1\255\24\27\25\0\1\27"+
    "\5\0\15\27\3\0\17\27\1\256\6\27\25\0\1\27"+
    "\5\0\13\27\1\257\1\260\3\0\26\27\25\0\1\27"+
    "\5\0\15\27\3\0\21\27\1\261\4\27\25\0\1\27"+
    "\5\0\15\27\3\0\23\27\1\262\2\27\25\0\1\27"+
    "\5\0\15\27\3\0\22\27\1\263\3\27\23\0\1\264"+
    "\1\0\1\27\5\0\15\27\3\0\26\27\25\0\1\27"+
    "\5\0\5\27\1\265\7\27\3\0\26\27\25\0\1\27"+
    "\5\0\1\27\1\266\5\27\1\267\5\27\3\0\26\27"+
    "\25\0\1\27\5\0\15\27\3\0\20\27\1\270\5\27"+
    "\25\0\1\27\5\0\15\27\3\0\5\27\1\271\20\27"+
    "\45\0\1\272\60\0\1\27\5\0\15\27\3\0\14\27"+
    "\1\273\11\27\25\0\1\27\5\0\15\27\3\0\1\27"+
    "\1\274\24\27\25\0\1\27\5\0\15\27\3\0\11\27"+
    "\1\275\14\27\73\0\1\276\32\0\1\27\5\0\15\27"+
    "\3\0\17\27\1\277\6\27\25\0\1\27\5\0\15\27"+
    "\3\0\20\27\1\300\5\27\25\0\1\27\5\0\15\27"+
    "\3\0\5\27\1\301\20\27\64\0\1\302\41\0\1\27"+
    "\5\0\15\27\3\0\2\27\1\303\23\27\25\0\1\27"+
    "\5\0\15\27\3\0\20\27\1\304\5\27\75\0\1\305"+
    "\30\0\1\27\5\0\15\27\3\0\1\27\1\306\24\27"+
    "\25\0\1\27\5\0\15\27\3\0\1\27\1\307\24\27"+
    "\60\0\1\310\45\0\1\27\5\0\15\27\3\0\14\27"+
    "\1\311\11\27\25\0\1\27\5\0\15\27\3\0\21\27"+
    "\1\312\4\27\25\0\1\27\5\0\15\27\3\0\5\27"+
    "\1\313\20\27\25\0\1\27\5\0\15\27\3\0\21\27"+
    "\1\314\4\27\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9750];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\1\11\2\1\3\11"+
    "\1\1\1\11\3\1\2\11\13\1\2\11\15\1\1\11"+
    "\1\1\2\11\1\0\1\11\1\0\1\11\2\0\2\11"+
    "\1\0\1\1\1\0\3\11\7\1\1\0\23\1\2\11"+
    "\1\0\32\1\1\11\73\1\1\0\5\1\1\0\3\1"+
    "\1\0\3\1\1\0\2\1\1\0\2\1\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
      private ArrayList<LexError> errors = new ArrayList<>();
        private void addError(String value){
            errors.add(new LexError(yyline, yycolumn, value));
        }

        public ArrayList<LexError> getErrors(){
            return errors;
        }

        StringBuffer string = new StringBuffer();

        private Symbol symbol(int type){
            return new Symbol(type, yyline, yycolumn);
        }

        private Symbol symbol(int type, Object value){
            return new Symbol(type, yyline, yycolumn, value);
        }
    %}


// directives
%public
%class STPLexer
%cup
%char
%column
%full
%line
%ignorecase

// contructor
%init{
    yyline = 1;
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Yytoken yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { addError(yytext());
            }
          // fall through
          case 65: break;
          case 2:
            { 
            }
          // fall through
          case 66: break;
          case 3:
            { yycolumn = 0;
            }
          // fall through
          case 67: break;
          case 4:
            { return symbol(SYM.TK_NOT,          yytext());
            }
          // fall through
          case 68: break;
          case 5:
            { return symbol(SYM.TK_DOLL,         yytext());
            }
          // fall through
          case 69: break;
          case 6:
            { return symbol(SYM.TK_LPAR,         yytext());
            }
          // fall through
          case 70: break;
          case 7:
            { return symbol(SYM.TK_RPAR,         yytext());
            }
          // fall through
          case 71: break;
          case 8:
            { return symbol(SYM.TK_MULT,         yytext());
            }
          // fall through
          case 72: break;
          case 9:
            { return symbol(SYM.TK_PLUS,         yytext());
            }
          // fall through
          case 73: break;
          case 10:
            { return symbol(SYM.TK_COMA,         yytext());
            }
          // fall through
          case 74: break;
          case 11:
            { return symbol(SYM.TK_MINUS,        yytext());
            }
          // fall through
          case 75: break;
          case 12:
            { return symbol(SYM.TK_DIV,          yytext());
            }
          // fall through
          case 76: break;
          case 13:
            { return symbol(SYM.TK_INT,          yytext());
            }
          // fall through
          case 77: break;
          case 14:
            { return symbol(SYM.TK_COLON,        yytext());
            }
          // fall through
          case 78: break;
          case 15:
            { return symbol(SYM.TK_SCOLON,       yytext());
            }
          // fall through
          case 79: break;
          case 16:
            { return symbol(SYM.TK_LESS,         yytext());
            }
          // fall through
          case 80: break;
          case 17:
            { return symbol(SYM.TK_EQ,           yytext());
            }
          // fall through
          case 81: break;
          case 18:
            { return symbol(SYM.TK_GREATER,      yytext());
            }
          // fall through
          case 82: break;
          case 19:
            { return symbol(SYM.TK_ID,           yytext());
            }
          // fall through
          case 83: break;
          case 20:
            { return symbol(SYM.TK_LBRK,         yytext());
            }
          // fall through
          case 84: break;
          case 21:
            { return symbol(SYM.TK_RBRK,         yytext());
            }
          // fall through
          case 85: break;
          case 22:
            { return symbol(SYM.TK_LBRC,         yytext());
            }
          // fall through
          case 86: break;
          case 23:
            { return symbol(SYM.TK_RBRC,         yytext());
            }
          // fall through
          case 87: break;
          case 24:
            { return symbol(SYM.TK_NOTEQ,        yytext());
            }
          // fall through
          case 88: break;
          case 25:
            { return symbol(SYM.TK_STRING,       yytext());
            }
          // fall through
          case 89: break;
          case 26:
            { return symbol(SYM.TK_AND,          yytext());
            }
          // fall through
          case 90: break;
          case 27:
            { return symbol(SYM.TK_INC,          yytext());
            }
          // fall through
          case 91: break;
          case 28:
            { return symbol(SYM.TK_DEC,          yytext());
            }
          // fall through
          case 92: break;
          case 29:
            { return symbol(SYM.TK_LEQ,          yytext());
            }
          // fall through
          case 93: break;
          case 30:
            { return symbol(SYM.TK_EQEQ,         yytext());
            }
          // fall through
          case 94: break;
          case 31:
            { return symbol(SYM.TK_GEQ,          yytext());
            }
          // fall through
          case 95: break;
          case 32:
            { return symbol(SYM.KW_DO,           yytext());
            }
          // fall through
          case 96: break;
          case 33:
            { return symbol(SYM.KW_IF,           yytext());
            }
          // fall through
          case 97: break;
          case 34:
            { return symbol(SYM.TK_OR,           yytext());
            }
          // fall through
          case 98: break;
          case 35:
            { return symbol(SYM.TK_CHAR,         yytext());
            }
          // fall through
          case 99: break;
          case 36:
            { return symbol(SYM.TK_DOUBLE,       yytext());
            }
          // fall through
          case 100: break;
          case 37:
            { return symbol(SYM.KW_FOR,          yytext());
            }
          // fall through
          case 101: break;
          case 38:
            { return symbol(SYM.KW_INT,          yytext());
            }
          // fall through
          case 102: break;
          case 39:
            { return symbol(SYM.KW_XAXIS,        yytext());
            }
          // fall through
          case 103: break;
          case 40:
            { return symbol(SYM.KW_BOOL,         yytext());
            }
          // fall through
          case 104: break;
          case 41:
            { return symbol(SYM.KW_CASE,         yytext());
            }
          // fall through
          case 105: break;
          case 42:
            { return symbol(SYM.KW_CHAR,         yytext());
            }
          // fall through
          case 106: break;
          case 43:
            { return symbol(SYM.KW_ELSE,         yytext());
            }
          // fall through
          case 107: break;
          case 44:
            { return symbol(SYM.KW_MAIN,         yytext());
            }
          // fall through
          case 108: break;
          case 45:
            { return symbol(SYM.KW_TRUE,         yytext());
            }
          // fall through
          case 109: break;
          case 46:
            { return symbol(SYM.KW_VOID,         yytext());
            }
          // fall through
          case 110: break;
          case 47:
            { return symbol(SYM.KW_BREAK,        yytext());
            }
          // fall through
          case 111: break;
          case 48:
            { return symbol(SYM.KW_FALSE,        yytext());
            }
          // fall through
          case 112: break;
          case 49:
            { return symbol(SYM.KW_WHILE,        yytext());
            }
          // fall through
          case 113: break;
          case 50:
            { return symbol(SYM.KW_TITLE,        yytext());
            }
          // fall through
          case 114: break;
          case 51:
            { return symbol(SYM.KW_DOUBLE,       yytext());
            }
          // fall through
          case 115: break;
          case 52:
            { return symbol(SYM.KW_RETURN,       yytext());
            }
          // fall through
          case 116: break;
          case 53:
            { return symbol(SYM.KW_STRING,       yytext());
            }
          // fall through
          case 117: break;
          case 54:
            { return symbol(SYM.KW_SWITCH,       yytext());
            }
          // fall through
          case 118: break;
          case 55:
            { return symbol(SYM.KW_TITLEX,       yytext());
            }
          // fall through
          case 119: break;
          case 56:
            { return symbol(SYM.KW_TITLEY,       yytext());
            }
          // fall through
          case 120: break;
          case 57:
            { return symbol(SYM.KW_VALUES,       yytext());
            }
          // fall through
          case 121: break;
          case 58:
            { return symbol(SYM.KW_DEFAULT,      yytext());
            }
          // fall through
          case 122: break;
          case 59:
            { return symbol(SYM.KW_NVAL,         yytext());
            }
          // fall through
          case 123: break;
          case 60:
            { return symbol(SYM.KW_CONTINUE,     yytext());
            }
          // fall through
          case 124: break;
          case 61:
            { return symbol(SYM.KW_PIEGRPH,      yytext());
            }
          // fall through
          case 125: break;
          case 62:
            { return symbol(SYM.KW_PRINT,        yytext());
            }
          // fall through
          case 126: break;
          case 63:
            { return symbol(SYM.KW_BARGRPH,      yytext());
            }
          // fall through
          case 127: break;
          case 64:
            { return symbol(SYM.KW_DEFGLB,       yytext());
            }
          // fall through
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
