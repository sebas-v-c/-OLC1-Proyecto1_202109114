
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.usac.ingenieria.analyzer.statpy;

import java.util.stream.Collectors;
import java_cup.runtime.*;
import java.util.Arrays;
import java.util.ArrayList;
import gt.edu.usac.ingenieria.analyzer.errors.SynError;
import gt.edu.usac.ingenieria.lang.statpy.*;
import gt.edu.usac.ingenieria.lang.statpy.expression.*;
import gt.edu.usac.ingenieria.lang.statpy.graph.*;
import gt.edu.usac.ingenieria.lang.statpy.sentence.*;
import gt.edu.usac.ingenieria.lang.statpy.structure.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class STPParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SYM.class;
}

  /** Default constructor. */
  @Deprecated
  public STPParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public STPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public STPParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\200\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\003\010\000\002\004\004\000\002\004\003" +
    "\000\002\040\003\000\002\040\003\000\002\041\011\000" +
    "\002\042\011\000\002\043\004\000\002\043\003\000\002" +
    "\045\007\000\002\045\007\000\002\045\007\000\002\045" +
    "\013\000\002\045\013\000\002\044\004\000\002\044\003" +
    "\000\002\046\007\000\002\046\007\000\002\046\007\000" +
    "\002\046\007\000\002\046\007\000\002\046\007\000\002" +
    "\046\007\000\002\046\007\000\002\046\007\000\002\046" +
    "\013\000\002\046\013\000\002\034\007\000\002\035\005" +
    "\000\002\035\004\000\002\036\004\000\002\036\003\000" +
    "\002\037\007\000\002\037\007\000\002\037\007\000\002" +
    "\037\007\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\005\000\002\005\004\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\007\006" +
    "\000\002\007\004\000\002\010\012\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\016\005\000\002\032\006\000\002\032" +
    "\005\000\002\033\005\000\002\033\003\000\002\017\011" +
    "\000\002\017\011\000\002\017\007\000\002\051\005\000" +
    "\002\051\004\000\002\020\007\000\002\052\005\000\002" +
    "\052\004\000\002\021\004\000\002\021\003\000\002\021" +
    "\003\000\002\022\004\000\002\022\003\000\002\023\006" +
    "\000\002\023\005\000\002\024\005\000\002\024\004\000" +
    "\002\025\007\000\002\026\007\000\002\027\006\000\002" +
    "\027\003\000\002\006\004\000\002\006\004\000\002\030" +
    "\007\000\002\031\010\000\002\047\012\000\002\050\003" +
    "\000\002\050\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\004\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\004\000" +
    "\002\053\007\000\002\053\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012f\000\004\005\004\001\002\000\004\004\010\001" +
    "\002\000\004\002\007\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\004\067\011\001\002\000" +
    "\004\070\012\001\002\000\004\071\013\001\002\000\046" +
    "\003\041\005\047\006\015\007\021\010\022\011\033\012" +
    "\054\013\045\015\043\020\051\021\017\022\020\023\055" +
    "\024\036\025\037\027\014\046\025\072\034\001\002\000" +
    "\004\067\u012c\001\002\000\006\046\uffc5\073\uffc5\001\002" +
    "\000\052\003\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\013\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa" +
    "\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\027\ufffa\046" +
    "\ufffa\072\ufffa\001\002\000\004\067\u011c\001\002\000\004" +
    "\071\151\001\002\000\006\046\uffc3\073\uffc3\001\002\000" +
    "\006\046\uffc2\073\uffc2\001\002\000\052\003\uffd5\005\uffd5" +
    "\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\015" +
    "\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\027\uffd5\046\uffd5\072\uffd5\001\002\000" +
    "\004\077\u0116\001\002\000\012\047\104\050\106\067\105" +
    "\075\u0114\001\002\000\004\077\u0113\001\002\000\004\077" +
    "\u0112\001\002\000\052\003\uffd6\005\uffd6\006\uffd6\007\uffd6" +
    "\010\uffd6\011\uffd6\012\uffd6\013\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\027\uffd6\046\uffd6\072\uffd6\001\002\000\046\003\041\005" +
    "\047\006\015\007\021\010\022\011\033\012\054\013\045" +
    "\015\043\020\051\021\017\022\020\023\055\024\036\025" +
    "\037\027\014\046\025\072\u0111\001\002\000\052\003\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc" +
    "\023\ufffc\024\ufffc\025\ufffc\027\ufffc\046\ufffc\072\ufffc\001" +
    "\002\000\006\046\uffc4\073\uffc4\001\002\000\004\002\ufffe" +
    "\001\002\000\052\003\uffca\005\uffca\006\uffca\007\uffca\010" +
    "\uffca\011\uffca\012\uffca\013\uffca\015\uffca\016\uffca\017\uffca" +
    "\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\027" +
    "\uffca\046\uffca\072\uffca\001\002\000\004\077\u0110\001\002" +
    "\000\032\030\066\031\064\042\071\043\076\044\100\045" +
    "\067\046\103\052\102\065\101\067\070\077\u010d\101\072" +
    "\001\002\000\052\003\uffd4\005\uffd4\006\uffd4\007\uffd4\010" +
    "\uffd4\011\uffd4\012\uffd4\013\uffd4\015\uffd4\016\uffd4\017\uffd4" +
    "\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\027" +
    "\uffd4\046\uffd4\072\uffd4\001\002\000\052\003\uffc9\005\uffc9" +
    "\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\015" +
    "\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\027\uffc9\046\uffc9\072\uffc9\001\002\000" +
    "\004\077\u010c\001\002\000\004\067\370\001\002\000\052" +
    "\003\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012" +
    "\uffd3\013\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\025\uffd3\027\uffd3\046\uffd3\072" +
    "\uffd3\001\002\000\004\067\361\001\002\000\004\077\360" +
    "\001\002\000\010\032\204\033\206\034\205\001\002\000" +
    "\006\046\172\073\173\001\002\000\004\077\171\001\002" +
    "\000\052\003\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\012\ufffb\013\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb" +
    "\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\027\ufffb\046" +
    "\ufffb\072\ufffb\001\002\000\052\003\uffcb\005\uffcb\006\uffcb" +
    "\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\027\uffcb\046\uffcb\072\uffcb\001\002\000\006\046" +
    "\uffc1\073\uffc1\001\002\000\004\067\061\001\002\000\052" +
    "\003\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012" +
    "\uffd7\013\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\025\uffd7\027\uffd7\046\uffd7\072" +
    "\uffd7\001\002\000\004\077\060\001\002\000\052\003\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\027\uffd8\046\uffd8\072\uffd8\001" +
    "\002\000\030\030\066\031\064\042\071\043\076\044\100" +
    "\045\067\046\103\052\102\065\101\067\070\101\072\001" +
    "\002\000\044\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d" +
    "\056\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\064" +
    "\uff9d\070\uff9d\072\uff9d\076\uff9d\077\uff9d\100\uff9d\001\002" +
    "\000\044\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056" +
    "\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c" +
    "\070\uff9c\072\uff9c\076\uff9c\077\uff9c\100\uff9c\001\002\000" +
    "\044\051\uff93\052\uff93\053\uff93\054\uff93\055\uff93\056\uff93" +
    "\057\uff93\060\uff93\061\uff93\062\uff93\063\uff93\064\uff93\070" +
    "\uff93\072\uff93\076\uff93\077\uff93\100\uff93\001\002\000\044" +
    "\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057" +
    "\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\070\uff9a" +
    "\072\uff9a\076\uff9a\077\uff9a\100\uff9a\001\002\000\044\051" +
    "\uff94\052\uff94\053\uff94\054\uff94\055\uff94\056\uff94\057\uff94" +
    "\060\uff94\061\uff94\062\uff94\063\uff94\064\uff94\070\uff94\072" +
    "\uff94\076\uff94\077\uff94\100\uff94\001\002\000\044\051\uff95" +
    "\052\uff95\053\uff95\054\uff95\055\uff95\056\uff95\057\uff95\060" +
    "\uff95\061\uff95\062\uff95\063\uff95\064\uff95\070\uff95\072\uff95" +
    "\076\uff95\077\uff95\100\uff95\001\002\000\030\030\066\031" +
    "\064\042\071\043\076\044\100\045\067\046\103\052\102" +
    "\065\101\067\070\101\072\001\002\000\044\051\uff98\052" +
    "\uff98\053\uff98\054\uff98\055\uff98\056\uff98\057\uff98\060\uff98" +
    "\061\uff98\062\uff98\063\uff98\064\uff98\070\uff98\072\uff98\076" +
    "\uff98\077\uff98\100\uff98\001\002\000\004\071\156\001\002" +
    "\000\044\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056" +
    "\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e" +
    "\070\uff9e\072\uff9e\076\uff9e\077\uff9e\100\uff9e\001\002\000" +
    "\034\051\122\052\124\053\120\054\113\055\116\056\117" +
    "\057\115\060\112\061\114\062\125\063\121\064\123\070" +
    "\147\001\002\000\044\051\uff9f\052\uff9f\053\uff9f\054\uff9f" +
    "\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063" +
    "\uff9f\064\uff9f\070\uff9f\072\uff9f\076\uff9f\077\uff9f\100\uff9f" +
    "\001\002\000\044\051\uff97\052\uff97\053\uff97\054\uff97\055" +
    "\uff97\056\uff97\057\uff97\060\uff97\061\uff97\062\uff97\063\uff97" +
    "\064\uff97\070\uff97\072\uff97\076\uff97\077\uff97\100\uff97\001" +
    "\002\000\044\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b" +
    "\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\064" +
    "\uff9b\070\uff9b\072\uff9b\076\uff9b\077\uff9b\100\uff9b\001\002" +
    "\000\044\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96\056" +
    "\uff96\057\uff96\060\uff96\061\uff96\062\uff96\063\uff96\064\uff96" +
    "\070\uff96\072\uff96\076\uff96\077\uff96\100\uff96\001\002\000" +
    "\030\030\066\031\064\042\071\043\076\044\100\045\067" +
    "\046\103\052\102\065\101\067\070\101\072\001\002\000" +
    "\030\030\066\031\064\042\071\043\076\044\100\045\067" +
    "\046\103\052\102\065\101\067\070\101\072\001\002\000" +
    "\052\047\104\050\106\051\uff99\052\uff99\053\uff99\054\uff99" +
    "\055\uff99\056\uff99\057\uff99\060\uff99\061\uff99\062\uff99\063" +
    "\uff99\064\uff99\067\105\070\uff99\072\uff99\076\uff99\077\uff99" +
    "\100\uff99\001\002\000\044\051\uffa6\052\uffa6\053\uffa6\054" +
    "\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6" +
    "\063\uffa6\064\uffa6\070\uffa6\072\uffa6\076\uffa6\077\uffa6\100" +
    "\uffa6\001\002\000\032\030\066\031\064\042\071\043\076" +
    "\044\100\045\067\046\103\052\102\065\101\067\070\070" +
    "\107\101\072\001\002\000\044\051\uffa5\052\uffa5\053\uffa5" +
    "\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062" +
    "\uffa5\063\uffa5\064\uffa5\070\uffa5\072\uffa5\076\uffa5\077\uffa5" +
    "\100\uffa5\001\002\000\044\051\uffbe\052\uffbe\053\uffbe\054" +
    "\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe" +
    "\063\uffbe\064\uffbe\070\uffbe\072\uffbe\076\uffbe\077\uffbe\100" +
    "\uffbe\001\002\000\006\070\142\076\143\001\002\000\040" +
    "\051\122\052\124\053\120\054\113\055\116\056\117\057" +
    "\115\060\112\061\114\062\125\063\121\064\123\070\uffbc" +
    "\072\uffbc\076\uffbc\001\002\000\030\030\066\031\064\042" +
    "\071\043\076\044\100\045\067\046\103\052\102\065\101" +
    "\067\070\101\072\001\002\000\030\030\066\031\064\042" +
    "\071\043\076\044\100\045\067\046\103\052\102\065\101" +
    "\067\070\101\072\001\002\000\030\030\066\031\064\042" +
    "\071\043\076\044\100\045\067\046\103\052\102\065\101" +
    "\067\070\101\072\001\002\000\030\030\066\031\064\042" +
    "\071\043\076\044\100\045\067\046\103\052\102\065\101" +
    "\067\070\101\072\001\002\000\030\030\066\031\064\042" +
    "\071\043\076\044\100\045\067\046\103\052\102\065\101" +
    "\067\070\101\072\001\002\000\030\030\066\031\064\042" +
    "\071\043\076\044\100\045\067\046\103\052\102\065\101" +
    "\067\070\101\072\001\002\000\030\030\066\031\064\042" +
    "\071\043\076\044\100\045\067\046\103\052\102\065\101" +
    "\067\070\101\072\001\002\000\030\030\066\031\064\042" +
    "\071\043\076\044\100\045\067\046\103\052\102\065\101" +
    "\067\070\101\072\001\002\000\030\030\066\031\064\042" +
    "\071\043\076\044\100\045\067\046\103\052\102\065\101" +
    "\067\070\101\072\001\002\000\030\030\066\031\064\042" +
    "\071\043\076\044\100\045\067\046\103\052\102\065\101" +
    "\067\070\101\072\001\002\000\030\030\066\031\064\042" +
    "\071\043\076\044\100\045\067\046\103\052\102\065\101" +
    "\067\070\101\072\001\002\000\030\030\066\031\064\042" +
    "\071\043\076\044\100\045\067\046\103\052\102\065\101" +
    "\067\070\101\072\001\002\000\044\051\122\052\124\053" +
    "\120\054\113\055\uff87\056\uff87\057\uff87\060\uff87\061\uff87" +
    "\062\uff87\063\uff87\064\uff87\070\uff87\072\uff87\076\uff87\077" +
    "\uff87\100\uff87\001\002\000\044\051\uff90\052\uff90\053\120" +
    "\054\113\055\uff90\056\uff90\057\uff90\060\uff90\061\uff90\062" +
    "\uff90\063\uff90\064\uff90\070\uff90\072\uff90\076\uff90\077\uff90" +
    "\100\uff90\001\002\000\044\051\122\052\124\053\120\054" +
    "\113\055\116\056\117\057\115\060\112\061\114\062\125" +
    "\063\121\064\uff85\070\uff85\072\uff85\076\uff85\077\uff85\100" +
    "\uff85\001\002\000\044\051\uff91\052\uff91\053\120\054\113" +
    "\055\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062\uff91\063" +
    "\uff91\064\uff91\070\uff91\072\uff91\076\uff91\077\uff91\100\uff91" +
    "\001\002\000\044\051\122\052\124\053\120\054\113\055" +
    "\116\056\117\057\115\060\112\061\114\062\125\063\uff86" +
    "\064\uff86\070\uff86\072\uff86\076\uff86\077\uff86\100\uff86\001" +
    "\002\000\044\051\uff8f\052\uff8f\053\uff8f\054\uff8f\055\uff8f" +
    "\056\uff8f\057\uff8f\060\uff8f\061\uff8f\062\uff8f\063\uff8f\064" +
    "\uff8f\070\uff8f\072\uff8f\076\uff8f\077\uff8f\100\uff8f\001\002" +
    "\000\044\051\122\052\124\053\120\054\113\055\uff8b\056" +
    "\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\063\uff8b\064\uff8b" +
    "\070\uff8b\072\uff8b\076\uff8b\077\uff8b\100\uff8b\001\002\000" +
    "\044\051\122\052\124\053\120\054\113\055\uff8c\056\uff8c" +
    "\057\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c\070" +
    "\uff8c\072\uff8c\076\uff8c\077\uff8c\100\uff8c\001\002\000\044" +
    "\051\122\052\124\053\120\054\113\055\116\056\117\057" +
    "\uff8a\060\uff8a\061\114\062\125\063\uff8a\064\uff8a\070\uff8a" +
    "\072\uff8a\076\uff8a\077\uff8a\100\uff8a\001\002\000\044\051" +
    "\122\052\124\053\120\054\113\055\uff88\056\uff88\057\uff88" +
    "\060\uff88\061\uff88\062\uff88\063\uff88\064\uff88\070\uff88\072" +
    "\uff88\076\uff88\077\uff88\100\uff88\001\002\000\044\051\uff8e" +
    "\052\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e\060" +
    "\uff8e\061\uff8e\062\uff8e\063\uff8e\064\uff8e\070\uff8e\072\uff8e" +
    "\076\uff8e\077\uff8e\100\uff8e\001\002\000\044\051\122\052" +
    "\124\053\120\054\113\055\116\056\117\057\uff89\060\uff89" +
    "\061\114\062\125\063\uff89\064\uff89\070\uff89\072\uff89\076" +
    "\uff89\077\uff89\100\uff89\001\002\000\044\051\uffbf\052\uffbf" +
    "\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061" +
    "\uffbf\062\uffbf\063\uffbf\064\uffbf\070\uffbf\072\uffbf\076\uffbf" +
    "\077\uffbf\100\uffbf\001\002\000\030\030\066\031\064\042" +
    "\071\043\076\044\100\045\067\046\103\052\102\065\101" +
    "\067\070\101\072\001\002\000\040\051\122\052\124\053" +
    "\120\054\113\055\116\056\117\057\115\060\112\061\114" +
    "\062\125\063\121\064\123\070\uffbd\072\uffbd\076\uffbd\001" +
    "\002\000\044\051\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d" +
    "\056\uff8d\057\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d\064" +
    "\uff8d\070\uff8d\072\uff8d\076\uff8d\077\uff8d\100\uff8d\001\002" +
    "\000\044\051\122\052\124\053\120\054\113\055\116\056" +
    "\117\057\115\060\112\061\114\062\125\063\uff84\064\uff84" +
    "\070\uff84\072\uff84\076\uff84\077\uff84\100\uff84\001\002\000" +
    "\004\071\151\001\002\000\052\003\uffa4\005\uffa4\006\uffa4" +
    "\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\015\uffa4\016" +
    "\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4" +
    "\025\uffa4\027\uffa4\046\uffa4\072\uffa4\001\002\000\046\003" +
    "\041\005\047\006\015\007\021\010\022\011\033\012\054" +
    "\013\045\015\043\020\051\021\017\022\020\023\055\024" +
    "\036\025\037\027\014\046\025\072\153\001\002\000\046" +
    "\003\041\005\047\006\015\007\021\010\022\011\033\012" +
    "\054\013\045\015\043\020\051\021\017\022\020\023\055" +
    "\024\036\025\037\027\014\046\025\072\155\001\002\000" +
    "\054\003\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020" +
    "\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\027\uffb7" +
    "\046\uffb7\072\uffb7\001\002\000\052\003\ufffd\005\ufffd\006" +
    "\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\015\ufffd" +
    "\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024" +
    "\ufffd\025\ufffd\027\ufffd\046\ufffd\072\ufffd\001\002\000\054" +
    "\003\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012" +
    "\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8" +
    "\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\027\uffb8\046" +
    "\uffb8\072\uffb8\001\002\000\004\026\157\001\002\000\004" +
    "\076\160\001\002\000\006\042\162\046\163\001\002\000" +
    "\004\076\164\001\002\000\006\072\uffa0\076\uffa0\001\002" +
    "\000\006\072\uffa1\076\uffa1\001\002\000\006\042\162\046" +
    "\163\001\002\000\004\072\166\001\002\000\044\051\uffa2" +
    "\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2\060" +
    "\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\070\uffa2\072\uffa2" +
    "\076\uffa2\077\uffa2\100\uffa2\001\002\000\034\051\122\052" +
    "\124\053\120\054\113\055\116\056\117\057\115\060\112" +
    "\061\114\062\125\063\121\064\123\070\170\001\002\000" +
    "\044\051\uff92\052\uff92\053\uff92\054\uff92\055\uff92\056\uff92" +
    "\057\uff92\060\uff92\061\uff92\062\uff92\063\uff92\064\uff92\070" +
    "\uff92\072\uff92\076\uff92\077\uff92\100\uff92\001\002\000\052" +
    "\003\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012" +
    "\uffcf\013\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\024\uffcf\025\uffcf\027\uffcf\046\uffcf\072" +
    "\uffcf\001\002\000\006\075\202\077\uffc7\001\002\000\004" +
    "\074\174\001\002\000\004\046\175\001\002\000\004\075" +
    "\176\001\002\000\004\071\177\001\002\000\030\030\066" +
    "\031\064\042\071\043\076\044\100\045\067\046\103\052" +
    "\102\065\101\067\070\101\072\001\002\000\006\072\201" +
    "\076\143\001\002\000\004\077\uffc6\001\002\000\030\030" +
    "\066\031\064\042\071\043\076\044\100\045\067\046\103" +
    "\052\102\065\101\067\070\101\072\001\002\000\034\051" +
    "\122\052\124\053\120\054\113\055\116\056\117\057\115" +
    "\060\112\061\114\062\125\063\121\064\123\077\uffc8\001" +
    "\002\000\004\067\331\001\002\000\004\067\270\001\002" +
    "\000\004\067\207\001\002\000\004\070\210\001\002\000" +
    "\004\071\211\001\002\000\006\007\212\012\215\001\002" +
    "\000\004\073\260\001\002\000\010\007\212\012\215\072" +
    "\256\001\002\000\010\007\uffef\012\uffef\072\uffef\001\002" +
    "\000\012\035\216\040\220\041\217\073\221\001\002\000" +
    "\004\075\247\001\002\000\004\075\240\001\002\000\004" +
    "\075\231\001\002\000\004\074\222\001\002\000\004\036" +
    "\223\001\002\000\004\075\224\001\002\000\004\071\225" +
    "\001\002\000\030\030\066\031\064\042\071\043\076\044" +
    "\100\045\067\046\103\052\102\065\101\067\070\101\072" +
    "\001\002\000\006\072\227\076\143\001\002\000\004\077" +
    "\230\001\002\000\010\007\uffe5\012\uffe5\072\uffe5\001\002" +
    "\000\010\042\232\046\233\101\072\001\002\000\004\077" +
    "\237\001\002\000\004\077\236\001\002\000\004\077\235" +
    "\001\002\000\010\007\uffe9\012\uffe9\072\uffe9\001\002\000" +
    "\010\007\uffea\012\uffea\072\uffea\001\002\000\010\007\uffeb" +
    "\012\uffeb\072\uffeb\001\002\000\010\042\241\046\242\101" +
    "\072\001\002\000\004\077\246\001\002\000\004\077\245" +
    "\001\002\000\004\077\244\001\002\000\010\007\uffe6\012" +
    "\uffe6\072\uffe6\001\002\000\010\007\uffe7\012\uffe7\072\uffe7" +
    "\001\002\000\010\007\uffe8\012\uffe8\072\uffe8\001\002\000" +
    "\010\042\250\046\251\101\072\001\002\000\004\077\255" +
    "\001\002\000\004\077\254\001\002\000\004\077\253\001" +
    "\002\000\010\007\uffec\012\uffec\072\uffec\001\002\000\010" +
    "\007\uffee\012\uffee\072\uffee\001\002\000\010\007\uffed\012" +
    "\uffed\072\uffed\001\002\000\052\003\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\015\ufff8\016" +
    "\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8" +
    "\025\ufff8\027\ufff8\046\ufff8\072\ufff8\001\002\000\010\007" +
    "\ufff0\012\ufff0\072\ufff0\001\002\000\004\074\261\001\002" +
    "\000\004\037\262\001\002\000\004\075\263\001\002\000" +
    "\004\071\264\001\002\000\030\030\066\031\064\042\071" +
    "\043\076\044\100\045\067\046\103\052\102\065\101\067" +
    "\070\101\072\001\002\000\006\072\266\076\143\001\002" +
    "\000\004\077\267\001\002\000\010\007\uffe4\012\uffe4\072" +
    "\uffe4\001\002\000\004\070\271\001\002\000\004\071\272" +
    "\001\002\000\006\007\274\012\276\001\002\000\010\007" +
    "\ufff6\012\ufff6\072\ufff6\001\002\000\004\073\321\001\002" +
    "\000\010\007\274\012\276\072\317\001\002\000\006\035" +
    "\277\073\300\001\002\000\004\075\310\001\002\000\004" +
    "\074\301\001\002\000\004\036\302\001\002\000\004\075" +
    "\303\001\002\000\004\071\304\001\002\000\030\030\066" +
    "\031\064\042\071\043\076\044\100\045\067\046\103\052" +
    "\102\065\101\067\070\101\072\001\002\000\006\072\306" +
    "\076\143\001\002\000\004\077\307\001\002\000\010\007" +
    "\ufff2\012\ufff2\072\ufff2\001\002\000\010\042\311\046\312" +
    "\101\072\001\002\000\004\077\316\001\002\000\004\077" +
    "\315\001\002\000\004\077\314\001\002\000\010\007\ufff3" +
    "\012\ufff3\072\ufff3\001\002\000\010\007\ufff5\012\ufff5\072" +
    "\ufff5\001\002\000\010\007\ufff4\012\ufff4\072\ufff4\001\002" +
    "\000\052\003\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011" +
    "\ufff9\012\ufff9\013\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9" +
    "\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\027\ufff9\046" +
    "\ufff9\072\ufff9\001\002\000\010\007\ufff7\012\ufff7\072\ufff7" +
    "\001\002\000\004\074\322\001\002\000\004\037\323\001" +
    "\002\000\004\075\324\001\002\000\004\071\325\001\002" +
    "\000\030\030\066\031\064\042\071\043\076\044\100\045" +
    "\067\046\103\052\102\065\101\067\070\101\072\001\002" +
    "\000\006\072\327\076\143\001\002\000\004\077\330\001" +
    "\002\000\010\007\ufff1\012\ufff1\072\ufff1\001\002\000\004" +
    "\070\332\001\002\000\004\071\334\001\002\000\052\003" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3" +
    "\013\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\023\uffe3\024\uffe3\025\uffe3\027\uffe3\046\uffe3\072\uffe3" +
    "\001\002\000\010\007\336\012\341\072\335\001\002\000" +
    "\052\003\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1" +
    "\012\uffe1\013\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\027\uffe1\046\uffe1" +
    "\072\uffe1\001\002\000\004\046\352\001\002\000\010\007" +
    "\336\012\341\072\350\001\002\000\010\007\uffdf\012\uffdf" +
    "\072\uffdf\001\002\000\004\046\342\001\002\000\004\075" +
    "\343\001\002\000\006\042\344\101\072\001\002\000\004" +
    "\077\347\001\002\000\004\077\346\001\002\000\010\007" +
    "\uffdc\012\uffdc\072\uffdc\001\002\000\010\007\uffde\012\uffde" +
    "\072\uffde\001\002\000\052\003\uffe2\005\uffe2\006\uffe2\007" +
    "\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\015\uffe2\016\uffe2" +
    "\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025" +
    "\uffe2\027\uffe2\046\uffe2\072\uffe2\001\002\000\010\007\uffe0" +
    "\012\uffe0\072\uffe0\001\002\000\004\075\353\001\002\000" +
    "\006\045\355\101\072\001\002\000\004\077\357\001\002" +
    "\000\004\077\356\001\002\000\010\007\uffdd\012\uffdd\072" +
    "\uffdd\001\002\000\010\007\uffdb\012\uffdb\072\uffdb\001\002" +
    "\000\052\003\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011" +
    "\uffda\012\uffda\013\uffda\015\uffda\016\uffda\017\uffda\020\uffda" +
    "\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\027\uffda\046" +
    "\uffda\072\uffda\001\002\000\030\030\066\031\064\042\071" +
    "\043\076\044\100\045\067\046\103\052\102\065\101\067" +
    "\070\101\072\001\002\000\034\051\122\052\124\053\120" +
    "\054\113\055\116\056\117\057\115\060\112\061\114\062" +
    "\125\063\121\064\123\070\363\001\002\000\004\071\151" +
    "\001\002\000\054\003\uffb9\005\uffb9\006\uffb9\007\uffb9\010" +
    "\uffb9\011\uffb9\012\uffb9\013\uffb9\014\365\015\uffb9\016\uffb9" +
    "\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025" +
    "\uffb9\027\uffb9\046\uffb9\072\uffb9\001\002\000\006\013\045" +
    "\071\151\001\002\000\052\003\uffbb\005\uffbb\006\uffbb\007" +
    "\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\015\uffbb\016\uffbb" +
    "\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025" +
    "\uffbb\027\uffbb\046\uffbb\072\uffbb\001\002\000\052\003\uffba" +
    "\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013" +
    "\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba" +
    "\023\uffba\024\uffba\025\uffba\027\uffba\046\uffba\072\uffba\001" +
    "\002\000\030\030\066\031\064\042\071\043\076\044\100" +
    "\045\067\046\103\052\102\065\101\067\070\101\072\001" +
    "\002\000\034\051\122\052\124\053\120\054\113\055\116" +
    "\056\117\057\115\060\112\061\114\062\125\063\121\064" +
    "\123\070\372\001\002\000\004\071\374\001\002\000\052" +
    "\003\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012" +
    "\uffb6\013\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6" +
    "\022\uffb6\023\uffb6\024\uffb6\025\uffb6\027\uffb6\046\uffb6\072" +
    "\uffb6\001\002\000\010\016\u0102\017\u0103\072\375\001\002" +
    "\000\052\003\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011" +
    "\uffb4\012\uffb4\013\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\027\uffb4\046" +
    "\uffb4\072\uffb4\001\002\000\010\016\u0102\017\u0103\072\uffb2" +
    "\001\002\000\010\016\uffaf\017\uffaf\072\uffaf\001\002\000" +
    "\004\072\uffb1\001\002\000\004\072\u0109\001\002\000\030" +
    "\030\066\031\064\042\071\043\076\044\100\045\067\046" +
    "\103\052\102\065\101\067\070\101\072\001\002\000\004" +
    "\100\u0104\001\002\000\046\003\041\005\047\006\015\007" +
    "\021\010\022\011\033\012\054\013\045\015\043\020\051" +
    "\021\017\022\020\023\055\024\036\025\037\027\014\046" +
    "\025\072\uffab\001\002\000\046\003\041\005\047\006\015" +
    "\007\021\010\022\011\033\012\054\013\045\015\043\020" +
    "\051\021\017\022\020\023\055\024\036\025\037\027\014" +
    "\046\025\072\uffac\001\002\000\034\051\122\052\124\053" +
    "\120\054\113\055\116\056\117\057\115\060\112\061\114" +
    "\062\125\063\121\064\123\100\u0107\001\002\000\052\003" +
    "\041\005\047\006\015\007\021\010\022\011\033\012\054" +
    "\013\045\015\043\016\uffad\017\uffad\020\051\021\017\022" +
    "\020\023\055\024\036\025\037\027\014\046\025\072\uffad" +
    "\001\002\000\052\003\041\005\047\006\015\007\021\010" +
    "\022\011\033\012\054\013\045\015\043\016\uffae\017\uffae" +
    "\020\051\021\017\022\020\023\055\024\036\025\037\027" +
    "\014\046\025\072\uffae\001\002\000\052\003\uffb5\005\uffb5" +
    "\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\015" +
    "\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5" +
    "\024\uffb5\025\uffb5\027\uffb5\046\uffb5\072\uffb5\001\002\000" +
    "\004\072\uffb3\001\002\000\010\016\uffb0\017\uffb0\072\uffb0" +
    "\001\002\000\052\003\uffd9\005\uffd9\006\uffd9\007\uffd9\010" +
    "\uffd9\011\uffd9\012\uffd9\013\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\027" +
    "\uffd9\046\uffd9\072\uffd9\001\002\000\052\003\uffce\005\uffce" +
    "\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\015" +
    "\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce" +
    "\024\uffce\025\uffce\027\uffce\046\uffce\072\uffce\001\002\000" +
    "\034\051\122\052\124\053\120\054\113\055\116\056\117" +
    "\057\115\060\112\061\114\062\125\063\121\064\123\077" +
    "\u010f\001\002\000\052\003\uffcd\005\uffcd\006\uffcd\007\uffcd" +
    "\010\uffcd\011\uffcd\012\uffcd\013\uffcd\015\uffcd\016\uffcd\017" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\027\uffcd\046\uffcd\072\uffcd\001\002\000\052\003\uffcc\005" +
    "\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc" +
    "\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\027\uffcc\046\uffcc\072\uffcc\001\002" +
    "\000\004\002\uffff\001\002\000\052\003\uffd0\005\uffd0\006" +
    "\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\015\uffd0" +
    "\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\027\uffd0\046\uffd0\072\uffd0\001\002\000\052" +
    "\003\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012" +
    "\uffd1\013\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\025\uffd1\027\uffd1\046\uffd1\072" +
    "\uffd1\001\002\000\030\030\066\031\064\042\071\043\076" +
    "\044\100\045\067\046\103\052\102\065\101\067\070\101" +
    "\072\001\002\000\034\051\122\052\124\053\120\054\113" +
    "\055\116\056\117\057\115\060\112\061\114\062\125\063" +
    "\121\064\123\077\uffc0\001\002\000\052\003\uffd2\005\uffd2" +
    "\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\027\uffd2\046\uffd2\072\uffd2\001\002\000" +
    "\004\023\u0118\001\002\000\004\067\u0119\001\002\000\030" +
    "\030\066\031\064\042\071\043\076\044\100\045\067\046" +
    "\103\052\102\065\101\067\070\101\072\001\002\000\034" +
    "\051\122\052\124\053\120\054\113\055\116\056\117\057" +
    "\115\060\112\061\114\062\125\063\121\064\123\070\u011b" +
    "\001\002\000\004\077\uffa3\001\002\000\006\006\u011f\046" +
    "\u0120\001\002\000\004\070\u012a\001\002\000\004\077\u0125" +
    "\001\002\000\004\046\u0122\001\002\000\004\075\u0114\001" +
    "\002\000\004\077\uffa7\001\002\000\004\075\u0123\001\002" +
    "\000\004\044\u0124\001\002\000\004\077\uffa8\001\002\000" +
    "\030\030\066\031\064\042\071\043\076\044\100\045\067" +
    "\046\103\052\102\065\101\067\070\101\072\001\002\000" +
    "\034\051\122\052\124\053\120\054\113\055\116\056\117" +
    "\057\115\060\112\061\114\062\125\063\121\064\123\077" +
    "\u0127\001\002\000\004\046\u0129\001\002\000\004\070\uffa9" +
    "\001\002\000\006\047\104\050\106\001\002\000\004\071" +
    "\151\001\002\000\052\003\uffaa\005\uffaa\006\uffaa\007\uffaa" +
    "\010\uffaa\011\uffaa\012\uffaa\013\uffaa\015\uffaa\016\uffaa\017" +
    "\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa" +
    "\027\uffaa\046\uffaa\072\uffaa\001\002\000\032\030\066\031" +
    "\064\042\071\043\076\044\100\045\067\046\103\052\102" +
    "\065\101\067\070\070\u012d\101\072\001\002\000\004\077" +
    "\u0131\001\002\000\034\051\122\052\124\053\120\054\113" +
    "\055\116\056\117\057\115\060\112\061\114\062\125\063" +
    "\121\064\123\070\u012f\001\002\000\004\077\u0130\001\002" +
    "\000\052\003\uff83\005\uff83\006\uff83\007\uff83\010\uff83\011" +
    "\uff83\012\uff83\013\uff83\015\uff83\016\uff83\017\uff83\020\uff83" +
    "\021\uff83\022\uff83\023\uff83\024\uff83\025\uff83\027\uff83\046" +
    "\uff83\072\uff83\001\002\000\052\003\uff82\005\uff82\006\uff82" +
    "\007\uff82\010\uff82\011\uff82\012\uff82\013\uff82\015\uff82\016" +
    "\uff82\017\uff82\020\uff82\021\uff82\022\uff82\023\uff82\024\uff82" +
    "\025\uff82\027\uff82\046\uff82\072\uff82\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012f\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\004\030\005\031\006\026\007\045\010\041\011\047" +
    "\016\025\017\055\020\027\025\022\030\037\031\023\032" +
    "\056\034\052\040\034\041\015\042\051\053\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\u0116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\005\153\006\026\007\045\010\041\011" +
    "\047\016\025\017\055\020\027\025\022\030\037\031\023" +
    "\032\056\034\052\040\034\041\015\042\051\053\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\006\064\012" +
    "\u010d\013\074\014\072\015\061\032\062\047\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\006\064\012\073\013\074\014\072" +
    "\015\061\032\062\047\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\064\012\166\013" +
    "\074\014\072\015\061\032\062\047\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\006\064\012\145\013\074\014" +
    "\072\015\061\032\062\047\076\001\001\000\020\006\064" +
    "\012\144\013\074\014\072\015\061\032\062\047\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\006\064" +
    "\012\110\013\074\014\072\015\061\032\062\033\107\047" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\064\012\140\013" +
    "\074\014\072\015\061\032\062\047\076\001\001\000\020" +
    "\006\064\012\137\013\074\014\072\015\061\032\062\047" +
    "\076\001\001\000\020\006\064\012\136\013\074\014\072" +
    "\015\061\032\062\047\076\001\001\000\020\006\064\012" +
    "\135\013\074\014\072\015\061\032\062\047\076\001\001" +
    "\000\020\006\064\012\134\013\074\014\072\015\061\032" +
    "\062\047\076\001\001\000\020\006\064\012\133\013\074" +
    "\014\072\015\061\032\062\047\076\001\001\000\020\006" +
    "\064\012\132\013\074\014\072\015\061\032\062\047\076" +
    "\001\001\000\020\006\064\012\131\013\074\014\072\015" +
    "\061\032\062\047\076\001\001\000\020\006\064\012\130" +
    "\013\074\014\072\015\061\032\062\047\076\001\001\000" +
    "\020\006\064\012\127\013\074\014\072\015\061\032\062" +
    "\047\076\001\001\000\020\006\064\012\126\013\074\014" +
    "\072\015\061\032\062\047\076\001\001\000\020\006\064" +
    "\012\125\013\074\014\072\015\061\032\062\047\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\006\064\012\143\013\074\014\072\015\061" +
    "\032\062\047\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\147\001\001\000\002" +
    "\001\001\000\046\004\151\005\031\006\026\007\045\010" +
    "\041\011\047\016\025\017\055\020\027\025\022\030\037" +
    "\031\023\032\056\034\052\040\034\041\015\042\051\053" +
    "\043\001\001\000\044\005\153\006\026\007\045\010\041" +
    "\011\047\016\025\017\055\020\027\025\022\030\037\031" +
    "\023\032\056\034\052\040\034\041\015\042\051\053\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\006\064\012" +
    "\110\013\074\014\072\015\061\032\062\033\177\047\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\064\012\202\013\074\014\072\015\061\032\062\047\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\044\212\046\213\001\001\000\002\001\001\000" +
    "\004\046\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\006\064\012\110\013\074\014\072\015" +
    "\061\032\062\033\225\047\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\242\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\006\064\012\110\013\074" +
    "\014\072\015\061\032\062\033\264\047\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\043\274\045\272\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\317" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\006\064\012\110\013\074\014\072\015\061\032" +
    "\062\033\304\047\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\312\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\006\064\012" +
    "\110\013\074\014\072\015\061\032\062\033\325\047\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\332\001\001\000\002" +
    "\001\001\000\006\036\336\037\337\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\350\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\344\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\353\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\006\064\012\361\013\074" +
    "\014\072\015\061\032\062\047\076\001\001\000\002\001" +
    "\001\000\004\051\363\001\001\000\002\001\001\000\006" +
    "\017\365\051\366\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\006\064\012\370\013\074\014\072\015\061" +
    "\032\062\047\076\001\001\000\002\001\001\000\004\052" +
    "\372\001\001\000\002\001\001\000\012\021\u0100\022\375" +
    "\023\376\024\377\001\001\000\002\001\001\000\006\023" +
    "\u010a\024\u0109\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\006\064\012\u0105\013\074\014" +
    "\072\015\061\032\062\047\076\001\001\000\002\001\001" +
    "\000\046\004\u0104\005\031\006\026\007\045\010\041\011" +
    "\047\016\025\017\055\020\027\025\022\030\037\031\023" +
    "\032\056\034\052\040\034\041\015\042\051\053\043\001" +
    "\001\000\044\005\153\006\026\007\045\010\041\011\047" +
    "\016\025\017\055\020\027\025\022\030\037\031\023\032" +
    "\056\034\052\040\034\041\015\042\051\053\043\001\001" +
    "\000\002\001\001\000\046\004\u0107\005\031\006\026\007" +
    "\045\010\041\011\047\016\025\017\055\020\027\025\022" +
    "\030\037\031\023\032\056\034\052\040\034\041\015\042" +
    "\051\053\043\001\001\000\044\005\153\006\026\007\045" +
    "\010\041\011\047\016\025\017\055\020\027\025\022\030" +
    "\037\031\023\032\056\034\052\040\034\041\015\042\051" +
    "\053\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\006\064" +
    "\012\u0114\013\074\014\072\015\061\032\062\047\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\006\064\012\u0119\013\074\014" +
    "\072\015\061\032\062\047\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\u0120\026\u011c\027\u011d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\006\064\012\u0125" +
    "\013\074\014\072\015\061\032\062\047\076\001\001\000" +
    "\002\001\001\000\004\006\u0127\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\u012a\001\001\000\002\001" +
    "\001\000\020\006\064\012\u012d\013\074\014\072\015\061" +
    "\032\062\047\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$STPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$STPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$STPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<Instruction> inst;
    public ArrayList<Graph> graphs = new ArrayList<>();
    public ArrayList<SynError> errors = new ArrayList<>();
    public void syntax_error(Symbol s){
        errors.add(new SynError(s.left, s.right, s.value, SYM.terminalNames[s.sym]));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        errors.add(new SynError("Syntax error, impossible to recover"));
    }
    public ArrayList<SynError> getErrors() {
        return errors;
        //return errors.stream().map(Object::toString).collect(Collectors.joining("\n-> "));
    }
    public boolean isSuccessExecution() {
        return !(errors.size() > 0);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$STPParser$actions {
  private final STPParser parser;

  /** Constructor */
  CUP$STPParser$actions(STPParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$STPParser$do_action_part00000000(
    int                        CUP$STPParser$act_num,
    java_cup.runtime.lr_parser CUP$STPParser$parser,
    java.util.Stack            CUP$STPParser$stack,
    int                        CUP$STPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$STPParser$result;

      /* select the action based on the action number */
      switch (CUP$STPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Init EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = start_val;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$STPParser$parser.done_parsing();
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Init ::= Main 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Main m = (Main)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		ArrayList<Instruction> arr= new ArrayList<Instruction>(); arr.add(m); inst=arr;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Init",0, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Main ::= KW_VOID KW_MAIN TK_LPAR TK_RPAR TK_LBRC Instructions TK_RBRC 
            {
              Main RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-5)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		ArrayList<Instruction> i = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new Main(mleft, mright, i);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Main",1, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-6)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Main ::= KW_VOID KW_MAIN TK_LPAR TK_RPAR TK_LBRC TK_RBRC 
            {
              Main RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).value;
		RESULT = new Main(mleft, mright, null);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Main",1, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-5)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Instructions ::= Instructions Instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		ArrayList<Instruction> s = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = s; RESULT.add(i);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instructions",2, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Instructions ::= Instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(i));
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instructions",2, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GraphFuncs ::= BarGraph 
            {
              Instruction RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Bars b = (Bars)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = b; graphs.add(b);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("GraphFuncs",30, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GraphFuncs ::= PieGraph 
            {
              Instruction RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Pie b = (Pie)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = b; graphs.add(b);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("GraphFuncs",30, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PieGraph ::= KW_VOID KW_PIEGRPH TK_LPAR TK_RPAR TK_LBRC PieGraphInsts TK_RBRC 
            {
              Pie RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		ArrayList<Instruction> i = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new Pie(pleft, pright, i);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("PieGraph",31, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-6)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BarGraph ::= KW_VOID KW_BARGRPH TK_LPAR TK_RPAR TK_LBRC BarGraphInsts TK_RBRC 
            {
              Bars RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		ArrayList<Instruction> i = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new Bars(bleft, bright, i);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("BarGraph",32, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-6)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PieGraphInsts ::= PieGraphInsts PieGraphInst 
            {
              ArrayList<Instruction> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		ArrayList<Instruction> s = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = s; RESULT.add(i);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("PieGraphInsts",33, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PieGraphInsts ::= PieGraphInst 
            {
              ArrayList<Instruction> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(i));
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("PieGraphInsts",33, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PieGraphInst ::= KW_STRING KW_TITLE TK_EQ TK_ID TK_SCOLON 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new DeclareId(tleft, tright, t, new AccesId(vleft, vright, v));
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("PieGraphInst",35, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PieGraphInst ::= KW_STRING KW_TITLE TK_EQ TK_STRING TK_SCOLON 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new DeclareId(tleft, tright, t, new Primitive(vleft, vright, v, PrimitiveType.STRING));
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("PieGraphInst",35, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PieGraphInst ::= KW_STRING KW_TITLE TK_EQ CallJson TK_SCOLON 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		CallJson v = (CallJson)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new DeclareId(tleft, tright, t, v);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("PieGraphInst",35, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PieGraphInst ::= KW_STRING TK_LBRK TK_RBRK KW_XAXIS TK_EQ TK_LBRC ArgsList TK_RBRC TK_SCOLON 
            {
              Instruction RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-5)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		ArrayList<Expression> a = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		RESULT = new DeclareArr(xleft, xright, x, a);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("PieGraphInst",35, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-8)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PieGraphInst ::= KW_DOUBLE TK_LBRK TK_RBRK KW_VALUES TK_EQ TK_LBRC ArgsList TK_RBRC TK_SCOLON 
            {
              Instruction RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		ArrayList<Expression> a = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		RESULT = new DeclareArr(vleft, vright, v, a);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("PieGraphInst",35, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-8)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BarGraphInsts ::= BarGraphInsts BarGraphInst 
            {
              ArrayList<Instruction> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		ArrayList<Instruction> s = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = s; RESULT.add(i);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("BarGraphInsts",34, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BarGraphInsts ::= BarGraphInst 
            {
              ArrayList<Instruction> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(i));
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("BarGraphInsts",34, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BarGraphInst ::= KW_STRING KW_TITLE TK_EQ TK_ID TK_SCOLON 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new DeclareId(tleft, tright, t, new AccesId(idleft, idright, id));
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("BarGraphInst",36, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BarGraphInst ::= KW_STRING KW_TITLE TK_EQ TK_STRING TK_SCOLON 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new DeclareId(tleft, tright, t, new Primitive(sleft, sright, s, PrimitiveType.STRING));
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("BarGraphInst",36, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BarGraphInst ::= KW_STRING KW_TITLE TK_EQ CallJson TK_SCOLON 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		CallJson v = (CallJson)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new DeclareId(tleft, tright, t, v);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("BarGraphInst",36, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BarGraphInst ::= KW_STRING KW_TITLEX TK_EQ TK_STRING TK_SCOLON 
            {
              Instruction RESULT =null;
		int txleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).right;
		String tx = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new DeclareId(txleft, txright, tx, new Primitive(sleft, sright, s, PrimitiveType.STRING));
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("BarGraphInst",36, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BarGraphInst ::= KW_STRING KW_TITLEX TK_EQ TK_ID TK_SCOLON 
            {
              Instruction RESULT =null;
		int txleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).right;
		String tx = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new DeclareId(txleft, txright, tx, new AccesId(idleft, idright, id));
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("BarGraphInst",36, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BarGraphInst ::= KW_STRING KW_TITLEX TK_EQ CallJson TK_SCOLON 
            {
              Instruction RESULT =null;
		int txleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).right;
		String tx = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		CallJson v = (CallJson)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new DeclareId(txleft, txright, tx, v);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("BarGraphInst",36, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BarGraphInst ::= KW_STRING KW_TITLEY TK_EQ TK_STRING TK_SCOLON 
            {
              Instruction RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new DeclareId(tyleft, tyright, ty, new Primitive(sleft, sright, s, PrimitiveType.STRING));
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("BarGraphInst",36, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BarGraphInst ::= KW_STRING KW_TITLEY TK_EQ TK_ID TK_SCOLON 
            {
              Instruction RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new DeclareId(tyleft, tyright, ty, new AccesId(idleft, idright, id));
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("BarGraphInst",36, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BarGraphInst ::= KW_STRING KW_TITLEY TK_EQ CallJson TK_SCOLON 
            {
              Instruction RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		CallJson v = (CallJson)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new DeclareId(tyleft, tyright, ty, v);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("BarGraphInst",36, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BarGraphInst ::= KW_STRING TK_LBRK TK_RBRK KW_XAXIS TK_EQ TK_LBRC ArgsList TK_RBRC TK_SCOLON 
            {
              Instruction RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-5)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		ArrayList<Expression> a = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		RESULT = new DeclareArr(xleft, xright, x, a);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("BarGraphInst",36, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-8)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BarGraphInst ::= KW_DOUBLE TK_LBRK TK_RBRK KW_VALUES TK_EQ TK_LBRC ArgsList TK_RBRC TK_SCOLON 
            {
              Instruction RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		ArrayList<Expression> a = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		RESULT = new DeclareArr(vleft, vright, v, a);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("BarGraphInst",36, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-8)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // GlobalVarsFunc ::= KW_VOID KW_DEFGLB TK_LPAR TK_RPAR GlobalVarsEnv 
            {
              Global RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).value;
		int genvleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int genvright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		ArrayList<Instruction> genv = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new Global(gleft, gright, genv);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("GlobalVarsFunc",26, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // GlobalVarsEnv ::= TK_LBRC GlobalVarsInsts TK_RBRC 
            {
              ArrayList<Instruction> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		ArrayList<Instruction> i = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = i;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("GlobalVarsEnv",27, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // GlobalVarsEnv ::= TK_LBRC TK_RBRC 
            {
              ArrayList<Instruction> RESULT =null;
		RESULT = new ArrayList<Instruction>();
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("GlobalVarsEnv",27, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // GlobalVarsInsts ::= GlobalVarsInsts GlobalVarsInst 
            {
              ArrayList<Instruction> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		ArrayList<Instruction> s = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = s; RESULT.add(i);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("GlobalVarsInsts",28, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // GlobalVarsInsts ::= GlobalVarsInst 
            {
              ArrayList<Instruction> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(i));
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("GlobalVarsInsts",28, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // GlobalVarsInst ::= KW_STRING TK_ID TK_EQ TK_STRING TK_SCOLON 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new DeclareId(idleft, idright, id, new Primitive(strleft, strright, str, PrimitiveType.STRING));
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("GlobalVarsInst",29, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // GlobalVarsInst ::= KW_DOUBLE TK_ID TK_EQ TK_DOUBLE TK_SCOLON 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).value;
		int dbleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String db = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new DeclareId(idleft, idright, id, new Primitive(dbleft, dbright, db, PrimitiveType.DOUBLE));
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("GlobalVarsInst",29, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // GlobalVarsInst ::= KW_STRING TK_ID TK_EQ CallJson TK_SCOLON 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).value;
		int jsleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int jsright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		CallJson js = (CallJson)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new DeclareId(idleft, idright, id, js);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("GlobalVarsInst",29, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // GlobalVarsInst ::= KW_DOUBLE TK_ID TK_EQ CallJson TK_SCOLON 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).value;
		int jsleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int jsright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		CallJson js = (CallJson)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new DeclareId(idleft, idright, id, js);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("GlobalVarsInst",29, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Instruction ::= DeclareVar TK_SCOLON 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		Sentence i = (Sentence)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT=i;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Instruction ::= DeclareArr TK_SCOLON 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		Sentence i = (Sentence)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT=i;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Instruction ::= CallFunc TK_SCOLON 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT=i;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Instruction ::= IfStatement 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT=i;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Instruction ::= SwitchStatement 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT=i;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Instruction ::= ForLoop 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT=i;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Instruction ::= WhileLoop 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		While i = (While)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT=i;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Instruction ::= Print 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Print i = (Print)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT=i;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Instruction ::= DoWhileLoop TK_SCOLON 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		DoWhile i = (DoWhile)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT=i;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Instruction ::= ReasignVar TK_SCOLON 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		ReasignId i = (ReasignId)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT=i;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Instruction ::= IncreDecre TK_SCOLON 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT=i;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Instruction ::= KW_BREAK TK_SCOLON 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT= new ControlRW(ileft, iright, i);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Instruction ::= KW_RETURN TK_SCOLON 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT= new Return(ileft, iright, null);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Instruction ::= KW_RETURN Expresion TK_SCOLON 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT= new Return(ileft, iright, exp);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Instruction ::= KW_CONTINUE TK_SCOLON 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT= new ControlRW(ileft, iright, i);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Instruction ::= GlobalVarsFunc 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Global i = (Global)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT=i; graphs.add(i);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Instruction ::= GraphFuncs 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT=i;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Instruction ::= error 
            {
              Instruction RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DeclareVar ::= DataType TK_ID TK_EQ Expresion 
            {
              Sentence RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new DeclareId(idleft, idright, id, exp);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DeclareVar",5, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DeclareVar ::= DataType TK_ID 
            {
              Sentence RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new DeclareId(idleft, idright, id, null);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DeclareVar",5, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DeclareArr ::= DataType TK_LBRK TK_RBRK TK_ID TK_EQ TK_LBRC ArgsList TK_RBRC 
            {
              Sentence RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		ArrayList<Expression> arg = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new DeclareArr(idleft, idright, id, arg);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DeclareArr",6, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-7)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DataType ::= KW_INT 
            {
              PrimitiveType RESULT =null;
		RESULT = PrimitiveType.INT;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DataType",7, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DataType ::= KW_BOOL 
            {
              PrimitiveType RESULT =null;
		RESULT = PrimitiveType.BOOLEAN;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DataType",7, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DataType ::= KW_DOUBLE 
            {
              PrimitiveType RESULT =null;
		RESULT = PrimitiveType.DOUBLE;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DataType",7, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DataType ::= KW_CHAR 
            {
              PrimitiveType RESULT =null;
		RESULT = PrimitiveType.CHAR;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DataType",7, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DataType ::= KW_STRING 
            {
              PrimitiveType RESULT =null;
		RESULT = PrimitiveType.STRING;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DataType",7, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ReasignVar ::= TK_ID TK_EQ Expresion 
            {
              ReasignId RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new ReasignId(idleft, idright, id, exp);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ReasignVar",12, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CallFunc ::= TK_ID TK_LPAR ArgsList TK_RPAR 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		ArrayList<Expression> args = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new CallFunc(idleft, idright, id, args);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("CallFunc",24, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CallFunc ::= TK_ID TK_LPAR TK_RPAR 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		RESULT = new CallFunc(idleft, idright, id, null);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("CallFunc",24, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ArgsList ::= ArgsList TK_COMA Expresion 
            {
              ArrayList<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		ArrayList<Expression> l = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT=l; RESULT.add(e);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ArgsList",25, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ArgsList ::= Expresion 
            {
              ArrayList<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT= new ArrayList<>(Arrays.asList(e));
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ArgsList",25, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IfStatement ::= KW_IF TK_LPAR Expresion TK_RPAR LocalEnv KW_ELSE IfStatement 
            {
              Instruction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-6)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).value;
		int envleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int envright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		CodeBlock env = (CodeBlock)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Instruction f2 = (Instruction)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new If(fleft, fright, exp, env, f2);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("IfStatement",13, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-6)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IfStatement ::= KW_IF TK_LPAR Expresion TK_RPAR LocalEnv KW_ELSE LocalEnv 
            {
              Instruction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-6)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).value;
		int envleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int envright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		CodeBlock env = (CodeBlock)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int env2left = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int env2right = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		CodeBlock env2 = (CodeBlock)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new If(fleft, fright, exp, env, env2);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("IfStatement",13, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-6)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IfStatement ::= KW_IF TK_LPAR Expresion TK_RPAR LocalEnv 
            {
              Instruction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int envleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int envright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		CodeBlock env = (CodeBlock)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new If(fleft, fright, exp, env, null);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("IfStatement",13, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LocalEnv ::= TK_LBRC Instructions TK_RBRC 
            {
              CodeBlock RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		ArrayList<Instruction> i = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new CodeBlock(lleft, lright, i);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("LocalEnv",39, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LocalEnv ::= TK_LBRC TK_RBRC 
            {
              CodeBlock RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new CodeBlock(lleft, lright, new ArrayList<>());
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("LocalEnv",39, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SwitchStatement ::= KW_SWITCH TK_LPAR Expresion TK_RPAR LocalEnvs 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int envleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int envright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Object[] env = (Object[])((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new Switch(sleft, sright, exp, (ArrayList<Case>) env[0], (CodeBlock)env[1]);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("SwitchStatement",14, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LocalEnvs ::= TK_LBRC CaseDeft TK_RBRC 
            {
              Object[] RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		Object[] cd = (Object[])((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = cd;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("LocalEnvs",40, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LocalEnvs ::= TK_LBRC TK_RBRC 
            {
              Object[] RESULT =null;
		RESULT = new Object[]{null, null};
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("LocalEnvs",40, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CaseDeft ::= Cases Default 
            {
              Object[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		ArrayList<Case> c = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		CodeBlock d = (CodeBlock)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new Object[] {c, d};
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("CaseDeft",15, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CaseDeft ::= Cases 
            {
              Object[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		ArrayList<Case> c = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new Object[] {c, null};
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("CaseDeft",15, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CaseDeft ::= Default 
            {
              Object[] RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		CodeBlock d = (CodeBlock)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new Object[] {null, d};
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("CaseDeft",15, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Cases ::= Cases Case 
            {
              ArrayList<Case> RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		ArrayList<Case> cs = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Case c = (Case)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = cs; RESULT.add(c);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Cases",16, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Cases ::= Case 
            {
              ArrayList<Case> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Case c = (Case)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(c));
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Cases",16, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Case ::= KW_CASE Expresion TK_COLON Instructions 
            {
              Case RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		ArrayList<Instruction> i = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new Case(cleft, cright, exp, new CodeBlock(ileft, iright, i));
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Case",17, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Case ::= KW_CASE Expresion TK_COLON 
            {
              Case RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new Case(cleft, cright, exp, new CodeBlock(cleft, cright, new ArrayList<>()));
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Case",17, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Default ::= KW_DEFAULT TK_COLON Instructions 
            {
              CodeBlock RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		ArrayList<Instruction> i = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new CodeBlock(dleft, dright, i);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Default",18, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Default ::= KW_DEFAULT TK_COLON 
            {
              CodeBlock RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new CodeBlock(dleft, dright, new ArrayList<>());
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Default",18, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ForLoop ::= KW_FOR TK_LPAR ForArgs TK_RPAR LocalEnv 
            {
              Instruction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		Object[] fa = (Object[])((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int envleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int envright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		CodeBlock env = (CodeBlock)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new For(fleft, fright, (Sentence)fa[0],(Expression) fa[1], (IncDec) fa[2],env);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ForLoop",19, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ForArgs ::= ForInitArg TK_SCOLON Expresion TK_SCOLON IncreDecre 
            {
              Object[] RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).left;
		int firight = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).right;
		Sentence fi = (Sentence)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int incright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Expression inc = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new Object[] {fi, exp, inc};
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ForArgs",20, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ForInitArg ::= KW_INT TK_ID TK_EQ TK_INT 
            {
              Sentence RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new DeclareId(idleft, idright, id,new Primitive(ileft, iright, i, PrimitiveType.INT));
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ForInitArg",21, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ForInitArg ::= ReasignVar 
            {
              Sentence RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		ReasignId r = (ReasignId)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = r;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ForInitArg",21, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // IncreDecre ::= TK_ID TK_INC 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new IncDec(idleft, idright, "++", id);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("IncreDecre",4, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // IncreDecre ::= TK_ID TK_DEC 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new IncDec(idleft, idright, "--", id);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("IncreDecre",4, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // WhileLoop ::= KW_WHILE TK_LPAR Expresion TK_RPAR LocalEnv 
            {
              While RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int envleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int envright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		CodeBlock env = (CodeBlock)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new While(wleft, wright, exp, env);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("WhileLoop",22, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DoWhileLoop ::= KW_DO LocalEnv KW_WHILE TK_LPAR Expresion TK_RPAR 
            {
              DoWhile RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-5)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-5)).value;
		int envleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).left;
		int envright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).right;
		CodeBlock env = (CodeBlock)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new DoWhile(dleft, dright, env, exp);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DoWhileLoop",23, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-5)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CallJson ::= TK_DOLL TK_LBRC KW_NVAL TK_COMA JsonArg TK_COMA JsonArg TK_RBRC 
            {
              CallJson RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-7)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		Expression k = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new CallJson(dleft, dright, f, k);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("CallJson",37, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-7)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // JsonArg ::= TK_ID 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new AccesId(idleft, idright, id);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("JsonArg",38, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // JsonArg ::= TK_STRING 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new Primitive(sleft, sright, s, PrimitiveType.STRING);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("JsonArg",38, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expresion ::= Math 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = e;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expresion ::= Relation 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = e;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expresion ::= Logic 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = e;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expresion ::= CallFunc 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = e;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expresion ::= CallJson 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		CallJson e = (CallJson)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = e;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Expresion ::= IncreDecre 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = e;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Expresion ::= TK_ID 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new AccesId(eleft, eright, e);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Expresion ::= TK_STRING 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new Primitive(eleft, eright, e, PrimitiveType.STRING);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Expresion ::= TK_CHAR 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new Primitive(eleft, eright, e, PrimitiveType.CHAR);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Expresion ::= TK_INT 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new Primitive(eleft, eright, e, PrimitiveType.INT);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Expresion ::= TK_DOUBLE 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new Primitive(eleft, eright, e, PrimitiveType.DOUBLE);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Expresion ::= KW_TRUE 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new Primitive(eleft, eright, e, PrimitiveType.BOOLEAN);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Expresion ::= KW_FALSE 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new Primitive(eleft, eright, e, PrimitiveType.BOOLEAN);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Expresion ::= TK_LPAR Expresion TK_RPAR 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = e;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Math ::= Expresion TK_PLUS Expresion 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new gt.edu.usac.ingenieria.lang.statpy.expression.Math(e1left, e1right, e1, s, e2);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Math",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Math ::= Expresion TK_MINUS Expresion 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new gt.edu.usac.ingenieria.lang.statpy.expression.Math(e1left, e1right, e1, s, e2);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Math",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Math ::= Expresion TK_MULT Expresion 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new gt.edu.usac.ingenieria.lang.statpy.expression.Math(e1left, e1right, e1, s, e2);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Math",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Math ::= Expresion TK_DIV Expresion 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new gt.edu.usac.ingenieria.lang.statpy.expression.Math(e1left, e1right, e1, s, e2);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Math",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Math ::= TK_MINUS Expresion 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new gt.edu.usac.ingenieria.lang.statpy.expression.Math(e1left, e1right, null, s, e1);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Math",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Relation ::= Expresion TK_GEQ Expresion 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new Relational(e1left, e1right, e1, s, e2);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Relation",10, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Relation ::= Expresion TK_LEQ Expresion 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new Relational(e1left, e1right, e1, s, e2);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Relation",10, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Relation ::= Expresion TK_EQEQ Expresion 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new Relational(e1left, e1right, e1, s, e2);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Relation",10, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Relation ::= Expresion TK_NOTEQ Expresion 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new Relational(e1left, e1right, e1, s, e2);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Relation",10, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Relation ::= Expresion TK_GREATER Expresion 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new Relational(e1left, e1right, e1, s, e2);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Relation",10, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Relation ::= Expresion TK_LESS Expresion 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new Relational(e1left, e1right, e1, s, e2);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Relation",10, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Logic ::= Expresion TK_AND Expresion 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new Logic(e1left, e1right, e1, s, e2);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Logic",11, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Logic ::= Expresion TK_OR Expresion 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new Logic(e1left, e1right, e1, s, e2);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Logic",11, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Logic ::= TK_NOT Expresion 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new Logic(eleft, eright, null, s, e);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Logic",11, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Print ::= KW_PRINT TK_LPAR Expresion TK_RPAR TK_SCOLON 
            {
              Print RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		RESULT= new Print(pleft, pright, exp);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Print",41, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Print ::= KW_PRINT TK_LPAR TK_RPAR TK_SCOLON 
            {
              Print RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).value;
		RESULT= new Print(pleft, pright, null);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Print",41, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$STPParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$STPParser$do_action(
    int                        CUP$STPParser$act_num,
    java_cup.runtime.lr_parser CUP$STPParser$parser,
    java.util.Stack            CUP$STPParser$stack,
    int                        CUP$STPParser$top)
    throws java.lang.Exception
    {
              return CUP$STPParser$do_action_part00000000(
                               CUP$STPParser$act_num,
                               CUP$STPParser$parser,
                               CUP$STPParser$stack,
                               CUP$STPParser$top);
    }
}

}
