
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.usac.ingenieria.analyzer.statpy;

import java.util.stream.Collectors;
import java_cup.runtime.*;
import java.util.Arrays;
import java.util.ArrayList;
import gt.edu.usac.ingenieria.analyzer.errors.ErrorStpS;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class STPParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SYM.class;
}

  /** Default constructor. */
  @Deprecated
  public STPParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public STPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public STPParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\007\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\003" +
    "\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\015\000\006\030\007\051\005\001\002\000\010\002" +
    "\000\033\013\035\015\001\002\000\006\030\007\051\005" +
    "\001\002\000\012\002\ufffc\033\ufffc\035\ufffc\052\ufffc\001" +
    "\002\000\012\002\ufffb\033\ufffb\035\ufffb\052\ufffb\001\002" +
    "\000\004\002\011\001\002\000\004\002\001\001\002\000" +
    "\010\033\013\035\015\052\014\001\002\000\006\030\007" +
    "\051\005\001\002\000\012\002\ufffd\033\ufffd\035\ufffd\052" +
    "\ufffd\001\002\000\006\030\007\051\005\001\002\000\012" +
    "\002\ufffe\033\ufffe\035\ufffe\052\ufffe\001\002\000\012\002" +
    "\uffff\033\uffff\035\015\052\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\015\000\010\002\007\003\003\004\005\001\001\000" +
    "\002\001\001\000\006\003\011\004\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\016\004\005\001\001" +
    "\000\002\001\001\000\006\003\015\004\005\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$STPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$STPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$STPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ArrayList<ErrorStpS> errors = new ArrayList<>();
    public void syntax_error(Symbol s){
        errors.add(new ErrorStpS(s.left, s.right, s.value, SYM.terminalNames[s.sym]));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        errors.add(new ErrorStpS("Syntax error, impossible to recover"));
    }
    public String getErrors() {
        return errors.stream().map(Object::toString).collect(Collectors.joining("\n-> "));
    }
    public boolean isSuccessExecution() {
        return !(errors.size() > 0);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$STPParser$actions {
  private final STPParser parser;

  /** Constructor */
  CUP$STPParser$actions(STPParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$STPParser$do_action_part00000000(
    int                        CUP$STPParser$act_num,
    java_cup.runtime.lr_parser CUP$STPParser$parser,
    java.util.Stack            CUP$STPParser$stack,
    int                        CUP$STPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$STPParser$result;

      /* select the action based on the action number */
      switch (CUP$STPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Init EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = start_val;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$STPParser$parser.done_parsing();
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Init ::= Instructions 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Init",0, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Instructions ::= Instructions TK_PLUS Instructions 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instructions",1, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Instructions ::= Instructions TK_MULT Instructions 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instructions",1, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Instructions ::= TK_LPAR Instructions TK_RPAR 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instructions",1, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Instructions ::= Instruction 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instructions",1, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Instruction ::= TK_INT 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$STPParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$STPParser$do_action(
    int                        CUP$STPParser$act_num,
    java_cup.runtime.lr_parser CUP$STPParser$parser,
    java.util.Stack            CUP$STPParser$stack,
    int                        CUP$STPParser$top)
    throws java.lang.Exception
    {
              return CUP$STPParser$do_action_part00000000(
                               CUP$STPParser$act_num,
                               CUP$STPParser$parser,
                               CUP$STPParser$stack,
                               CUP$STPParser$top);
    }
}

}
