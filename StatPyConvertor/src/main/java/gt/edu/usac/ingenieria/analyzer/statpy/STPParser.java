
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.usac.ingenieria.analyzer.statpy;

import java.util.stream.Collectors;
import java_cup.runtime.*;
import java.util.Arrays;
import java.util.ArrayList;
import gt.edu.usac.ingenieria.analyzer.errors.ErrorStpS;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class STPParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SYM.class;
}

  /** Default constructor. */
  @Deprecated
  public STPParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public STPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public STPParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\004\004\000\002\004\003\000\002\005\004" +
    "\000\002\005\004\000\002\005\003\000\002\005\004\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\005" +
    "\000\002\005\004\000\002\005\003\000\002\007\006\000" +
    "\002\007\004\000\002\010\012\000\002\011\005\000\002" +
    "\011\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\017\005" +
    "\000\002\035\007\000\002\033\006\000\002\033\005\000" +
    "\002\034\005\000\002\034\003\000\002\020\011\000\002" +
    "\020\011\000\002\020\007\000\002\040\005\000\002\040" +
    "\004\000\002\021\007\000\002\041\005\000\002\041\004" +
    "\000\002\022\004\000\002\022\003\000\002\022\003\000" +
    "\002\023\004\000\002\023\003\000\002\024\006\000\002" +
    "\024\005\000\002\025\005\000\002\025\004\000\002\026" +
    "\007\000\002\027\007\000\002\031\007\000\002\032\010" +
    "\000\002\030\006\000\002\030\003\000\002\006\004\000" +
    "\002\006\004\000\002\036\012\000\002\037\003\000\002" +
    "\037\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\004" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\004\005\004\001\002\000\004\004\010\001" +
    "\002\000\004\002\007\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\004\055\011\001\002\000" +
    "\004\056\012\001\002\000\004\057\013\001\002\000\042" +
    "\003\041\005\043\006\051\007\046\010\015\011\035\012" +
    "\047\013\023\015\045\020\016\021\040\022\025\023\034" +
    "\024\033\025\037\034\050\001\002\000\050\003\ufffd\005" +
    "\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd" +
    "\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023" +
    "\ufffd\024\ufffd\025\ufffd\034\ufffd\060\ufffd\001\002\000\006" +
    "\034\uffe4\061\uffe4\001\002\000\004\065\300\001\002\000" +
    "\050\003\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6" +
    "\012\ufff6\013\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021" +
    "\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\034\ufff6\060\ufff6" +
    "\001\002\000\004\065\277\001\002\000\004\065\276\001" +
    "\002\000\004\065\275\001\002\000\004\055\266\001\002" +
    "\000\004\065\265\001\002\000\004\057\221\001\002\000" +
    "\050\003\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\013\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021" +
    "\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\034\ufff8\060\ufff8" +
    "\001\002\000\050\003\ufffa\005\ufffa\006\ufffa\007\ufffa\010" +
    "\ufffa\011\ufffa\012\ufffa\013\ufffa\015\ufffa\016\ufffa\017\ufffa" +
    "\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\034" +
    "\ufffa\060\ufffa\001\002\000\004\065\257\001\002\000\050" +
    "\003\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7" +
    "\022\ufff7\023\ufff7\024\ufff7\025\ufff7\034\ufff7\060\ufff7\001" +
    "\002\000\004\065\256\001\002\000\004\065\255\001\002" +
    "\000\004\055\251\001\002\000\006\034\uffe6\061\uffe6\001" +
    "\002\000\050\003\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5" +
    "\011\ufff5\012\ufff5\013\ufff5\015\ufff5\016\ufff5\017\ufff5\020" +
    "\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\034\ufff5" +
    "\060\ufff5\001\002\000\032\026\062\027\060\030\065\031" +
    "\072\032\074\033\063\034\077\053\076\054\075\055\064" +
    "\065\246\067\066\001\002\000\004\055\226\001\002\000" +
    "\050\003\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\013\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021" +
    "\uffed\022\uffed\023\uffed\024\uffed\025\uffed\034\uffed\060\uffed" +
    "\001\002\000\044\003\041\005\043\006\051\007\046\010" +
    "\015\011\035\012\047\013\023\015\045\020\016\021\040" +
    "\022\025\023\034\024\033\025\037\034\050\060\225\001" +
    "\002\000\004\034\215\001\002\000\006\034\200\061\201" +
    "\001\002\000\004\055\153\001\002\000\006\034\uffe5\061" +
    "\uffe5\001\002\000\006\034\uffe3\061\uffe3\001\002\000\012" +
    "\035\052\036\054\055\053\063\055\001\002\000\006\034" +
    "\uffe7\061\uffe7\001\002\000\044\037\uffc5\040\uffc5\041\uffc5" +
    "\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050" +
    "\uffc5\051\uffc5\052\uffc5\056\uffc5\060\uffc5\064\uffc5\065\uffc5" +
    "\066\uffc5\001\002\000\032\026\062\027\060\030\065\031" +
    "\072\032\074\033\063\034\077\053\076\054\075\055\064" +
    "\056\145\067\066\001\002\000\044\037\uffc4\040\uffc4\041" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4" +
    "\050\uffc4\051\uffc4\052\uffc4\056\uffc4\060\uffc4\064\uffc4\065" +
    "\uffc4\066\uffc4\001\002\000\030\026\062\027\060\030\065" +
    "\031\072\032\074\033\063\034\077\053\076\054\075\055" +
    "\064\067\066\001\002\000\044\037\uffbe\040\uffbe\041\uffbe" +
    "\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050" +
    "\uffbe\051\uffbe\052\uffbe\056\uffbe\060\uffbe\064\uffbe\065\uffbe" +
    "\066\uffbe\001\002\000\044\037\uffbd\040\uffbd\041\uffbd\042" +
    "\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd" +
    "\051\uffbd\052\uffbd\056\uffbd\060\uffbd\064\uffbd\065\uffbd\066" +
    "\uffbd\001\002\000\044\037\uffb4\040\uffb4\041\uffb4\042\uffb4" +
    "\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051" +
    "\uffb4\052\uffb4\056\uffb4\060\uffb4\064\uffb4\065\uffb4\066\uffb4" +
    "\001\002\000\044\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb" +
    "\052\uffbb\056\uffbb\060\uffbb\064\uffbb\065\uffbb\066\uffbb\001" +
    "\002\000\044\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052" +
    "\uffb5\056\uffb5\060\uffb5\064\uffb5\065\uffb5\066\uffb5\001\002" +
    "\000\044\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044" +
    "\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6" +
    "\056\uffb6\060\uffb6\064\uffb6\065\uffb6\066\uffb6\001\002\000" +
    "\030\026\062\027\060\030\065\031\072\032\074\033\063" +
    "\034\077\053\076\054\075\055\064\067\066\001\002\000" +
    "\044\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9" +
    "\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\056" +
    "\uffb9\060\uffb9\064\uffb9\065\uffb9\066\uffb9\001\002\000\004" +
    "\057\132\001\002\000\044\037\uffbf\040\uffbf\041\uffbf\042" +
    "\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf" +
    "\051\uffbf\052\uffbf\056\uffbf\060\uffbf\064\uffbf\065\uffbf\066" +
    "\uffbf\001\002\000\034\037\111\040\113\041\106\042\102" +
    "\043\105\044\107\045\104\046\101\047\103\050\114\051" +
    "\110\052\112\065\uffe2\001\002\000\044\037\uffc0\040\uffc0" +
    "\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047" +
    "\uffc0\050\uffc0\051\uffc0\052\uffc0\056\uffc0\060\uffc0\064\uffc0" +
    "\065\uffc0\066\uffc0\001\002\000\044\037\uffb8\040\uffb8\041" +
    "\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8" +
    "\050\uffb8\051\uffb8\052\uffb8\056\uffb8\060\uffb8\064\uffb8\065" +
    "\uffb8\066\uffb8\001\002\000\044\037\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\056\uffbc\060\uffbc\064\uffbc\065\uffbc" +
    "\066\uffbc\001\002\000\044\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7" +
    "\051\uffb7\052\uffb7\056\uffb7\060\uffb7\064\uffb7\065\uffb7\066" +
    "\uffb7\001\002\000\030\026\062\027\060\030\065\031\072" +
    "\032\074\033\063\034\077\053\076\054\075\055\064\067" +
    "\066\001\002\000\030\026\062\027\060\030\065\031\072" +
    "\032\074\033\063\034\077\053\076\054\075\055\064\067" +
    "\066\001\002\000\052\035\052\036\054\037\uffba\040\uffba" +
    "\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047" +
    "\uffba\050\uffba\051\uffba\052\uffba\055\053\056\uffba\060\uffba" +
    "\064\uffba\065\uffba\066\uffba\001\002\000\044\037\111\040" +
    "\113\041\106\042\102\043\105\044\107\045\104\046\101" +
    "\047\103\050\114\051\uffa5\052\uffa5\056\uffa5\060\uffa5\064" +
    "\uffa5\065\uffa5\066\uffa5\001\002\000\030\026\062\027\060" +
    "\030\065\031\072\032\074\033\063\034\077\053\076\054" +
    "\075\055\064\067\066\001\002\000\030\026\062\027\060" +
    "\030\065\031\072\032\074\033\063\034\077\053\076\054" +
    "\075\055\064\067\066\001\002\000\030\026\062\027\060" +
    "\030\065\031\072\032\074\033\063\034\077\053\076\054" +
    "\075\055\064\067\066\001\002\000\030\026\062\027\060" +
    "\030\065\031\072\032\074\033\063\034\077\053\076\054" +
    "\075\055\064\067\066\001\002\000\030\026\062\027\060" +
    "\030\065\031\072\032\074\033\063\034\077\053\076\054" +
    "\075\055\064\067\066\001\002\000\030\026\062\027\060" +
    "\030\065\031\072\032\074\033\063\034\077\053\076\054" +
    "\075\055\064\067\066\001\002\000\030\026\062\027\060" +
    "\030\065\031\072\032\074\033\063\034\077\053\076\054" +
    "\075\055\064\067\066\001\002\000\030\026\062\027\060" +
    "\030\065\031\072\032\074\033\063\034\077\053\076\054" +
    "\075\055\064\067\066\001\002\000\030\026\062\027\060" +
    "\030\065\031\072\032\074\033\063\034\077\053\076\054" +
    "\075\055\064\067\066\001\002\000\030\026\062\027\060" +
    "\030\065\031\072\032\074\033\063\034\077\053\076\054" +
    "\075\055\064\067\066\001\002\000\030\026\062\027\060" +
    "\030\065\031\072\032\074\033\063\034\077\053\076\054" +
    "\075\055\064\067\066\001\002\000\030\026\062\027\060" +
    "\030\065\031\072\032\074\033\063\034\077\053\076\054" +
    "\075\055\064\067\066\001\002\000\044\037\111\040\113" +
    "\041\106\042\102\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047" +
    "\uffa8\050\uffa8\051\uffa8\052\uffa8\056\uffa8\060\uffa8\064\uffa8" +
    "\065\uffa8\066\uffa8\001\002\000\044\037\uffb1\040\uffb1\041" +
    "\106\042\102\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1" +
    "\050\uffb1\051\uffb1\052\uffb1\056\uffb1\060\uffb1\064\uffb1\065" +
    "\uffb1\066\uffb1\001\002\000\044\037\111\040\113\041\106" +
    "\042\102\043\105\044\107\045\104\046\101\047\103\050" +
    "\114\051\110\052\uffa6\056\uffa6\060\uffa6\064\uffa6\065\uffa6" +
    "\066\uffa6\001\002\000\044\037\uffb2\040\uffb2\041\106\042" +
    "\102\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2" +
    "\051\uffb2\052\uffb2\056\uffb2\060\uffb2\064\uffb2\065\uffb2\066" +
    "\uffb2\001\002\000\044\037\111\040\113\041\106\042\102" +
    "\043\105\044\107\045\104\046\101\047\103\050\114\051" +
    "\uffa7\052\uffa7\056\uffa7\060\uffa7\064\uffa7\065\uffa7\066\uffa7" +
    "\001\002\000\044\037\111\040\113\041\106\042\102\043" +
    "\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac" +
    "\052\uffac\056\uffac\060\uffac\064\uffac\065\uffac\066\uffac\001" +
    "\002\000\044\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052" +
    "\uffb0\056\uffb0\060\uffb0\064\uffb0\065\uffb0\066\uffb0\001\002" +
    "\000\044\037\111\040\113\041\106\042\102\043\uffad\044" +
    "\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad" +
    "\056\uffad\060\uffad\064\uffad\065\uffad\066\uffad\001\002\000" +
    "\044\037\111\040\113\041\106\042\102\043\105\044\107" +
    "\045\uffab\046\uffab\047\103\050\114\051\uffab\052\uffab\056" +
    "\uffab\060\uffab\064\uffab\065\uffab\066\uffab\001\002\000\044" +
    "\037\111\040\113\041\106\042\102\043\uffa9\044\uffa9\045" +
    "\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\056\uffa9" +
    "\060\uffa9\064\uffa9\065\uffa9\066\uffa9\001\002\000\044\037" +
    "\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf" +
    "\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\056\uffaf\060" +
    "\uffaf\064\uffaf\065\uffaf\066\uffaf\001\002\000\044\037\111" +
    "\040\113\041\106\042\102\043\105\044\107\045\uffaa\046" +
    "\uffaa\047\103\050\114\051\uffaa\052\uffaa\056\uffaa\060\uffaa" +
    "\064\uffaa\065\uffaa\066\uffaa\001\002\000\044\037\uffae\040" +
    "\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae" +
    "\047\uffae\050\uffae\051\uffae\052\uffae\056\uffae\060\uffae\064" +
    "\uffae\065\uffae\066\uffae\001\002\000\006\030\134\034\135" +
    "\001\002\000\004\064\136\001\002\000\006\060\uffc1\064" +
    "\uffc1\001\002\000\006\060\uffc2\064\uffc2\001\002\000\006" +
    "\030\134\034\135\001\002\000\004\064\140\001\002\000" +
    "\006\030\134\034\135\001\002\000\004\060\142\001\002" +
    "\000\044\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044" +
    "\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3" +
    "\056\uffc3\060\uffc3\064\uffc3\065\uffc3\066\uffc3\001\002\000" +
    "\034\037\111\040\113\041\106\042\102\043\105\044\107" +
    "\045\104\046\101\047\103\050\114\051\110\052\112\056" +
    "\144\001\002\000\044\037\uffb3\040\uffb3\041\uffb3\042\uffb3" +
    "\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051" +
    "\uffb3\052\uffb3\056\uffb3\060\uffb3\064\uffb3\065\uffb3\066\uffb3" +
    "\001\002\000\044\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043" +
    "\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf" +
    "\052\uffdf\056\uffdf\060\uffdf\064\uffdf\065\uffdf\066\uffdf\001" +
    "\002\000\006\056\150\064\151\001\002\000\036\037\111" +
    "\040\113\041\106\042\102\043\105\044\107\045\104\046" +
    "\101\047\103\050\114\051\110\052\112\056\uffdd\064\uffdd" +
    "\001\002\000\044\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043" +
    "\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0" +
    "\052\uffe0\056\uffe0\060\uffe0\064\uffe0\065\uffe0\066\uffe0\001" +
    "\002\000\030\026\062\027\060\030\065\031\072\032\074" +
    "\033\063\034\077\053\076\054\075\055\064\067\066\001" +
    "\002\000\036\037\111\040\113\041\106\042\102\043\105" +
    "\044\107\045\104\046\101\047\103\050\114\051\110\052" +
    "\112\056\uffde\064\uffde\001\002\000\030\026\062\027\060" +
    "\030\065\031\072\032\074\033\063\034\077\053\076\054" +
    "\075\055\064\067\066\001\002\000\034\037\111\040\113" +
    "\041\106\042\102\043\105\044\107\045\104\046\101\047" +
    "\103\050\114\051\110\052\112\056\155\001\002\000\004" +
    "\057\157\001\002\000\050\003\uffd7\005\uffd7\006\uffd7\007" +
    "\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\015\uffd7\016\uffd7" +
    "\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\034\uffd7\060\uffd7\001\002\000\010\016\165\017\166" +
    "\060\160\001\002\000\050\003\uffd5\005\uffd5\006\uffd5\007" +
    "\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\034\uffd5\060\uffd5\001\002\000\010\016\uffd0\017\uffd0" +
    "\060\uffd0\001\002\000\004\060\uffd2\001\002\000\010\016" +
    "\165\017\166\060\uffd3\001\002\000\004\060\175\001\002" +
    "\000\030\026\062\027\060\030\065\031\072\032\074\033" +
    "\063\034\077\053\076\054\075\055\064\067\066\001\002" +
    "\000\004\066\167\001\002\000\044\003\041\005\043\006" +
    "\051\007\046\010\015\011\035\012\047\013\023\015\045" +
    "\020\016\021\040\022\025\023\034\024\033\025\037\034" +
    "\050\060\uffcc\001\002\000\044\003\041\005\043\006\051" +
    "\007\046\010\015\011\035\012\047\013\023\015\045\020" +
    "\016\021\040\022\025\023\034\024\033\025\037\034\050" +
    "\060\uffcd\001\002\000\050\003\ufffe\005\ufffe\006\ufffe\007" +
    "\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\015\ufffe\016\ufffe" +
    "\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025" +
    "\ufffe\034\ufffe\060\ufffe\001\002\000\034\037\111\040\113" +
    "\041\106\042\102\043\105\044\107\045\104\046\101\047" +
    "\103\050\114\051\110\052\112\066\173\001\002\000\050" +
    "\003\041\005\043\006\051\007\046\010\015\011\035\012" +
    "\047\013\023\015\045\016\uffce\017\uffce\020\016\021\040" +
    "\022\025\023\034\024\033\025\037\034\050\060\uffce\001" +
    "\002\000\050\003\041\005\043\006\051\007\046\010\015" +
    "\011\035\012\047\013\023\015\045\016\uffcf\017\uffcf\020" +
    "\016\021\040\022\025\023\034\024\033\025\037\034\050" +
    "\060\uffcf\001\002\000\050\003\uffd6\005\uffd6\006\uffd6\007" +
    "\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\015\uffd6\016\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\034\uffd6\060\uffd6\001\002\000\004\060\uffd4\001\002" +
    "\000\010\016\uffd1\017\uffd1\060\uffd1\001\002\000\006\063" +
    "\213\065\uffeb\001\002\000\004\062\202\001\002\000\004" +
    "\034\203\001\002\000\004\063\204\001\002\000\004\057" +
    "\205\001\002\000\030\026\062\027\060\030\065\031\072" +
    "\032\074\033\063\034\077\053\076\054\075\055\064\067" +
    "\066\001\002\000\036\037\111\040\113\041\106\042\102" +
    "\043\105\044\107\045\104\046\101\047\103\050\114\051" +
    "\110\052\112\060\uffe8\064\uffe8\001\002\000\006\060\210" +
    "\064\211\001\002\000\004\065\uffea\001\002\000\030\026" +
    "\062\027\060\030\065\031\072\032\074\033\063\034\077" +
    "\053\076\054\075\055\064\067\066\001\002\000\036\037" +
    "\111\040\113\041\106\042\102\043\105\044\107\045\104" +
    "\046\101\047\103\050\114\051\110\052\112\060\uffe9\064" +
    "\uffe9\001\002\000\030\026\062\027\060\030\065\031\072" +
    "\032\074\033\063\034\077\053\076\054\075\055\064\067" +
    "\066\001\002\000\034\037\111\040\113\041\106\042\102" +
    "\043\105\044\107\045\104\046\101\047\103\050\114\051" +
    "\110\052\112\065\uffec\001\002\000\004\055\216\001\002" +
    "\000\004\056\217\001\002\000\004\057\221\001\002\000" +
    "\050\003\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1" +
    "\012\uffe1\013\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\034\uffe1\060\uffe1" +
    "\001\002\000\044\003\041\005\043\006\051\007\046\010" +
    "\015\011\035\012\047\013\023\015\045\020\016\021\040" +
    "\022\025\023\034\024\033\025\037\034\050\060\222\001" +
    "\002\000\052\003\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8" +
    "\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017" +
    "\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\034\uffd8\060\uffd8\001\002\000\044\003\041\005\043\006" +
    "\051\007\046\010\015\011\035\012\047\013\023\015\045" +
    "\020\016\021\040\022\025\023\034\024\033\025\037\034" +
    "\050\060\224\001\002\000\052\003\uffd9\005\uffd9\006\uffd9" +
    "\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\034\uffd9\060\uffd9\001\002\000\004\002" +
    "\uffff\001\002\000\006\006\231\034\232\001\002\000\004" +
    "\056\244\001\002\000\004\065\237\001\002\000\004\034" +
    "\234\001\002\000\004\063\055\001\002\000\004\065\uffc6" +
    "\001\002\000\004\063\235\001\002\000\004\032\236\001" +
    "\002\000\004\065\uffc7\001\002\000\030\026\062\027\060" +
    "\030\065\031\072\032\074\033\063\034\077\053\076\054" +
    "\075\055\064\067\066\001\002\000\034\037\111\040\113" +
    "\041\106\042\102\043\105\044\107\045\104\046\101\047" +
    "\103\050\114\051\110\052\112\065\241\001\002\000\004" +
    "\034\243\001\002\000\004\056\uffca\001\002\000\006\035" +
    "\052\036\054\001\002\000\004\057\221\001\002\000\050" +
    "\003\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012" +
    "\uffcb\013\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb" +
    "\022\uffcb\023\uffcb\024\uffcb\025\uffcb\034\uffcb\060\uffcb\001" +
    "\002\000\050\003\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\013\ufff0\015\ufff0\016\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\034\ufff0" +
    "\060\ufff0\001\002\000\034\037\111\040\113\041\106\042" +
    "\102\043\105\044\107\045\104\046\101\047\103\050\114" +
    "\051\110\052\112\065\250\001\002\000\050\003\uffef\005" +
    "\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef" +
    "\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023" +
    "\uffef\024\uffef\025\uffef\034\uffef\060\uffef\001\002\000\030" +
    "\026\062\027\060\030\065\031\072\032\074\033\063\034" +
    "\077\053\076\054\075\055\064\067\066\001\002\000\034" +
    "\037\111\040\113\041\106\042\102\043\105\044\107\045" +
    "\104\046\101\047\103\050\114\051\110\052\112\056\253" +
    "\001\002\000\004\057\221\001\002\000\050\003\uffc9\005" +
    "\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9" +
    "\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\034\uffc9\060\uffc9\001\002\000\050" +
    "\003\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012" +
    "\uffee\013\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee" +
    "\022\uffee\023\uffee\024\uffee\025\uffee\034\uffee\060\uffee\001" +
    "\002\000\050\003\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\015\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\034\ufff4" +
    "\060\ufff4\001\002\000\050\003\ufffb\005\ufffb\006\ufffb\007" +
    "\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025" +
    "\ufffb\034\ufffb\060\ufffb\001\002\000\004\023\261\001\002" +
    "\000\004\055\262\001\002\000\030\026\062\027\060\030" +
    "\065\031\072\032\074\033\063\034\077\053\076\054\075" +
    "\055\064\067\066\001\002\000\034\037\111\040\113\041" +
    "\106\042\102\043\105\044\107\045\104\046\101\047\103" +
    "\050\114\051\110\052\112\056\264\001\002\000\004\065" +
    "\uffc8\001\002\000\050\003\ufffc\005\ufffc\006\ufffc\007\ufffc" +
    "\010\ufffc\011\ufffc\012\ufffc\013\ufffc\015\ufffc\016\ufffc\017" +
    "\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc" +
    "\034\ufffc\060\ufffc\001\002\000\030\026\062\027\060\030" +
    "\065\031\072\032\074\033\063\034\077\053\076\054\075" +
    "\055\064\067\066\001\002\000\034\037\111\040\113\041" +
    "\106\042\102\043\105\044\107\045\104\046\101\047\103" +
    "\050\114\051\110\052\112\056\270\001\002\000\004\057" +
    "\221\001\002\000\052\003\uffda\005\uffda\006\uffda\007\uffda" +
    "\010\uffda\011\uffda\012\uffda\013\uffda\014\272\015\uffda\016" +
    "\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda" +
    "\025\uffda\034\uffda\060\uffda\001\002\000\006\013\023\057" +
    "\221\001\002\000\050\003\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\012\uffdc\013\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\034\uffdc\060\uffdc\001\002\000\050\003\uffdb\005\uffdb\006" +
    "\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\034\uffdb\060\uffdb\001\002\000\050\003\ufff2" +
    "\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2" +
    "\023\ufff2\024\ufff2\025\ufff2\034\ufff2\060\ufff2\001\002\000" +
    "\050\003\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\013\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\034\ufff3\060\ufff3" +
    "\001\002\000\050\003\ufff9\005\ufff9\006\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\013\ufff9\015\ufff9\016\ufff9\017\ufff9" +
    "\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\034" +
    "\ufff9\060\ufff9\001\002\000\050\003\ufff1\005\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\015\ufff1\016" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1" +
    "\025\ufff1\034\ufff1\060\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\004\041\005\013\006\021\007\023\010\027\012\043" +
    "\017\020\020\025\021\030\026\016\031\035\032\031\033" +
    "\017\035\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\257\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\006\060\013\246\014\070" +
    "\015\066\016\055\033\056\036\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\005\170\006\021\007\023" +
    "\010\027\012\043\017\020\020\025\021\030\026\016\031" +
    "\035\032\031\033\017\035\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\006\060\013\146\014\070\015\066\016" +
    "\055\033\056\034\145\036\072\001\001\000\002\001\001" +
    "\000\020\006\060\013\067\014\070\015\066\016\055\033" +
    "\056\036\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\006\060\013\142\014\070\015\066" +
    "\016\055\033\056\036\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\006\060\013\130\014\070\015\066\016\055" +
    "\033\056\036\072\001\001\000\020\006\060\013\077\014" +
    "\070\015\066\016\055\033\056\036\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\060\013\127\014" +
    "\070\015\066\016\055\033\056\036\072\001\001\000\020" +
    "\006\060\013\126\014\070\015\066\016\055\033\056\036" +
    "\072\001\001\000\020\006\060\013\125\014\070\015\066" +
    "\016\055\033\056\036\072\001\001\000\020\006\060\013" +
    "\124\014\070\015\066\016\055\033\056\036\072\001\001" +
    "\000\020\006\060\013\123\014\070\015\066\016\055\033" +
    "\056\036\072\001\001\000\020\006\060\013\122\014\070" +
    "\015\066\016\055\033\056\036\072\001\001\000\020\006" +
    "\060\013\121\014\070\015\066\016\055\033\056\036\072" +
    "\001\001\000\020\006\060\013\120\014\070\015\066\016" +
    "\055\033\056\036\072\001\001\000\020\006\060\013\117" +
    "\014\070\015\066\016\055\033\056\036\072\001\001\000" +
    "\020\006\060\013\116\014\070\015\066\016\055\033\056" +
    "\036\072\001\001\000\020\006\060\013\115\014\070\015" +
    "\066\016\055\033\056\036\072\001\001\000\020\006\060" +
    "\013\114\014\070\015\066\016\055\033\056\036\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\136\001\001\000" +
    "\002\001\001\000\004\037\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\006\060\013\151\014\070\015\066\016" +
    "\055\033\056\036\072\001\001\000\002\001\001\000\020" +
    "\006\060\013\153\014\070\015\066\016\055\033\056\036" +
    "\072\001\001\000\002\001\001\000\004\041\155\001\001" +
    "\000\002\001\001\000\012\022\163\023\162\024\160\025" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\176\025\175\001\001\000\002\001" +
    "\001\000\020\006\060\013\171\014\070\015\066\016\055" +
    "\033\056\036\072\001\001\000\002\001\001\000\036\004" +
    "\167\005\013\006\021\007\023\010\027\012\043\017\020" +
    "\020\025\021\030\026\016\031\035\032\031\033\017\035" +
    "\026\001\001\000\034\005\170\006\021\007\023\010\027" +
    "\012\043\017\020\020\025\021\030\026\016\031\035\032" +
    "\031\033\017\035\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\004\173\005\013\006\021\007\023\010" +
    "\027\012\043\017\020\020\025\021\030\026\016\031\035" +
    "\032\031\033\017\035\026\001\001\000\034\005\170\006" +
    "\021\007\023\010\027\012\043\017\020\020\025\021\030" +
    "\026\016\031\035\032\031\033\017\035\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\006\060\011\206\013\205" +
    "\014\070\015\066\016\055\033\056\036\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\006\060\013\211\014\070\015\066\016\055\033\056\036" +
    "\072\001\001\000\002\001\001\000\020\006\060\013\213" +
    "\014\070\015\066\016\055\033\056\036\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\217\001\001\000\002\001\001\000\036\004\222\005" +
    "\013\006\021\007\023\010\027\012\043\017\020\020\025" +
    "\021\030\026\016\031\035\032\031\033\017\035\026\001" +
    "\001\000\002\001\001\000\034\005\170\006\021\007\023" +
    "\010\027\012\043\017\020\020\025\021\030\026\016\031" +
    "\035\032\031\033\017\035\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\232\027\226\030\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\006\060\013\237" +
    "\014\070\015\066\016\055\033\056\036\072\001\001\000" +
    "\002\001\001\000\004\006\241\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\060\013\251\014\070\015\066\016\055\033" +
    "\056\036\072\001\001\000\002\001\001\000\004\040\253" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\060\013\262\014\070\015\066\016\055\033" +
    "\056\036\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\006\060\013\266\014\070\015" +
    "\066\016\055\033\056\036\072\001\001\000\002\001\001" +
    "\000\004\040\270\001\001\000\002\001\001\000\006\020" +
    "\272\040\273\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$STPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$STPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$STPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ArrayList<ErrorStpS> errors = new ArrayList<>();
    public void syntax_error(Symbol s){
        errors.add(new ErrorStpS(s.left, s.right, s.value, SYM.terminalNames[s.sym]));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        errors.add(new ErrorStpS("Syntax error, impossible to recover"));
    }
    public ArrayList<ErrorStpS> getErrors() {
        return errors;
        //return errors.stream().map(Object::toString).collect(Collectors.joining("\n-> "));
    }
    public boolean isSuccessExecution() {
        return !(errors.size() > 0);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$STPParser$actions {
  private final STPParser parser;

  /** Constructor */
  CUP$STPParser$actions(STPParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$STPParser$do_action_part00000000(
    int                        CUP$STPParser$act_num,
    java_cup.runtime.lr_parser CUP$STPParser$parser,
    java.util.Stack            CUP$STPParser$stack,
    int                        CUP$STPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$STPParser$result;

      /* select the action based on the action number */
      switch (CUP$STPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Init EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = start_val;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$STPParser$parser.done_parsing();
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Init ::= Main 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Init",0, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Main ::= KW_VOID KW_MAIN TK_LPAR TK_RPAR TK_LBRC Instructions TK_RBRC 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Main",1, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-6)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Instructions ::= Instructions Instruction 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instructions",2, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Instructions ::= Instruction 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instructions",2, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Instruction ::= DeclareVar TK_SCOLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Instruction ::= DeclareArr TK_SCOLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Instruction ::= DeclareFunc 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Instruction ::= CallFunc TK_SCOLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Instruction ::= IfStatement 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Instruction ::= SwitchStatement 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Instruction ::= ForLoop 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Instruction ::= WhileLoop 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Instruction ::= DoWhileLoop TK_SCOLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Instruction ::= ReasignVar TK_SCOLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Instruction ::= IncreDecre TK_SCOLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Instruction ::= KW_BREAK TK_SCOLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Instruction ::= KW_RETURN TK_SCOLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Instruction ::= KW_RETURN Expresion TK_SCOLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Instruction ::= KW_CONTINUE TK_SCOLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Instruction ::= error 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DeclareVar ::= DataType TK_ID TK_EQ Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DeclareVar",5, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DeclareVar ::= DataType TK_ID 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DeclareVar",5, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DeclareArr ::= DataType TK_LBRK TK_RBRK TK_ID TK_EQ TK_LBRC ArrArgs TK_RBRC 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DeclareArr",6, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-7)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ArrArgs ::= ArrArgs TK_COMA Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ArrArgs",7, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ArrArgs ::= Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ArrArgs",7, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DataType ::= KW_INT 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DataType",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DataType ::= KW_BOOL 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DataType",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DataType ::= KW_DOUBLE 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DataType",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DataType ::= KW_CHAR 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DataType",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DataType ::= KW_STRING 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DataType",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ReasignVar ::= TK_ID TK_EQ Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ReasignVar",13, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DeclareFunc ::= KW_VOID TK_ID TK_LPAR TK_RPAR LocalEnv 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DeclareFunc",27, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CallFunc ::= TK_ID TK_LPAR ArgsList TK_RPAR 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("CallFunc",25, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CallFunc ::= TK_ID TK_LPAR TK_RPAR 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("CallFunc",25, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ArgsList ::= ArgsList TK_COMA Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ArgsList",26, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ArgsList ::= Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ArgsList",26, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IfStatement ::= KW_IF TK_LPAR Expresion TK_RPAR LocalEnv KW_ELSE IfStatement 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("IfStatement",14, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-6)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IfStatement ::= KW_IF TK_LPAR Expresion TK_RPAR LocalEnv KW_ELSE LocalEnv 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("IfStatement",14, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-6)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IfStatement ::= KW_IF TK_LPAR Expresion TK_RPAR LocalEnv 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("IfStatement",14, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LocalEnv ::= TK_LBRC Instructions TK_RBRC 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("LocalEnv",30, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LocalEnv ::= TK_LBRC TK_RBRC 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("LocalEnv",30, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SwitchStatement ::= KW_SWITCH TK_LPAR Expresion TK_RPAR LocalEnvs 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("SwitchStatement",15, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LocalEnvs ::= TK_LBRC CaseDeft TK_RBRC 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("LocalEnvs",31, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LocalEnvs ::= TK_LBRC TK_RBRC 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("LocalEnvs",31, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CaseDeft ::= Cases Default 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("CaseDeft",16, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CaseDeft ::= Cases 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("CaseDeft",16, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CaseDeft ::= Default 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("CaseDeft",16, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Cases ::= Cases Case 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Cases",17, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Cases ::= Case 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Cases",17, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Case ::= KW_CASE Expresion TK_COLON Instructions 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Case",18, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Case ::= KW_CASE Expresion TK_COLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Case",18, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Default ::= KW_DEFAULT TK_COLON Instructions 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Default",19, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Default ::= KW_DEFAULT TK_COLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Default",19, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ForLoop ::= KW_FOR TK_LPAR ForArgs TK_RPAR LocalEnv 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ForLoop",20, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ForArgs ::= ForInitArg TK_SCOLON Expresion TK_SCOLON IncreDecre 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ForArgs",21, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // WhileLoop ::= KW_WHILE TK_LPAR Expresion TK_RPAR LocalEnv 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("WhileLoop",23, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DoWhileLoop ::= KW_DO LocalEnv KW_WHILE TK_LPAR Expresion TK_RPAR 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DoWhileLoop",24, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-5)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ForInitArg ::= KW_INT TK_ID TK_EQ TK_INT 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ForInitArg",22, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ForInitArg ::= ReasignVar 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ForInitArg",22, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IncreDecre ::= TK_ID TK_INC 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("IncreDecre",4, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IncreDecre ::= TK_ID TK_DEC 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("IncreDecre",4, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CallJson ::= TK_DOLL TK_LBRC JsonArg TK_COMA JsonArg TK_COMA JsonArg TK_RBRC 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("CallJson",28, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-7)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // JsonArg ::= TK_ID 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("JsonArg",29, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // JsonArg ::= TK_STRING 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("JsonArg",29, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expresion ::= Math 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expresion ::= Relation 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expresion ::= Logic 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expresion ::= CallFunc 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expresion ::= CallJson 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expresion ::= IncreDecre 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expresion ::= TK_ID 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expresion ::= TK_STRING 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expresion ::= TK_CHAR 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expresion ::= TK_INT 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expresion ::= TK_DOUBLE 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expresion ::= KW_TRUE 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expresion ::= KW_FALSE 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expresion ::= TK_LPAR Expresion TK_RPAR 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Math ::= Expresion TK_PLUS Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Math",10, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Math ::= Expresion TK_MINUS Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Math",10, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Math ::= Expresion TK_MULT Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Math",10, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Math ::= Expresion TK_DIV Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Math",10, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Math ::= TK_UMINUS Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Math",10, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Relation ::= Expresion TK_GEQ Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Relation",11, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Relation ::= Expresion TK_LEQ Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Relation",11, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Relation ::= Expresion TK_EQEQ Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Relation",11, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Relation ::= Expresion TK_NOTEQ Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Relation",11, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Relation ::= Expresion TK_GREATER Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Relation",11, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Relation ::= Expresion TK_LESS Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Relation",11, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Logic ::= Expresion TK_AND Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Logic",12, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Logic ::= Expresion TK_OR Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Logic",12, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Logic ::= TK_NOT Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Logic",12, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$STPParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$STPParser$do_action(
    int                        CUP$STPParser$act_num,
    java_cup.runtime.lr_parser CUP$STPParser$parser,
    java.util.Stack            CUP$STPParser$stack,
    int                        CUP$STPParser$top)
    throws java.lang.Exception
    {
              return CUP$STPParser$do_action_part00000000(
                               CUP$STPParser$act_num,
                               CUP$STPParser$parser,
                               CUP$STPParser$stack,
                               CUP$STPParser$top);
    }
}

}
