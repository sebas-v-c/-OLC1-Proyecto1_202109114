
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.usac.ingenieria.analyzer.statpy;

import java.util.stream.Collectors;
import java_cup.runtime.*;
import java.util.Arrays;
import java.util.ArrayList;
import gt.edu.usac.ingenieria.analyzer.errors.ErrorStpS;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class STPParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SYM.class;
}

  /** Default constructor. */
  @Deprecated
  public STPParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public STPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public STPParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\004\004\000\002\004\003\000\002\005\004" +
    "\000\002\005\004\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\006\000\002" +
    "\006\004\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\014\005" +
    "\000\002\023\006\000\002\023\005\000\002\024\005\000" +
    "\002\024\003\000\002\015\011\000\002\015\011\000\002" +
    "\015\007\000\002\026\005\000\002\026\004\000\002\016" +
    "\007\000\002\027\005\000\002\027\004\000\002\017\004" +
    "\000\002\017\003\000\002\017\003\000\002\020\004\000" +
    "\002\020\003\000\002\021\006\000\002\021\005\000\002" +
    "\022\005\000\002\022\004\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\004\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\004\005\004\001\002\000\004\004\010\001" +
    "\002\000\004\002\007\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\004\053\011\001\002\000" +
    "\004\054\012\001\002\000\004\055\013\001\002\000\024" +
    "\003\026\006\030\007\034\010\016\011\021\012\025\013" +
    "\033\015\031\034\022\001\002\000\004\063\171\001\002" +
    "\000\026\003\026\006\030\007\034\010\016\011\021\012" +
    "\025\013\033\015\031\034\022\056\170\001\002\000\004" +
    "\034\ufff1\001\002\000\032\003\ufff9\006\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\013\ufff9\015\ufff9\016\ufff9\017\ufff9" +
    "\034\ufff9\056\ufff9\001\002\000\032\003\ufffd\006\ufffd\007" +
    "\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\015\ufffd\016\ufffd" +
    "\017\ufffd\034\ufffd\056\ufffd\001\002\000\004\034\ufff3\001" +
    "\002\000\006\053\061\061\166\001\002\000\032\003\ufffa" +
    "\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\015" +
    "\ufffa\016\ufffa\017\ufffa\034\ufffa\056\ufffa\001\002\000\004" +
    "\034\163\001\002\000\004\034\ufff0\001\002\000\032\003" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7" +
    "\015\ufff7\016\ufff7\017\ufff7\034\ufff7\056\ufff7\001\002\000" +
    "\004\063\162\001\002\000\004\034\ufff4\001\002\000\004" +
    "\053\136\001\002\000\032\003\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\011\ufff8\012\ufff8\013\ufff8\015\ufff8\016\ufff8\017\ufff8" +
    "\034\ufff8\056\ufff8\001\002\000\004\053\035\001\002\000" +
    "\004\034\ufff2\001\002\000\034\020\037\024\052\025\054" +
    "\026\042\027\041\030\045\031\051\032\055\033\043\034" +
    "\060\051\057\052\056\053\044\001\002\000\072\003\uffd7" +
    "\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7" +
    "\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046" +
    "\uffd7\047\uffd7\050\uffd7\054\uffd7\056\uffd7\062\uffd7\063\uffd7" +
    "\064\uffd7\001\002\000\072\003\uffcd\006\uffcd\007\uffcd\010" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\015\uffcd\016\uffcd\017\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042" +
    "\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd" +
    "\054\uffcd\056\uffcd\062\uffcd\063\uffcd\064\uffcd\001\002\000" +
    "\072\003\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6" +
    "\013\uffd6\015\uffd6\016\uffd6\017\uffd6\034\uffd6\035\uffd6\036" +
    "\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6" +
    "\045\uffd6\046\uffd6\047\uffd6\050\uffd6\054\uffd6\056\uffd6\062" +
    "\uffd6\063\uffd6\064\uffd6\001\002\000\072\003\uffce\006\uffce" +
    "\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\015\uffce\016" +
    "\uffce\017\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce" +
    "\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047" +
    "\uffce\050\uffce\054\uffce\056\uffce\062\uffce\063\uffce\064\uffce" +
    "\001\002\000\072\003\uffcf\006\uffcf\007\uffcf\010\uffcf\011" +
    "\uffcf\012\uffcf\013\uffcf\015\uffcf\016\uffcf\017\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\054\uffcf" +
    "\056\uffcf\062\uffcf\063\uffcf\064\uffcf\001\002\000\072\003" +
    "\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\034\uffd0\035\uffd0\036\uffd0\037" +
    "\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0" +
    "\046\uffd0\047\uffd0\050\uffd0\054\uffd0\056\uffd0\062\uffd0\063" +
    "\uffd0\064\uffd0\001\002\000\034\020\037\024\052\025\054" +
    "\026\042\027\041\030\045\031\051\032\055\033\043\034" +
    "\060\051\057\052\056\053\044\001\002\000\072\003\uffd3" +
    "\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\015" +
    "\uffd3\016\uffd3\017\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046" +
    "\uffd3\047\uffd3\050\uffd3\054\uffd3\056\uffd3\062\uffd3\063\uffd3" +
    "\064\uffd3\001\002\000\072\003\uffd8\006\uffd8\007\uffd8\010" +
    "\uffd8\011\uffd8\012\uffd8\013\uffd8\015\uffd8\016\uffd8\017\uffd8" +
    "\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042" +
    "\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8" +
    "\054\uffd8\056\uffd8\062\uffd8\063\uffd8\064\uffd8\001\002\000" +
    "\034\035\075\036\077\037\072\040\066\041\071\042\073" +
    "\043\070\044\065\045\067\046\100\047\074\050\076\054" +
    "\122\001\002\000\072\003\uffd9\006\uffd9\007\uffd9\010\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\015\uffd9\016\uffd9\017\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9" +
    "\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\054" +
    "\uffd9\056\uffd9\062\uffd9\063\uffd9\064\uffd9\001\002\000\072" +
    "\003\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045" +
    "\uffd2\046\uffd2\047\uffd2\050\uffd2\054\uffd2\056\uffd2\062\uffd2" +
    "\063\uffd2\064\uffd2\001\002\000\072\003\uffcb\006\uffcb\007" +
    "\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\015\uffcb\016\uffcb" +
    "\017\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\050\uffcb\054\uffcb\056\uffcb\062\uffcb\063\uffcb\064\uffcb\001" +
    "\002\000\072\003\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5" +
    "\012\uffd5\013\uffd5\015\uffd5\016\uffd5\017\uffd5\034\uffd5\035" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5" +
    "\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\054\uffd5\056" +
    "\uffd5\062\uffd5\063\uffd5\064\uffd5\001\002\000\072\003\uffcc" +
    "\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\015" +
    "\uffcc\016\uffcc\017\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc" +
    "\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\050\uffcc\054\uffcc\056\uffcc\062\uffcc\063\uffcc" +
    "\064\uffcc\001\002\000\072\003\uffd1\006\uffd1\007\uffd1\010" +
    "\uffd1\011\uffd1\012\uffd1\013\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1" +
    "\054\uffd1\056\uffd1\062\uffd1\063\uffd1\064\uffd1\001\002\000" +
    "\034\020\037\024\052\025\054\026\042\027\041\030\045" +
    "\031\051\032\055\033\043\034\060\051\057\052\056\053" +
    "\044\001\002\000\034\020\037\024\052\025\054\026\042" +
    "\027\041\030\045\031\051\032\055\033\043\034\060\051" +
    "\057\052\056\053\044\001\002\000\074\003\uffd4\006\uffd4" +
    "\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\015\uffd4\016" +
    "\uffd4\017\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4" +
    "\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047" +
    "\uffd4\050\uffd4\053\061\054\uffd4\056\uffd4\062\uffd4\063\uffd4" +
    "\064\uffd4\001\002\000\036\020\037\024\052\025\054\026" +
    "\042\027\041\030\045\031\051\032\055\033\043\034\060" +
    "\051\057\052\056\053\044\054\062\001\002\000\072\003" +
    "\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed" +
    "\015\uffed\016\uffed\017\uffed\034\uffed\035\uffed\036\uffed\037" +
    "\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed" +
    "\046\uffed\047\uffed\050\uffed\054\uffed\056\uffed\062\uffed\063" +
    "\uffed\064\uffed\001\002\000\006\054\115\062\116\001\002" +
    "\000\036\035\075\036\077\037\072\040\066\041\071\042" +
    "\073\043\070\044\065\045\067\046\100\047\074\050\076" +
    "\054\uffeb\062\uffeb\001\002\000\034\020\037\024\052\025" +
    "\054\026\042\027\041\030\045\031\051\032\055\033\043" +
    "\034\060\051\057\052\056\053\044\001\002\000\034\020" +
    "\037\024\052\025\054\026\042\027\041\030\045\031\051" +
    "\032\055\033\043\034\060\051\057\052\056\053\044\001" +
    "\002\000\034\020\037\024\052\025\054\026\042\027\041" +
    "\030\045\031\051\032\055\033\043\034\060\051\057\052" +
    "\056\053\044\001\002\000\034\020\037\024\052\025\054" +
    "\026\042\027\041\030\045\031\051\032\055\033\043\034" +
    "\060\051\057\052\056\053\044\001\002\000\034\020\037" +
    "\024\052\025\054\026\042\027\041\030\045\031\051\032" +
    "\055\033\043\034\060\051\057\052\056\053\044\001\002" +
    "\000\034\020\037\024\052\025\054\026\042\027\041\030" +
    "\045\031\051\032\055\033\043\034\060\051\057\052\056" +
    "\053\044\001\002\000\034\020\037\024\052\025\054\026" +
    "\042\027\041\030\045\031\051\032\055\033\043\034\060" +
    "\051\057\052\056\053\044\001\002\000\034\020\037\024" +
    "\052\025\054\026\042\027\041\030\045\031\051\032\055" +
    "\033\043\034\060\051\057\052\056\053\044\001\002\000" +
    "\034\020\037\024\052\025\054\026\042\027\041\030\045" +
    "\031\051\032\055\033\043\034\060\051\057\052\056\053" +
    "\044\001\002\000\034\020\037\024\052\025\054\026\042" +
    "\027\041\030\045\031\051\032\055\033\043\034\060\051" +
    "\057\052\056\053\044\001\002\000\034\020\037\024\052" +
    "\025\054\026\042\027\041\030\045\031\051\032\055\033" +
    "\043\034\060\051\057\052\056\053\044\001\002\000\034" +
    "\020\037\024\052\025\054\026\042\027\041\030\045\031" +
    "\051\032\055\033\043\034\060\051\057\052\056\053\044" +
    "\001\002\000\072\003\uffbf\006\uffbf\007\uffbf\010\uffbf\011" +
    "\uffbf\012\uffbf\013\uffbf\015\uffbf\016\uffbf\017\uffbf\034\uffbf" +
    "\035\075\036\077\037\072\040\066\041\uffbf\042\uffbf\043" +
    "\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\054\uffbf" +
    "\056\uffbf\062\uffbf\063\uffbf\064\uffbf\001\002\000\072\003" +
    "\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\034\uffc8\035\uffc8\036\uffc8\037" +
    "\072\040\066\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\054\uffc8\056\uffc8\062\uffc8\063" +
    "\uffc8\064\uffc8\001\002\000\072\003\uffbd\006\uffbd\007\uffbd" +
    "\010\uffbd\011\uffbd\012\uffbd\013\uffbd\015\uffbd\016\uffbd\017" +
    "\uffbd\034\uffbd\035\075\036\077\037\072\040\066\041\071" +
    "\042\073\043\070\044\065\045\067\046\100\047\074\050" +
    "\uffbd\054\uffbd\056\uffbd\062\uffbd\063\uffbd\064\uffbd\001\002" +
    "\000\072\003\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012" +
    "\uffc9\013\uffc9\015\uffc9\016\uffc9\017\uffc9\034\uffc9\035\uffc9" +
    "\036\uffc9\037\072\040\066\041\uffc9\042\uffc9\043\uffc9\044" +
    "\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\054\uffc9\056\uffc9" +
    "\062\uffc9\063\uffc9\064\uffc9\001\002\000\072\003\uffbe\006" +
    "\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\034\uffbe\035\075\036\077\037\072\040" +
    "\066\041\071\042\073\043\070\044\065\045\067\046\100" +
    "\047\uffbe\050\uffbe\054\uffbe\056\uffbe\062\uffbe\063\uffbe\064" +
    "\uffbe\001\002\000\072\003\uffc3\006\uffc3\007\uffc3\010\uffc3" +
    "\011\uffc3\012\uffc3\013\uffc3\015\uffc3\016\uffc3\017\uffc3\034" +
    "\uffc3\035\075\036\077\037\072\040\066\041\uffc3\042\uffc3" +
    "\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\054" +
    "\uffc3\056\uffc3\062\uffc3\063\uffc3\064\uffc3\001\002\000\072" +
    "\003\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013" +
    "\uffc7\015\uffc7\016\uffc7\017\uffc7\034\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045" +
    "\uffc7\046\uffc7\047\uffc7\050\uffc7\054\uffc7\056\uffc7\062\uffc7" +
    "\063\uffc7\064\uffc7\001\002\000\072\003\uffc4\006\uffc4\007" +
    "\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\015\uffc4\016\uffc4" +
    "\017\uffc4\034\uffc4\035\075\036\077\037\072\040\066\041" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4" +
    "\050\uffc4\054\uffc4\056\uffc4\062\uffc4\063\uffc4\064\uffc4\001" +
    "\002\000\072\003\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2" +
    "\012\uffc2\013\uffc2\015\uffc2\016\uffc2\017\uffc2\034\uffc2\035" +
    "\075\036\077\037\072\040\066\041\071\042\073\043\uffc2" +
    "\044\uffc2\045\067\046\100\047\uffc2\050\uffc2\054\uffc2\056" +
    "\uffc2\062\uffc2\063\uffc2\064\uffc2\001\002\000\072\003\uffc0" +
    "\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\015" +
    "\uffc0\016\uffc0\017\uffc0\034\uffc0\035\075\036\077\037\072" +
    "\040\066\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046" +
    "\uffc0\047\uffc0\050\uffc0\054\uffc0\056\uffc0\062\uffc0\063\uffc0" +
    "\064\uffc0\001\002\000\072\003\uffc6\006\uffc6\007\uffc6\010" +
    "\uffc6\011\uffc6\012\uffc6\013\uffc6\015\uffc6\016\uffc6\017\uffc6" +
    "\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042" +
    "\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6" +
    "\054\uffc6\056\uffc6\062\uffc6\063\uffc6\064\uffc6\001\002\000" +
    "\072\003\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1" +
    "\013\uffc1\015\uffc1\016\uffc1\017\uffc1\034\uffc1\035\075\036" +
    "\077\037\072\040\066\041\071\042\073\043\uffc1\044\uffc1" +
    "\045\067\046\100\047\uffc1\050\uffc1\054\uffc1\056\uffc1\062" +
    "\uffc1\063\uffc1\064\uffc1\001\002\000\072\003\uffee\006\uffee" +
    "\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\015\uffee\016" +
    "\uffee\017\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee" +
    "\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047" +
    "\uffee\050\uffee\054\uffee\056\uffee\062\uffee\063\uffee\064\uffee" +
    "\001\002\000\034\020\037\024\052\025\054\026\042\027" +
    "\041\030\045\031\051\032\055\033\043\034\060\051\057" +
    "\052\056\053\044\001\002\000\036\035\075\036\077\037" +
    "\072\040\066\041\071\042\073\043\070\044\065\045\067" +
    "\046\100\047\074\050\076\054\uffec\062\uffec\001\002\000" +
    "\072\003\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc" +
    "\013\uffbc\015\uffbc\016\uffbc\017\uffbc\034\uffbc\035\075\036" +
    "\077\037\072\040\066\041\071\042\073\043\070\044\065" +
    "\045\067\046\100\047\uffbc\050\uffbc\054\uffbc\056\uffbc\062" +
    "\uffbc\063\uffbc\064\uffbc\001\002\000\072\003\uffc5\006\uffc5" +
    "\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\015\uffc5\016" +
    "\uffc5\017\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\054\uffc5\056\uffc5\062\uffc5\063\uffc5\064\uffc5" +
    "\001\002\000\004\055\124\001\002\000\034\003\uffe8\006" +
    "\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\131" +
    "\015\uffe8\016\uffe8\017\uffe8\034\uffe8\056\uffe8\001\002\000" +
    "\026\003\026\006\030\007\034\010\016\011\021\012\025" +
    "\013\033\015\031\034\022\056\125\001\002\000\034\003" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\017\uffe6\034\uffe6\056\uffe6\001" +
    "\002\000\026\003\026\006\030\007\034\010\016\011\021" +
    "\012\025\013\033\015\031\034\022\056\130\001\002\000" +
    "\032\003\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe" +
    "\013\ufffe\015\ufffe\016\ufffe\017\ufffe\034\ufffe\056\ufffe\001" +
    "\002\000\034\003\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\034" +
    "\uffe7\056\uffe7\001\002\000\006\013\033\055\124\001\002" +
    "\000\032\003\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012" +
    "\uffea\013\uffea\015\uffea\016\uffea\017\uffea\034\uffea\056\uffea" +
    "\001\002\000\032\003\uffe9\006\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\015\uffe9\016\uffe9\017\uffe9\034\uffe9" +
    "\056\uffe9\001\002\000\034\035\075\036\077\037\072\040" +
    "\066\041\071\042\073\043\070\044\065\045\067\046\100" +
    "\047\074\050\076\054\135\001\002\000\072\003\uffca\006" +
    "\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\015\uffca" +
    "\016\uffca\017\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040" +
    "\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca" +
    "\047\uffca\050\uffca\054\uffca\056\uffca\062\uffca\063\uffca\064" +
    "\uffca\001\002\000\034\020\037\024\052\025\054\026\042" +
    "\027\041\030\045\031\051\032\055\033\043\034\060\051" +
    "\057\052\056\053\044\001\002\000\034\035\075\036\077" +
    "\037\072\040\066\041\071\042\073\043\070\044\065\045" +
    "\067\046\100\047\074\050\076\054\140\001\002\000\004" +
    "\055\142\001\002\000\032\003\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5\016\uffe5\017\uffe5" +
    "\034\uffe5\056\uffe5\001\002\000\010\016\150\017\151\056" +
    "\143\001\002\000\032\003\uffe3\006\uffe3\007\uffe3\010\uffe3" +
    "\011\uffe3\012\uffe3\013\uffe3\015\uffe3\016\uffe3\017\uffe3\034" +
    "\uffe3\056\uffe3\001\002\000\010\016\uffde\017\uffde\056\uffde" +
    "\001\002\000\004\056\uffe0\001\002\000\010\016\150\017" +
    "\151\056\uffe1\001\002\000\004\056\157\001\002\000\034" +
    "\020\037\024\052\025\054\026\042\027\041\030\045\031" +
    "\051\032\055\033\043\034\060\051\057\052\056\053\044" +
    "\001\002\000\004\064\152\001\002\000\026\003\026\006" +
    "\030\007\034\010\016\011\021\012\025\013\033\015\031" +
    "\034\022\056\uffda\001\002\000\026\003\026\006\030\007" +
    "\034\010\016\011\021\012\025\013\033\015\031\034\022" +
    "\056\uffdb\001\002\000\034\035\075\036\077\037\072\040" +
    "\066\041\071\042\073\043\070\044\065\045\067\046\100" +
    "\047\074\050\076\064\155\001\002\000\032\003\026\006" +
    "\030\007\034\010\016\011\021\012\025\013\033\015\031" +
    "\016\uffdc\017\uffdc\034\022\056\uffdc\001\002\000\032\003" +
    "\026\006\030\007\034\010\016\011\021\012\025\013\033" +
    "\015\031\016\uffdd\017\uffdd\034\022\056\uffdd\001\002\000" +
    "\032\003\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\015\uffe4\016\uffe4\017\uffe4\034\uffe4\056\uffe4\001" +
    "\002\000\004\056\uffe2\001\002\000\010\016\uffdf\017\uffdf" +
    "\056\uffdf\001\002\000\032\003\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\015\ufffb\016\ufffb\017\ufffb" +
    "\034\ufffb\056\ufffb\001\002\000\006\061\164\063\ufff5\001" +
    "\002\000\034\020\037\024\052\025\054\026\042\027\041" +
    "\030\045\031\051\032\055\033\043\034\060\051\057\052" +
    "\056\053\044\001\002\000\034\035\075\036\077\037\072" +
    "\040\066\041\071\042\073\043\070\044\065\045\067\046" +
    "\100\047\074\050\076\063\ufff6\001\002\000\034\020\037" +
    "\024\052\025\054\026\042\027\041\030\045\031\051\032" +
    "\055\033\043\034\060\051\057\052\056\053\044\001\002" +
    "\000\062\003\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012" +
    "\uffef\013\uffef\015\uffef\016\uffef\017\uffef\034\uffef\035\075" +
    "\036\077\037\072\040\066\041\071\042\073\043\070\044" +
    "\065\045\067\046\100\047\074\050\076\056\uffef\001\002" +
    "\000\004\002\uffff\001\002\000\032\003\ufffc\006\ufffc\007" +
    "\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\015\ufffc\016\ufffc" +
    "\017\ufffc\034\ufffc\056\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\014\005\017\006\013\007\023\014\031\015\022" +
    "\016\016\023\026\001\001\000\002\001\001\000\020\005" +
    "\126\006\013\007\023\014\031\015\022\016\016\023\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\010" +
    "\046\011\047\012\045\013\035\023\037\025\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\010\133\011\047\012\045\013\035\023\037\025\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\010\120\011\047\012\045\013\035\023\037\025\052\001" +
    "\001\000\016\010\117\011\047\012\045\013\035\023\037" +
    "\025\052\001\001\000\002\001\001\000\020\010\063\011" +
    "\047\012\045\013\035\023\037\024\062\025\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\010\113\011\047\012\045\013\035\023\037\025\052" +
    "\001\001\000\016\010\112\011\047\012\045\013\035\023" +
    "\037\025\052\001\001\000\016\010\111\011\047\012\045" +
    "\013\035\023\037\025\052\001\001\000\016\010\110\011" +
    "\047\012\045\013\035\023\037\025\052\001\001\000\016" +
    "\010\107\011\047\012\045\013\035\023\037\025\052\001" +
    "\001\000\016\010\106\011\047\012\045\013\035\023\037" +
    "\025\052\001\001\000\016\010\105\011\047\012\045\013" +
    "\035\023\037\025\052\001\001\000\016\010\104\011\047" +
    "\012\045\013\035\023\037\025\052\001\001\000\016\010" +
    "\103\011\047\012\045\013\035\023\037\025\052\001\001" +
    "\000\016\010\102\011\047\012\045\013\035\023\037\025" +
    "\052\001\001\000\016\010\101\011\047\012\045\013\035" +
    "\023\037\025\052\001\001\000\016\010\100\011\047\012" +
    "\045\013\035\023\037\025\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\010\116" +
    "\011\047\012\045\013\035\023\037\025\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\122\001\001\000\002\001\001\000\022\004\125\005" +
    "\017\006\013\007\023\014\031\015\022\016\016\023\026" +
    "\001\001\000\002\001\001\000\020\005\126\006\013\007" +
    "\023\014\031\015\022\016\016\023\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\131\026\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\010\136\011\047\012\045\013" +
    "\035\023\037\025\052\001\001\000\002\001\001\000\004" +
    "\027\140\001\001\000\002\001\001\000\012\017\146\020" +
    "\145\021\143\022\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\160\022\157\001" +
    "\001\000\002\001\001\000\016\010\153\011\047\012\045" +
    "\013\035\023\037\025\052\001\001\000\002\001\001\000" +
    "\022\004\152\005\017\006\013\007\023\014\031\015\022" +
    "\016\016\023\026\001\001\000\020\005\126\006\013\007" +
    "\023\014\031\015\022\016\016\023\026\001\001\000\002" +
    "\001\001\000\022\004\155\005\017\006\013\007\023\014" +
    "\031\015\022\016\016\023\026\001\001\000\020\005\126" +
    "\006\013\007\023\014\031\015\022\016\016\023\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\010\164\011" +
    "\047\012\045\013\035\023\037\025\052\001\001\000\002" +
    "\001\001\000\016\010\166\011\047\012\045\013\035\023" +
    "\037\025\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$STPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$STPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$STPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ArrayList<ErrorStpS> errors = new ArrayList<>();
    public void syntax_error(Symbol s){
        errors.add(new ErrorStpS(s.left, s.right, s.value, SYM.terminalNames[s.sym]));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        errors.add(new ErrorStpS("Syntax error, impossible to recover"));
    }
    public ArrayList<ErrorStpS> getErrors() {
        return errors;
        //return errors.stream().map(Object::toString).collect(Collectors.joining("\n-> "));
    }
    public boolean isSuccessExecution() {
        return !(errors.size() > 0);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$STPParser$actions {
  private final STPParser parser;

  /** Constructor */
  CUP$STPParser$actions(STPParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$STPParser$do_action_part00000000(
    int                        CUP$STPParser$act_num,
    java_cup.runtime.lr_parser CUP$STPParser$parser,
    java.util.Stack            CUP$STPParser$stack,
    int                        CUP$STPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$STPParser$result;

      /* select the action based on the action number */
      switch (CUP$STPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Init EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = start_val;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$STPParser$parser.done_parsing();
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Init ::= Main 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Init",0, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Main ::= KW_VOID KW_MAIN TK_LPAR TK_RPAR TK_LBRC Instructions TK_RBRC 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Main",1, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-6)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Instructions ::= Instructions Instruction 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instructions",2, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Instructions ::= Instruction 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instructions",2, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Instruction ::= DeclareVar TK_SCOLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Instruction ::= CallFunc TK_SCOLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Instruction ::= IfStatement 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Instruction ::= SwitchStatement 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Instruction ::= ReasignVar 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Instruction ::= error 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DeclareVar ::= DataType TK_ID TK_EQ Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DeclareVar",4, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DeclareVar ::= DataType TK_ID 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DeclareVar",4, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DataType ::= KW_INT 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DataType",5, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DataType ::= KW_BOOL 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DataType",5, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DataType ::= KW_DOUBLE 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DataType",5, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DataType ::= KW_CHAR 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DataType",5, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DataType ::= KW_STRING 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DataType",5, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ReasignVar ::= TK_ID TK_EQ Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ReasignVar",10, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CallFunc ::= TK_ID TK_LPAR ArgsList TK_RPAR 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("CallFunc",17, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CallFunc ::= TK_ID TK_LPAR TK_RPAR 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("CallFunc",17, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ArgsList ::= ArgsList TK_COMA Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ArgsList",18, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ArgsList ::= Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ArgsList",18, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IfStatement ::= KW_IF TK_LPAR Expresion TK_RPAR LocalEnv KW_ELSE IfStatement 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("IfStatement",11, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-6)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IfStatement ::= KW_IF TK_LPAR Expresion TK_RPAR LocalEnv KW_ELSE LocalEnv 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("IfStatement",11, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-6)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IfStatement ::= KW_IF TK_LPAR Expresion TK_RPAR LocalEnv 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("IfStatement",11, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LocalEnv ::= TK_LBRC Instructions TK_RBRC 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("LocalEnv",20, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LocalEnv ::= TK_LBRC TK_RBRC 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("LocalEnv",20, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SwitchStatement ::= KW_SWITCH TK_LPAR Expresion TK_RPAR LocalEnvs 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("SwitchStatement",12, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LocalEnvs ::= TK_LBRC CaseDeft TK_RBRC 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("LocalEnvs",21, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LocalEnvs ::= TK_LBRC TK_RBRC 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("LocalEnvs",21, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CaseDeft ::= Cases Default 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("CaseDeft",13, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CaseDeft ::= Cases 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("CaseDeft",13, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CaseDeft ::= Default 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("CaseDeft",13, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Cases ::= Cases Case 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Cases",14, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Cases ::= Case 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Cases",14, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Case ::= KW_CASE Expresion TK_COLON Instructions 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Case",15, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Case ::= KW_CASE Expresion TK_COLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Case",15, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Default ::= KW_DEFAULT TK_COLON Instructions 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Default",16, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Default ::= KW_DEFAULT TK_COLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Default",16, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expresion ::= Math 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expresion ::= Relation 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expresion ::= Logic 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expresion ::= CallFunc 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expresion ::= CallJson 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expresion ::= TK_ID 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expresion ::= TK_STRING 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expresion ::= TK_CHAR 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expresion ::= TK_INT 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expresion ::= TK_DOUBLE 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expresion ::= KW_TRUE 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expresion ::= KW_FALSE 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expresion ::= KW_BREAK 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expresion ::= KW_RETURN 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expresion ::= KW_CONTINUE 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expresion ::= TK_LPAR Expresion TK_RPAR 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Math ::= Expresion TK_PLUS Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Math",7, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Math ::= Expresion TK_MINUS Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Math",7, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Math ::= Expresion TK_MULT Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Math",7, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Math ::= Expresion TK_DIV Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Math",7, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Math ::= TK_UMINUS Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Math",7, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Relation ::= Expresion TK_GEQ Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Relation",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Relation ::= Expresion TK_LEQ Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Relation",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Relation ::= Expresion TK_EQEQ Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Relation",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Relation ::= Expresion TK_NOTEQ Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Relation",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Relation ::= Expresion TK_GREATER Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Relation",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Relation ::= Expresion TK_LESS Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Relation",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Logic ::= Expresion TK_AND Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Logic",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Logic ::= Expresion TK_OR Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Logic",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Logic ::= TK_NOT Expresion 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Logic",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$STPParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$STPParser$do_action(
    int                        CUP$STPParser$act_num,
    java_cup.runtime.lr_parser CUP$STPParser$parser,
    java.util.Stack            CUP$STPParser$stack,
    int                        CUP$STPParser$top)
    throws java.lang.Exception
    {
              return CUP$STPParser$do_action_part00000000(
                               CUP$STPParser$act_num,
                               CUP$STPParser$parser,
                               CUP$STPParser$stack,
                               CUP$STPParser$top);
    }
}

}
