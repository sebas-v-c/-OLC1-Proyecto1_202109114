
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.usac.ingenieria.analyzer.statpy;

import java.util.stream.Collectors;
import java_cup.runtime.*;
import java.util.Arrays;
import java.util.ArrayList;
import gt.edu.usac.ingenieria.analyzer.errors.SynError;
import gt.edu.usac.ingenieria.lang.statpy.*;
import gt.edu.usac.ingenieria.lang.statpy.expression.*;
import gt.edu.usac.ingenieria.lang.statpy.graph.*;
import gt.edu.usac.ingenieria.lang.statpy.sentence.*;
import gt.edu.usac.ingenieria.lang.statpy.structure.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class STPParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SYM.class;
}

  /** Default constructor. */
  @Deprecated
  public STPParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public STPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public STPParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\004\004\000\002\004\003\000\002\041\011" +
    "\000\002\041\011\000\002\042\004\000\002\042\003\000" +
    "\002\043\007\000\002\043\007\000\002\043\013\000\002" +
    "\043\013\000\002\044\004\000\002\044\003\000\002\045" +
    "\007\000\002\045\007\000\002\045\007\000\002\045\007" +
    "\000\002\045\007\000\002\045\007\000\002\045\013\000" +
    "\002\045\013\000\002\046\005\000\002\046\005\000\002" +
    "\046\003\000\002\046\003\000\002\047\005\000\002\047" +
    "\005\000\002\047\005\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\035\007\000\002\036\005\000" +
    "\002\036\004\000\002\037\004\000\002\037\003\000\002" +
    "\040\007\000\002\040\007\000\002\040\007\000\002\040" +
    "\007\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\005\000\002\005\004\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\007\006\000" +
    "\002\007\004\000\002\010\012\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\017\005\000\002\033\006\000\002\033\005" +
    "\000\002\034\005\000\002\034\003\000\002\020\011\000" +
    "\002\020\011\000\002\020\007\000\002\052\005\000\002" +
    "\052\004\000\002\021\007\000\002\053\005\000\002\053" +
    "\004\000\002\022\004\000\002\022\003\000\002\022\003" +
    "\000\002\023\004\000\002\023\003\000\002\024\006\000" +
    "\002\024\005\000\002\025\005\000\002\025\004\000\002" +
    "\026\007\000\002\027\007\000\002\031\007\000\002\032" +
    "\010\000\002\030\006\000\002\030\003\000\002\006\004" +
    "\000\002\006\004\000\002\050\012\000\002\051\003\000" +
    "\002\051\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\004\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\004\000\002" +
    "\054\007\000\002\054\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0130\000\004\005\004\001\002\000\004\004\010\001" +
    "\002\000\004\002\007\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\004\066\011\001\002\000" +
    "\004\067\012\001\002\000\004\070\013\001\002\000\044" +
    "\003\044\005\046\006\054\007\051\010\015\011\040\012" +
    "\052\013\025\015\050\020\016\021\043\022\027\023\037" +
    "\024\036\025\042\026\023\045\053\001\002\000\052\003" +
    "\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd" +
    "\013\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022" +
    "\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\045\ufffd\071\ufffd" +
    "\001\002\000\006\045\uffbf\072\uffbf\001\002\000\004\076" +
    "\u0132\001\002\000\052\003\uffc7\005\uffc7\006\uffc7\007\uffc7" +
    "\010\uffc7\011\uffc7\012\uffc7\013\uffc7\015\uffc7\016\uffc7\017" +
    "\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\045\uffc7\071\uffc7\001\002\000\052\003\uffd2\005" +
    "\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2" +
    "\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023" +
    "\uffd2\024\uffd2\025\uffd2\026\uffd2\045\uffd2\071\uffd2\001\002" +
    "\000\004\076\u0131\001\002\000\004\076\u0130\001\002\000" +
    "\004\066\u012a\001\002\000\004\076\u0129\001\002\000\004" +
    "\066\u0122\001\002\000\004\076\u0121\001\002\000\004\070" +
    "\u010e\001\002\000\052\003\uffd4\005\uffd4\006\uffd4\007\uffd4" +
    "\010\uffd4\011\uffd4\012\uffd4\013\uffd4\015\uffd4\016\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\045\uffd4\071\uffd4\001\002\000\052\003\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\024\uffd0\025\uffd0\026\uffd0\045\uffd0\071\uffd0\001\002" +
    "\000\004\076\u011b\001\002\000\052\003\uffd3\005\uffd3\006" +
    "\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\015\uffd3" +
    "\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\045\uffd3\071\uffd3\001\002\000\052" +
    "\003\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012" +
    "\uffc8\013\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8" +
    "\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\045\uffc8\071" +
    "\uffc8\001\002\000\004\076\u011a\001\002\000\004\076\u0119" +
    "\001\002\000\004\066\u0115\001\002\000\006\045\uffc1\072" +
    "\uffc1\001\002\000\052\003\uffd1\005\uffd1\006\uffd1\007\uffd1" +
    "\010\uffd1\011\uffd1\012\uffd1\013\uffd1\015\uffd1\016\uffd1\017" +
    "\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\045\uffd1\071\uffd1\001\002\000\032\027\065\030" +
    "\063\041\070\042\075\043\077\044\066\045\102\051\101" +
    "\064\100\066\067\076\u0112\100\071\001\002\000\004\066" +
    "\376\001\002\000\052\003\uffc6\005\uffc6\006\uffc6\007\uffc6" +
    "\010\uffc6\011\uffc6\012\uffc6\013\uffc6\015\uffc6\016\uffc6\017" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6" +
    "\026\uffc6\045\uffc6\071\uffc6\001\002\000\046\003\044\005" +
    "\046\006\054\007\051\010\015\011\040\012\052\013\025" +
    "\015\050\020\016\021\043\022\027\023\037\024\036\025" +
    "\042\026\023\045\053\071\375\001\002\000\010\031\215" +
    "\032\217\033\216\001\002\000\006\045\203\072\204\001" +
    "\002\000\004\066\156\001\002\000\006\045\uffc0\072\uffc0" +
    "\001\002\000\006\045\uffbe\072\uffbe\001\002\000\012\046" +
    "\055\047\057\066\056\074\060\001\002\000\006\045\uffc2" +
    "\072\uffc2\001\002\000\044\050\uffa1\051\uffa1\052\uffa1\053" +
    "\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1" +
    "\062\uffa1\063\uffa1\067\uffa1\071\uffa1\075\uffa1\076\uffa1\077" +
    "\uffa1\001\002\000\032\027\065\030\063\041\070\042\075" +
    "\043\077\044\066\045\102\051\101\064\100\066\067\067" +
    "\150\100\071\001\002\000\044\050\uffa0\051\uffa0\052\uffa0" +
    "\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061" +
    "\uffa0\062\uffa0\063\uffa0\067\uffa0\071\uffa0\075\uffa0\076\uffa0" +
    "\077\uffa0\001\002\000\030\027\065\030\063\041\070\042" +
    "\075\043\077\044\066\045\102\051\101\064\100\066\067" +
    "\100\071\001\002\000\044\050\uff9a\051\uff9a\052\uff9a\053" +
    "\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a" +
    "\062\uff9a\063\uff9a\067\uff9a\071\uff9a\075\uff9a\076\uff9a\077" +
    "\uff9a\001\002\000\044\050\uff99\051\uff99\052\uff99\053\uff99" +
    "\054\uff99\055\uff99\056\uff99\057\uff99\060\uff99\061\uff99\062" +
    "\uff99\063\uff99\067\uff99\071\uff99\075\uff99\076\uff99\077\uff99" +
    "\001\002\000\044\050\uff90\051\uff90\052\uff90\053\uff90\054" +
    "\uff90\055\uff90\056\uff90\057\uff90\060\uff90\061\uff90\062\uff90" +
    "\063\uff90\067\uff90\071\uff90\075\uff90\076\uff90\077\uff90\001" +
    "\002\000\044\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97" +
    "\055\uff97\056\uff97\057\uff97\060\uff97\061\uff97\062\uff97\063" +
    "\uff97\067\uff97\071\uff97\075\uff97\076\uff97\077\uff97\001\002" +
    "\000\044\050\uff91\051\uff91\052\uff91\053\uff91\054\uff91\055" +
    "\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062\uff91\063\uff91" +
    "\067\uff91\071\uff91\075\uff91\076\uff91\077\uff91\001\002\000" +
    "\044\050\uff92\051\uff92\052\uff92\053\uff92\054\uff92\055\uff92" +
    "\056\uff92\057\uff92\060\uff92\061\uff92\062\uff92\063\uff92\067" +
    "\uff92\071\uff92\075\uff92\076\uff92\077\uff92\001\002\000\030" +
    "\027\065\030\063\041\070\042\075\043\077\044\066\045" +
    "\102\051\101\064\100\066\067\100\071\001\002\000\044" +
    "\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95\056" +
    "\uff95\057\uff95\060\uff95\061\uff95\062\uff95\063\uff95\067\uff95" +
    "\071\uff95\075\uff95\076\uff95\077\uff95\001\002\000\004\070" +
    "\135\001\002\000\044\050\uff9b\051\uff9b\052\uff9b\053\uff9b" +
    "\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062" +
    "\uff9b\063\uff9b\067\uff9b\071\uff9b\075\uff9b\076\uff9b\077\uff9b" +
    "\001\002\000\034\050\114\051\116\052\112\053\105\054" +
    "\110\055\111\056\107\057\104\060\106\061\117\062\113" +
    "\063\115\076\uffbd\001\002\000\044\050\uff9c\051\uff9c\052" +
    "\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c" +
    "\061\uff9c\062\uff9c\063\uff9c\067\uff9c\071\uff9c\075\uff9c\076" +
    "\uff9c\077\uff9c\001\002\000\044\050\uff94\051\uff94\052\uff94" +
    "\053\uff94\054\uff94\055\uff94\056\uff94\057\uff94\060\uff94\061" +
    "\uff94\062\uff94\063\uff94\067\uff94\071\uff94\075\uff94\076\uff94" +
    "\077\uff94\001\002\000\044\050\uff98\051\uff98\052\uff98\053" +
    "\uff98\054\uff98\055\uff98\056\uff98\057\uff98\060\uff98\061\uff98" +
    "\062\uff98\063\uff98\067\uff98\071\uff98\075\uff98\076\uff98\077" +
    "\uff98\001\002\000\044\050\uff93\051\uff93\052\uff93\053\uff93" +
    "\054\uff93\055\uff93\056\uff93\057\uff93\060\uff93\061\uff93\062" +
    "\uff93\063\uff93\067\uff93\071\uff93\075\uff93\076\uff93\077\uff93" +
    "\001\002\000\030\027\065\030\063\041\070\042\075\043" +
    "\077\044\066\045\102\051\101\064\100\066\067\100\071" +
    "\001\002\000\030\027\065\030\063\041\070\042\075\043" +
    "\077\044\066\045\102\051\101\064\100\066\067\100\071" +
    "\001\002\000\052\046\055\047\057\050\uff96\051\uff96\052" +
    "\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057\uff96\060\uff96" +
    "\061\uff96\062\uff96\063\uff96\066\056\067\uff96\071\uff96\075" +
    "\uff96\076\uff96\077\uff96\001\002\000\044\050\uff8a\051\uff8a" +
    "\052\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a\057\uff8a\060" +
    "\uff8a\061\uff8a\062\uff8a\063\uff8a\067\uff8a\071\uff8a\075\uff8a" +
    "\076\uff8a\077\uff8a\001\002\000\030\027\065\030\063\041" +
    "\070\042\075\043\077\044\066\045\102\051\101\064\100" +
    "\066\067\100\071\001\002\000\030\027\065\030\063\041" +
    "\070\042\075\043\077\044\066\045\102\051\101\064\100" +
    "\066\067\100\071\001\002\000\030\027\065\030\063\041" +
    "\070\042\075\043\077\044\066\045\102\051\101\064\100" +
    "\066\067\100\071\001\002\000\030\027\065\030\063\041" +
    "\070\042\075\043\077\044\066\045\102\051\101\064\100" +
    "\066\067\100\071\001\002\000\030\027\065\030\063\041" +
    "\070\042\075\043\077\044\066\045\102\051\101\064\100" +
    "\066\067\100\071\001\002\000\030\027\065\030\063\041" +
    "\070\042\075\043\077\044\066\045\102\051\101\064\100" +
    "\066\067\100\071\001\002\000\030\027\065\030\063\041" +
    "\070\042\075\043\077\044\066\045\102\051\101\064\100" +
    "\066\067\100\071\001\002\000\030\027\065\030\063\041" +
    "\070\042\075\043\077\044\066\045\102\051\101\064\100" +
    "\066\067\100\071\001\002\000\030\027\065\030\063\041" +
    "\070\042\075\043\077\044\066\045\102\051\101\064\100" +
    "\066\067\100\071\001\002\000\030\027\065\030\063\041" +
    "\070\042\075\043\077\044\066\045\102\051\101\064\100" +
    "\066\067\100\071\001\002\000\030\027\065\030\063\041" +
    "\070\042\075\043\077\044\066\045\102\051\101\064\100" +
    "\066\067\100\071\001\002\000\030\027\065\030\063\041" +
    "\070\042\075\043\077\044\066\045\102\051\101\064\100" +
    "\066\067\100\071\001\002\000\044\050\114\051\116\052" +
    "\112\053\105\054\uff84\055\uff84\056\uff84\057\uff84\060\uff84" +
    "\061\uff84\062\uff84\063\uff84\067\uff84\071\uff84\075\uff84\076" +
    "\uff84\077\uff84\001\002\000\044\050\uff8d\051\uff8d\052\112" +
    "\053\105\054\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d\061" +
    "\uff8d\062\uff8d\063\uff8d\067\uff8d\071\uff8d\075\uff8d\076\uff8d" +
    "\077\uff8d\001\002\000\044\050\114\051\116\052\112\053" +
    "\105\054\110\055\111\056\107\057\104\060\106\061\117" +
    "\062\113\063\uff82\067\uff82\071\uff82\075\uff82\076\uff82\077" +
    "\uff82\001\002\000\044\050\uff8e\051\uff8e\052\112\053\105" +
    "\054\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\062" +
    "\uff8e\063\uff8e\067\uff8e\071\uff8e\075\uff8e\076\uff8e\077\uff8e" +
    "\001\002\000\044\050\114\051\116\052\112\053\105\054" +
    "\110\055\111\056\107\057\104\060\106\061\117\062\uff83" +
    "\063\uff83\067\uff83\071\uff83\075\uff83\076\uff83\077\uff83\001" +
    "\002\000\044\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c" +
    "\055\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c\063" +
    "\uff8c\067\uff8c\071\uff8c\075\uff8c\076\uff8c\077\uff8c\001\002" +
    "\000\044\050\114\051\116\052\112\053\105\054\uff88\055" +
    "\uff88\056\uff88\057\uff88\060\uff88\061\uff88\062\uff88\063\uff88" +
    "\067\uff88\071\uff88\075\uff88\076\uff88\077\uff88\001\002\000" +
    "\044\050\114\051\116\052\112\053\105\054\uff89\055\uff89" +
    "\056\uff89\057\uff89\060\uff89\061\uff89\062\uff89\063\uff89\067" +
    "\uff89\071\uff89\075\uff89\076\uff89\077\uff89\001\002\000\044" +
    "\050\114\051\116\052\112\053\105\054\110\055\111\056" +
    "\uff87\057\uff87\060\106\061\117\062\uff87\063\uff87\067\uff87" +
    "\071\uff87\075\uff87\076\uff87\077\uff87\001\002\000\044\050" +
    "\114\051\116\052\112\053\105\054\uff85\055\uff85\056\uff85" +
    "\057\uff85\060\uff85\061\uff85\062\uff85\063\uff85\067\uff85\071" +
    "\uff85\075\uff85\076\uff85\077\uff85\001\002\000\044\050\uff8b" +
    "\051\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b\057" +
    "\uff8b\060\uff8b\061\uff8b\062\uff8b\063\uff8b\067\uff8b\071\uff8b" +
    "\075\uff8b\076\uff8b\077\uff8b\001\002\000\044\050\114\051" +
    "\116\052\112\053\105\054\110\055\111\056\uff86\057\uff86" +
    "\060\106\061\117\062\uff86\063\uff86\067\uff86\071\uff86\075" +
    "\uff86\076\uff86\077\uff86\001\002\000\044\050\114\051\116" +
    "\052\112\053\105\054\110\055\111\056\107\057\104\060" +
    "\106\061\117\062\uff81\063\uff81\067\uff81\071\uff81\075\uff81" +
    "\076\uff81\077\uff81\001\002\000\006\041\137\045\140\001" +
    "\002\000\004\075\141\001\002\000\006\071\uff9d\075\uff9d" +
    "\001\002\000\006\071\uff9e\075\uff9e\001\002\000\006\041" +
    "\137\045\140\001\002\000\004\075\143\001\002\000\006" +
    "\041\137\045\140\001\002\000\004\071\145\001\002\000" +
    "\044\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f" +
    "\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\067" +
    "\uff9f\071\uff9f\075\uff9f\076\uff9f\077\uff9f\001\002\000\034" +
    "\050\114\051\116\052\112\053\105\054\110\055\111\056" +
    "\107\057\104\060\106\061\117\062\113\063\115\067\147" +
    "\001\002\000\044\050\uff8f\051\uff8f\052\uff8f\053\uff8f\054" +
    "\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f\062\uff8f" +
    "\063\uff8f\067\uff8f\071\uff8f\075\uff8f\076\uff8f\077\uff8f\001" +
    "\002\000\044\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb" +
    "\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063" +
    "\uffbb\067\uffbb\071\uffbb\075\uffbb\076\uffbb\077\uffbb\001\002" +
    "\000\006\067\153\075\154\001\002\000\040\050\114\051" +
    "\116\052\112\053\105\054\110\055\111\056\107\057\104" +
    "\060\106\061\117\062\113\063\115\067\uffb9\071\uffb9\075" +
    "\uffb9\001\002\000\044\050\uffbc\051\uffbc\052\uffbc\053\uffbc" +
    "\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062" +
    "\uffbc\063\uffbc\067\uffbc\071\uffbc\075\uffbc\076\uffbc\077\uffbc" +
    "\001\002\000\030\027\065\030\063\041\070\042\075\043" +
    "\077\044\066\045\102\051\101\064\100\066\067\100\071" +
    "\001\002\000\040\050\114\051\116\052\112\053\105\054" +
    "\110\055\111\056\107\057\104\060\106\061\117\062\113" +
    "\063\115\067\uffba\071\uffba\075\uffba\001\002\000\030\027" +
    "\065\030\063\041\070\042\075\043\077\044\066\045\102" +
    "\051\101\064\100\066\067\100\071\001\002\000\034\050" +
    "\114\051\116\052\112\053\105\054\110\055\111\056\107" +
    "\057\104\060\106\061\117\062\113\063\115\067\160\001" +
    "\002\000\004\070\162\001\002\000\052\003\uffb3\005\uffb3" +
    "\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\015" +
    "\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3" +
    "\024\uffb3\025\uffb3\026\uffb3\045\uffb3\071\uffb3\001\002\000" +
    "\010\016\170\017\171\071\163\001\002\000\052\003\uffb1" +
    "\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013" +
    "\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1" +
    "\023\uffb1\024\uffb1\025\uffb1\026\uffb1\045\uffb1\071\uffb1\001" +
    "\002\000\010\016\170\017\171\071\uffaf\001\002\000\010" +
    "\016\uffac\017\uffac\071\uffac\001\002\000\004\071\uffae\001" +
    "\002\000\004\071\200\001\002\000\030\027\065\030\063" +
    "\041\070\042\075\043\077\044\066\045\102\051\101\064" +
    "\100\066\067\100\071\001\002\000\004\077\172\001\002" +
    "\000\046\003\044\005\046\006\054\007\051\010\015\011" +
    "\040\012\052\013\025\015\050\020\016\021\043\022\027" +
    "\023\037\024\036\025\042\026\023\045\053\071\uffa8\001" +
    "\002\000\046\003\044\005\046\006\054\007\051\010\015" +
    "\011\040\012\052\013\025\015\050\020\016\021\043\022" +
    "\027\023\037\024\036\025\042\026\023\045\053\071\uffa9" +
    "\001\002\000\052\003\ufffe\005\ufffe\006\ufffe\007\ufffe\010" +
    "\ufffe\011\ufffe\012\ufffe\013\ufffe\015\ufffe\016\ufffe\017\ufffe" +
    "\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026" +
    "\ufffe\045\ufffe\071\ufffe\001\002\000\034\050\114\051\116" +
    "\052\112\053\105\054\110\055\111\056\107\057\104\060" +
    "\106\061\117\062\113\063\115\077\176\001\002\000\052" +
    "\003\044\005\046\006\054\007\051\010\015\011\040\012" +
    "\052\013\025\015\050\016\uffaa\017\uffaa\020\016\021\043" +
    "\022\027\023\037\024\036\025\042\026\023\045\053\071" +
    "\uffaa\001\002\000\052\003\044\005\046\006\054\007\051" +
    "\010\015\011\040\012\052\013\025\015\050\016\uffab\017" +
    "\uffab\020\016\021\043\022\027\023\037\024\036\025\042" +
    "\026\023\045\053\071\uffab\001\002\000\052\003\uffb2\005" +
    "\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2" +
    "\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\026\uffb2\045\uffb2\071\uffb2\001\002" +
    "\000\004\071\uffb0\001\002\000\010\016\uffad\017\uffad\071" +
    "\uffad\001\002\000\006\074\213\076\uffc4\001\002\000\004" +
    "\073\205\001\002\000\004\045\206\001\002\000\004\074" +
    "\207\001\002\000\004\070\210\001\002\000\030\027\065" +
    "\030\063\041\070\042\075\043\077\044\066\045\102\051" +
    "\101\064\100\066\067\100\071\001\002\000\006\071\212" +
    "\075\154\001\002\000\004\076\uffc3\001\002\000\030\027" +
    "\065\030\063\041\070\042\075\043\077\044\066\045\102" +
    "\051\101\064\100\066\067\100\071\001\002\000\034\050" +
    "\114\051\116\052\112\053\105\054\110\055\111\056\107" +
    "\057\104\060\106\061\117\062\113\063\115\076\uffc5\001" +
    "\002\000\004\066\346\001\002\000\004\066\307\001\002" +
    "\000\004\066\220\001\002\000\004\067\221\001\002\000" +
    "\004\070\222\001\002\000\006\007\223\012\226\001\002" +
    "\000\004\072\270\001\002\000\010\007\223\012\226\071" +
    "\266\001\002\000\010\007\ufff3\012\ufff3\071\ufff3\001\002" +
    "\000\012\034\227\037\231\040\230\072\232\001\002\000" +
    "\004\074\261\001\002\000\004\074\254\001\002\000\004" +
    "\074\247\001\002\000\004\073\233\001\002\000\004\035" +
    "\234\001\002\000\004\074\235\001\002\000\004\070\236" +
    "\001\002\000\006\041\240\045\241\001\002\000\006\071" +
    "\242\075\243\001\002\000\006\071\uffe8\075\uffe8\001\002" +
    "\000\006\071\uffe7\075\uffe7\001\002\000\004\076\246\001" +
    "\002\000\006\041\244\045\245\001\002\000\006\071\uffea" +
    "\075\uffea\001\002\000\006\071\uffe9\075\uffe9\001\002\000" +
    "\010\007\uffec\012\uffec\071\uffec\001\002\000\006\041\250" +
    "\045\251\001\002\000\004\076\253\001\002\000\004\076" +
    "\252\001\002\000\010\007\uffef\012\uffef\071\uffef\001\002" +
    "\000\010\007\ufff0\012\ufff0\071\ufff0\001\002\000\006\041" +
    "\255\045\256\001\002\000\004\076\260\001\002\000\004" +
    "\076\257\001\002\000\010\007\uffed\012\uffed\071\uffed\001" +
    "\002\000\010\007\uffee\012\uffee\071\uffee\001\002\000\006" +
    "\041\262\045\263\001\002\000\004\076\265\001\002\000" +
    "\004\076\264\001\002\000\010\007\ufff2\012\ufff2\071\ufff2" +
    "\001\002\000\010\007\ufff1\012\ufff1\071\ufff1\001\002\000" +
    "\052\003\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc" +
    "\012\ufffc\013\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021" +
    "\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\045\ufffc" +
    "\071\ufffc\001\002\000\010\007\ufff4\012\ufff4\071\ufff4\001" +
    "\002\000\004\073\271\001\002\000\004\036\272\001\002" +
    "\000\004\074\273\001\002\000\004\070\274\001\002\000" +
    "\010\044\300\045\275\100\071\001\002\000\006\071\uffe2" +
    "\075\uffe2\001\002\000\006\071\301\075\302\001\002\000" +
    "\006\071\uffe1\075\uffe1\001\002\000\006\071\uffe3\075\uffe3" +
    "\001\002\000\004\076\306\001\002\000\010\044\304\045" +
    "\303\100\071\001\002\000\006\071\uffe5\075\uffe5\001\002" +
    "\000\006\071\uffe6\075\uffe6\001\002\000\006\071\uffe4\075" +
    "\uffe4\001\002\000\010\007\uffeb\012\uffeb\071\uffeb\001\002" +
    "\000\004\067\310\001\002\000\004\070\311\001\002\000" +
    "\006\007\312\012\315\001\002\000\004\070\336\001\002" +
    "\000\010\007\ufff9\012\ufff9\071\ufff9\001\002\000\010\007" +
    "\312\012\315\071\335\001\002\000\006\034\316\070\317" +
    "\001\002\000\004\074\327\001\002\000\004\071\320\001" +
    "\002\000\004\035\321\001\002\000\004\074\322\001\002" +
    "\000\004\070\323\001\002\000\006\041\240\045\241\001" +
    "\002\000\006\071\325\075\243\001\002\000\004\076\326" +
    "\001\002\000\010\007\ufff6\012\ufff6\071\ufff6\001\002\000" +
    "\006\041\330\045\331\001\002\000\004\076\333\001\002" +
    "\000\004\076\332\001\002\000\010\007\ufff8\012\ufff8\071" +
    "\ufff8\001\002\000\010\007\ufff7\012\ufff7\071\ufff7\001\002" +
    "\000\010\007\ufffa\012\ufffa\071\ufffa\001\002\000\052\003" +
    "\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb" +
    "\013\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022" +
    "\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\045\ufffb\071\ufffb" +
    "\001\002\000\004\071\337\001\002\000\004\036\340\001" +
    "\002\000\004\074\341\001\002\000\004\070\342\001\002" +
    "\000\010\044\300\045\275\100\071\001\002\000\006\071" +
    "\344\075\302\001\002\000\004\076\345\001\002\000\010" +
    "\007\ufff5\012\ufff5\071\ufff5\001\002\000\004\067\347\001" +
    "\002\000\004\070\351\001\002\000\052\003\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\015" +
    "\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\045\uffe0\071\uffe0\001\002\000" +
    "\010\007\353\012\356\071\352\001\002\000\052\003\uffde" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\026\uffde\045\uffde\071\uffde\001" +
    "\002\000\004\045\367\001\002\000\010\007\353\012\356" +
    "\071\365\001\002\000\010\007\uffdc\012\uffdc\071\uffdc\001" +
    "\002\000\004\045\357\001\002\000\004\074\360\001\002" +
    "\000\006\041\361\100\071\001\002\000\004\076\364\001" +
    "\002\000\004\076\363\001\002\000\010\007\uffd9\012\uffd9" +
    "\071\uffd9\001\002\000\010\007\uffdb\012\uffdb\071\uffdb\001" +
    "\002\000\052\003\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\015\uffdf\016\uffdf\017\uffdf\020" +
    "\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\045\uffdf\071\uffdf\001\002\000\010\007\uffdd\012\uffdd\071" +
    "\uffdd\001\002\000\004\074\370\001\002\000\006\044\372" +
    "\100\071\001\002\000\004\076\374\001\002\000\004\076" +
    "\373\001\002\000\010\007\uffda\012\uffda\071\uffda\001\002" +
    "\000\010\007\uffd8\012\uffd8\071\uffd8\001\002\000\004\002" +
    "\uffff\001\002\000\006\006\u0101\045\u0103\001\002\000\004" +
    "\067\u010c\001\002\000\004\076\u0107\001\002\000\004\045" +
    "\u0104\001\002\000\004\076\uffa2\001\002\000\004\074\060" +
    "\001\002\000\004\074\u0105\001\002\000\004\043\u0106\001" +
    "\002\000\004\076\uffa3\001\002\000\030\027\065\030\063" +
    "\041\070\042\075\043\077\044\066\045\102\051\101\064" +
    "\100\066\067\100\071\001\002\000\034\050\114\051\116" +
    "\052\112\053\105\054\110\055\111\056\107\057\104\060" +
    "\106\061\117\062\113\063\115\076\u0109\001\002\000\004" +
    "\045\u010b\001\002\000\004\067\uffa6\001\002\000\006\046" +
    "\055\047\057\001\002\000\004\070\u010e\001\002\000\052" +
    "\003\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012" +
    "\uffa7\013\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7" +
    "\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\045\uffa7\071" +
    "\uffa7\001\002\000\046\003\044\005\046\006\054\007\051" +
    "\010\015\011\040\012\052\013\025\015\050\020\016\021" +
    "\043\022\027\023\037\024\036\025\042\026\023\045\053" +
    "\071\u010f\001\002\000\054\003\uffb4\005\uffb4\006\uffb4\007" +
    "\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4" +
    "\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024" +
    "\uffb4\025\uffb4\026\uffb4\045\uffb4\071\uffb4\001\002\000\046" +
    "\003\044\005\046\006\054\007\051\010\015\011\040\012" +
    "\052\013\025\015\050\020\016\021\043\022\027\023\037" +
    "\024\036\025\042\026\023\045\053\071\u0111\001\002\000" +
    "\054\003\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5" +
    "\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020" +
    "\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5" +
    "\045\uffb5\071\uffb5\001\002\000\052\003\uffcb\005\uffcb\006" +
    "\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\015\uffcb" +
    "\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\045\uffcb\071\uffcb\001\002\000\034" +
    "\050\114\051\116\052\112\053\105\054\110\055\111\056" +
    "\107\057\104\060\106\061\117\062\113\063\115\076\u0114" +
    "\001\002\000\052\003\uffca\005\uffca\006\uffca\007\uffca\010" +
    "\uffca\011\uffca\012\uffca\013\uffca\015\uffca\016\uffca\017\uffca" +
    "\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026" +
    "\uffca\045\uffca\071\uffca\001\002\000\030\027\065\030\063" +
    "\041\070\042\075\043\077\044\066\045\102\051\101\064" +
    "\100\066\067\100\071\001\002\000\034\050\114\051\116" +
    "\052\112\053\105\054\110\055\111\056\107\057\104\060" +
    "\106\061\117\062\113\063\115\067\u0117\001\002\000\004" +
    "\070\u010e\001\002\000\052\003\uffa5\005\uffa5\006\uffa5\007" +
    "\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\015\uffa5\016\uffa5" +
    "\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025" +
    "\uffa5\026\uffa5\045\uffa5\071\uffa5\001\002\000\052\003\uffc9" +
    "\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013" +
    "\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\026\uffc9\045\uffc9\071\uffc9\001" +
    "\002\000\052\003\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf" +
    "\011\uffcf\012\uffcf\013\uffcf\015\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf" +
    "\045\uffcf\071\uffcf\001\002\000\052\003\uffd6\005\uffd6\006" +
    "\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024" +
    "\uffd6\025\uffd6\026\uffd6\045\uffd6\071\uffd6\001\002\000\004" +
    "\023\u011d\001\002\000\004\066\u011e\001\002\000\030\027" +
    "\065\030\063\041\070\042\075\043\077\044\066\045\102" +
    "\051\101\064\100\066\067\100\071\001\002\000\034\050" +
    "\114\051\116\052\112\053\105\054\110\055\111\056\107" +
    "\057\104\060\106\061\117\062\113\063\115\067\u0120\001" +
    "\002\000\004\076\uffa4\001\002\000\052\003\uffd7\005\uffd7" +
    "\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\045\uffd7\071\uffd7\001\002\000" +
    "\030\027\065\030\063\041\070\042\075\043\077\044\066" +
    "\045\102\051\101\064\100\066\067\100\071\001\002\000" +
    "\034\050\114\051\116\052\112\053\105\054\110\055\111" +
    "\056\107\057\104\060\106\061\117\062\113\063\115\067" +
    "\u0124\001\002\000\004\070\u010e\001\002\000\054\003\uffb6" +
    "\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013" +
    "\uffb6\014\u0126\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6" +
    "\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\045\uffb6\071" +
    "\uffb6\001\002\000\006\013\025\070\u010e\001\002\000\052" +
    "\003\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012" +
    "\uffb8\013\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\045\uffb8\071" +
    "\uffb8\001\002\000\052\003\uffb7\005\uffb7\006\uffb7\007\uffb7" +
    "\010\uffb7\011\uffb7\012\uffb7\013\uffb7\015\uffb7\016\uffb7\017" +
    "\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\026\uffb7\045\uffb7\071\uffb7\001\002\000\052\003\uffcd\005" +
    "\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023" +
    "\uffcd\024\uffcd\025\uffcd\026\uffcd\045\uffcd\071\uffcd\001\002" +
    "\000\032\027\065\030\063\041\070\042\075\043\077\044" +
    "\066\045\102\051\101\064\100\066\067\067\u012b\100\071" +
    "\001\002\000\004\076\u012f\001\002\000\034\050\114\051" +
    "\116\052\112\053\105\054\110\055\111\056\107\057\104" +
    "\060\106\061\117\062\113\063\115\067\u012d\001\002\000" +
    "\004\076\u012e\001\002\000\052\003\uff80\005\uff80\006\uff80" +
    "\007\uff80\010\uff80\011\uff80\012\uff80\013\uff80\015\uff80\016" +
    "\uff80\017\uff80\020\uff80\021\uff80\022\uff80\023\uff80\024\uff80" +
    "\025\uff80\026\uff80\045\uff80\071\uff80\001\002\000\052\003" +
    "\uff7f\005\uff7f\006\uff7f\007\uff7f\010\uff7f\011\uff7f\012\uff7f" +
    "\013\uff7f\015\uff7f\016\uff7f\017\uff7f\020\uff7f\021\uff7f\022" +
    "\uff7f\023\uff7f\024\uff7f\025\uff7f\026\uff7f\045\uff7f\071\uff7f" +
    "\001\002\000\052\003\uffce\005\uffce\006\uffce\007\uffce\010" +
    "\uffce\011\uffce\012\uffce\013\uffce\015\uffce\016\uffce\017\uffce" +
    "\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026" +
    "\uffce\045\uffce\071\uffce\001\002\000\052\003\uffd5\005\uffd5" +
    "\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\015" +
    "\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\045\uffd5\071\uffd5\001\002\000" +
    "\052\003\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc" +
    "\012\uffcc\013\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\045\uffcc" +
    "\071\uffcc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0130\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\004\044\005\013\006\023\007\025\010\031\012\046" +
    "\017\021\020\027\021\032\026\017\031\040\032\034\033" +
    "\020\035\033\041\016\054\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\u011b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\006\063\013" +
    "\u0112\014\073\015\071\016\060\033\061\050\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\005\173\006" +
    "\023\007\025\010\031\012\046\017\021\020\027\021\032" +
    "\026\017\031\040\032\034\033\020\035\033\041\016\054" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\006\063" +
    "\013\151\014\073\015\071\016\060\033\061\034\150\050" +
    "\075\001\001\000\002\001\001\000\020\006\063\013\072" +
    "\014\073\015\071\016\060\033\061\050\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\063\013\145\014\073\015\071\016\060\033\061\050\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\006\063\013" +
    "\133\014\073\015\071\016\060\033\061\050\075\001\001" +
    "\000\020\006\063\013\102\014\073\015\071\016\060\033" +
    "\061\050\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\063\013\132\014\073\015\071\016\060\033" +
    "\061\050\075\001\001\000\020\006\063\013\131\014\073" +
    "\015\071\016\060\033\061\050\075\001\001\000\020\006" +
    "\063\013\130\014\073\015\071\016\060\033\061\050\075" +
    "\001\001\000\020\006\063\013\127\014\073\015\071\016" +
    "\060\033\061\050\075\001\001\000\020\006\063\013\126" +
    "\014\073\015\071\016\060\033\061\050\075\001\001\000" +
    "\020\006\063\013\125\014\073\015\071\016\060\033\061" +
    "\050\075\001\001\000\020\006\063\013\124\014\073\015" +
    "\071\016\060\033\061\050\075\001\001\000\020\006\063" +
    "\013\123\014\073\015\071\016\060\033\061\050\075\001" +
    "\001\000\020\006\063\013\122\014\073\015\071\016\060" +
    "\033\061\050\075\001\001\000\020\006\063\013\121\014" +
    "\073\015\071\016\060\033\061\050\075\001\001\000\020" +
    "\006\063\013\120\014\073\015\071\016\060\033\061\050" +
    "\075\001\001\000\020\006\063\013\117\014\073\015\071" +
    "\016\060\033\061\050\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\141\001\001\000\002\001\001\000\004\051" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\006\063" +
    "\013\154\014\073\015\071\016\060\033\061\050\075\001" +
    "\001\000\002\001\001\000\020\006\063\013\156\014\073" +
    "\015\071\016\060\033\061\050\075\001\001\000\002\001" +
    "\001\000\004\053\160\001\001\000\002\001\001\000\012" +
    "\022\166\023\163\024\164\025\165\001\001\000\002\001" +
    "\001\000\006\024\201\025\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\006\063\013" +
    "\174\014\073\015\071\016\060\033\061\050\075\001\001" +
    "\000\002\001\001\000\042\004\172\005\013\006\023\007" +
    "\025\010\031\012\046\017\021\020\027\021\032\026\017" +
    "\031\040\032\034\033\020\035\033\041\016\054\030\001" +
    "\001\000\040\005\173\006\023\007\025\010\031\012\046" +
    "\017\021\020\027\021\032\026\017\031\040\032\034\033" +
    "\020\035\033\041\016\054\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\004\176\005\013\006\023\007" +
    "\025\010\031\012\046\017\021\020\027\021\032\026\017" +
    "\031\040\032\034\033\020\035\033\041\016\054\030\001" +
    "\001\000\040\005\173\006\023\007\025\010\031\012\046" +
    "\017\021\020\027\021\032\026\017\031\040\032\034\033" +
    "\020\035\033\041\016\054\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\006\063\013\151\014\073\015\071\016" +
    "\060\033\061\034\210\050\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\006\063\013\213\014\073\015" +
    "\071\016\060\033\061\050\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\044\223\045\224" +
    "\001\001\000\002\001\001\000\004\045\266\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\236" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\047\275\050\276\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\042\313\043\312" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\333\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\323\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\047\342\050\276\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\347" +
    "\001\001\000\002\001\001\000\006\037\353\040\354\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\365" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\361\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\370" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\u0101" +
    "\027\376\030\377\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\063\013\u0107\014\073\015\071\016\060\033\061" +
    "\050\075\001\001\000\002\001\001\000\004\006\u0109\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\u010c" +
    "\001\001\000\002\001\001\000\042\004\u010f\005\013\006" +
    "\023\007\025\010\031\012\046\017\021\020\027\021\032" +
    "\026\017\031\040\032\034\033\020\035\033\041\016\054" +
    "\030\001\001\000\002\001\001\000\040\005\173\006\023" +
    "\007\025\010\031\012\046\017\021\020\027\021\032\026" +
    "\017\031\040\032\034\033\020\035\033\041\016\054\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\006\063\013\u0115\014\073" +
    "\015\071\016\060\033\061\050\075\001\001\000\002\001" +
    "\001\000\004\052\u0117\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\006\063\013\u011e\014\073" +
    "\015\071\016\060\033\061\050\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\006\063" +
    "\013\u0122\014\073\015\071\016\060\033\061\050\075\001" +
    "\001\000\002\001\001\000\004\052\u0124\001\001\000\002" +
    "\001\001\000\006\020\u0126\052\u0127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\006\063" +
    "\013\u012b\014\073\015\071\016\060\033\061\050\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$STPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$STPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$STPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<Instruction> inst;
    ArrayList<SynError> errors = new ArrayList<>();
    public void syntax_error(Symbol s){
        errors.add(new SynError(s.left, s.right, s.value, SYM.terminalNames[s.sym]));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        errors.add(new SynError("Syntax error, impossible to recover"));
    }
    public ArrayList<SynError> getErrors() {
        return errors;
        //return errors.stream().map(Object::toString).collect(Collectors.joining("\n-> "));
    }
    public boolean isSuccessExecution() {
        return !(errors.size() > 0);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$STPParser$actions {
  private final STPParser parser;

  /** Constructor */
  CUP$STPParser$actions(STPParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$STPParser$do_action_part00000000(
    int                        CUP$STPParser$act_num,
    java_cup.runtime.lr_parser CUP$STPParser$parser,
    java.util.Stack            CUP$STPParser$stack,
    int                        CUP$STPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$STPParser$result;

      /* select the action based on the action number */
      switch (CUP$STPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Init EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = start_val;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$STPParser$parser.done_parsing();
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Init ::= Main 
            {
              String RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Init",0, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Main ::= KW_VOID KW_MAIN TK_LPAR TK_RPAR TK_LBRC Instructions TK_RBRC 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		ArrayList<Instruction> i = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		inst=i;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Main",1, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-6)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Instructions ::= Instructions Instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		ArrayList<Instruction> s = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = s; RESULT.add(i);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instructions",2, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Instructions ::= Instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(i));
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instructions",2, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GraphFuncs ::= KW_VOID KW_BARGRPH TK_LPAR TK_RPAR TK_LBRC BarGraphInsts TK_RBRC 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("GraphFuncs",31, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-6)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GraphFuncs ::= KW_VOID KW_PIEGRPH TK_LPAR TK_RPAR TK_LBRC PieGraphInsts TK_RBRC 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("GraphFuncs",31, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-6)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PieGraphInsts ::= PieGraphInsts PieGraphInst 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("PieGraphInsts",32, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PieGraphInsts ::= PieGraphInst 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("PieGraphInsts",32, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PieGraphInst ::= KW_STRING KW_TITLE TK_EQ TK_ID TK_SCOLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("PieGraphInst",33, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PieGraphInst ::= KW_STRING KW_TITLE TK_EQ TK_STRING TK_SCOLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("PieGraphInst",33, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PieGraphInst ::= KW_STRING TK_LBRC TK_RBRC KW_XAXIS TK_EQ TK_LBRC ArrArgsX TK_RBRC TK_SCOLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("PieGraphInst",33, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-8)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PieGraphInst ::= KW_DOUBLE TK_LBRC TK_RBRC KW_VALUES TK_EQ TK_LBRC ArrArgsV TK_RBRC TK_SCOLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("PieGraphInst",33, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-8)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BarGraphInsts ::= BarGraphInsts BarGraphInst 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("BarGraphInsts",34, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BarGraphInsts ::= BarGraphInst 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("BarGraphInsts",34, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BarGraphInst ::= KW_STRING KW_TITLE TK_EQ TK_ID TK_SCOLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("BarGraphInst",35, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BarGraphInst ::= KW_STRING KW_TITLE TK_EQ TK_STRING TK_SCOLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("BarGraphInst",35, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BarGraphInst ::= KW_STRING KW_TITLEX TK_EQ TK_STRING TK_SCOLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("BarGraphInst",35, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BarGraphInst ::= KW_STRING KW_TITLEX TK_EQ TK_ID TK_SCOLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("BarGraphInst",35, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BarGraphInst ::= KW_STRING KW_TITLEY TK_EQ TK_STRING TK_SCOLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("BarGraphInst",35, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BarGraphInst ::= KW_STRING KW_TITLEY TK_EQ TK_ID TK_SCOLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("BarGraphInst",35, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BarGraphInst ::= KW_STRING TK_LBRK TK_RBRK KW_XAXIS TK_EQ TK_LBRC ArrArgsX TK_RBRC TK_SCOLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("BarGraphInst",35, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-8)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BarGraphInst ::= KW_DOUBLE TK_LBRK TK_RBRK KW_VALUES TK_EQ TK_LBRC ArrArgsV TK_RBRC TK_SCOLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("BarGraphInst",35, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-8)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ArrArgsX ::= ArrArgsX TK_COMA TK_STRING 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ArrArgsX",36, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ArrArgsX ::= ArrArgsX TK_COMA TK_ID 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ArrArgsX",36, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ArrArgsX ::= TK_STRING 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ArrArgsX",36, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ArrArgsX ::= TK_ID 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ArrArgsX",36, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ArrArgsV ::= ArrArgsV TK_COMA TK_DOUBLE 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ArrArgsV",37, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ArrArgsV ::= ArrArgsV TK_COMA TK_ID 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ArrArgsV",37, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ArrArgsV ::= ArrArgsV TK_COMA CallJson 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ArrArgsV",37, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ArrArgsV ::= TK_DOUBLE 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ArrArgsV",37, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ArrArgsV ::= TK_ID 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ArrArgsV",37, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ArrArgsV ::= CallJson 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ArrArgsV",37, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // GlobalVarsFunc ::= KW_VOID KW_DEFGLB TK_LPAR TK_RPAR GlobalVarsEnv 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("GlobalVarsFunc",27, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // GlobalVarsEnv ::= TK_LBRC GlobalVarsInsts TK_RBRC 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("GlobalVarsEnv",28, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // GlobalVarsEnv ::= TK_LBRC TK_RBRC 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("GlobalVarsEnv",28, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // GlobalVarsInsts ::= GlobalVarsInsts GlobalVarsInst 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("GlobalVarsInsts",29, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // GlobalVarsInsts ::= GlobalVarsInst 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("GlobalVarsInsts",29, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // GlobalVarsInst ::= KW_STRING TK_ID TK_EQ TK_STRING TK_SCOLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("GlobalVarsInst",30, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // GlobalVarsInst ::= KW_DOUBLE TK_ID TK_EQ TK_DOUBLE TK_SCOLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("GlobalVarsInst",30, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // GlobalVarsInst ::= KW_STRING TK_ID TK_EQ CallJson TK_SCOLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("GlobalVarsInst",30, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // GlobalVarsInst ::= KW_DOUBLE TK_ID TK_EQ CallJson TK_SCOLON 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("GlobalVarsInst",30, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Instruction ::= DeclareVar TK_SCOLON 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		Sentence i = (Sentence)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT=i;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Instruction ::= DeclareArr TK_SCOLON 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		Sentence i = (Sentence)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT=i;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Instruction ::= CallFunc TK_SCOLON 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT=i;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Instruction ::= IfStatement 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT=i;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Instruction ::= SwitchStatement 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT=i;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Instruction ::= ForLoop 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT=i;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Instruction ::= WhileLoop 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT=i;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Instruction ::= Print 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT=i;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Instruction ::= DoWhileLoop TK_SCOLON 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT=i;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Instruction ::= ReasignVar TK_SCOLON 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT=i;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Instruction ::= IncreDecre TK_SCOLON 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT=i;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Instruction ::= KW_BREAK TK_SCOLON 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT= new ControlRW(ileft, iright, i);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Instruction ::= KW_RETURN TK_SCOLON 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT= new Return(ileft, iright, null);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Instruction ::= KW_RETURN Expresion TK_SCOLON 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT= new Return(ileft, iright, exp);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Instruction ::= KW_CONTINUE TK_SCOLON 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT= new ControlRW(ileft, iright, i);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Instruction ::= GlobalVarsFunc 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT=i;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Instruction ::= GraphFuncs 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT=i;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Instruction ::= error 
            {
              Instruction RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DeclareVar ::= DataType TK_ID TK_EQ Expresion 
            {
              Sentence RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new DeclareId(idleft, idright, id, exp);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DeclareVar",5, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DeclareVar ::= DataType TK_ID 
            {
              Sentence RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT = new DeclareId(idleft, idright, id, null);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DeclareVar",5, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DeclareArr ::= DataType TK_LBRK TK_RBRK TK_ID TK_EQ TK_LBRC ArgsList TK_RBRC 
            {
              Sentence RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new DeclareArr(idleft, idright, id, arg);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DeclareArr",6, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-7)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DataType ::= KW_INT 
            {
              PrimitiveType RESULT =null;
		RESULT = PrimitiveType.INT;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DataType",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DataType ::= KW_BOOL 
            {
              PrimitiveType RESULT =null;
		RESULT = PrimitiveType.BOOLEA;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DataType",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DataType ::= KW_DOUBLE 
            {
              PrimitiveType RESULT =null;
		RESULT = PrimitiveType.DOUBLE;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DataType",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DataType ::= KW_CHAR 
            {
              PrimitiveType RESULT =null;
		RESULT = PrimitiveType.CHAR;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DataType",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DataType ::= KW_STRING 
            {
              PrimitiveType RESULT =null;
		RESULT = PrimitiveType.STRING;
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DataType",8, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ReasignVar ::= TK_ID TK_EQ Expresion 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ReasignVar",13, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CallFunc ::= TK_ID TK_LPAR ArgsList TK_RPAR 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)).value;
		RESULT = new CallFunc(idleft, idright, id, args);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("CallFunc",25, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CallFunc ::= TK_ID TK_LPAR TK_RPAR 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		RESULT = new CallFunc(idleft, idright, id, null);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("CallFunc",25, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ArgsList ::= ArgsList TK_COMA Expresion 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT=l; RESULT.add(e);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ArgsList",26, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ArgsList ::= Expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.peek()).value;
		RESULT= new ArrayList<>(Arrays(e));
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ArgsList",26, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IfStatement ::= KW_IF TK_LPAR Expresion TK_RPAR LocalEnv KW_ELSE IfStatement 
            {
              Instruction RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("IfStatement",14, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-6)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IfStatement ::= KW_IF TK_LPAR Expresion TK_RPAR LocalEnv KW_ELSE LocalEnv 
            {
              Instruction RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("IfStatement",14, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-6)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IfStatement ::= KW_IF TK_LPAR Expresion TK_RPAR LocalEnv 
            {
              Instruction RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("IfStatement",14, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LocalEnv ::= TK_LBRC Instructions TK_RBRC 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("LocalEnv",40, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LocalEnv ::= TK_LBRC TK_RBRC 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("LocalEnv",40, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SwitchStatement ::= KW_SWITCH TK_LPAR Expresion TK_RPAR LocalEnvs 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("SwitchStatement",15, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LocalEnvs ::= TK_LBRC CaseDeft TK_RBRC 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("LocalEnvs",41, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LocalEnvs ::= TK_LBRC TK_RBRC 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("LocalEnvs",41, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CaseDeft ::= Cases Default 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("CaseDeft",16, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CaseDeft ::= Cases 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("CaseDeft",16, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CaseDeft ::= Default 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("CaseDeft",16, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Cases ::= Cases Case 
            {
              ArrayList<Case> RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Cases",17, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Cases ::= Case 
            {
              ArrayList<Case> RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Cases",17, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Case ::= KW_CASE Expresion TK_COLON Instructions 
            {
              Case RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Case",18, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Case ::= KW_CASE Expresion TK_COLON 
            {
              Case RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Case",18, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Default ::= KW_DEFAULT TK_COLON Instructions 
            {
              Case RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Default",19, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Default ::= KW_DEFAULT TK_COLON 
            {
              Case RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Default",19, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ForLoop ::= KW_FOR TK_LPAR ForArgs TK_RPAR LocalEnv 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ForLoop",20, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ForArgs ::= ForInitArg TK_SCOLON Expresion TK_SCOLON IncreDecre 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ForArgs",21, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // WhileLoop ::= KW_WHILE TK_LPAR Expresion TK_RPAR LocalEnv 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("WhileLoop",23, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DoWhileLoop ::= KW_DO LocalEnv KW_WHILE TK_LPAR Expresion TK_RPAR 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("DoWhileLoop",24, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-5)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ForInitArg ::= KW_INT TK_ID TK_EQ TK_INT 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ForInitArg",22, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ForInitArg ::= ReasignVar 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("ForInitArg",22, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // IncreDecre ::= TK_ID TK_INC 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("IncreDecre",4, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // IncreDecre ::= TK_ID TK_DEC 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("IncreDecre",4, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CallJson ::= TK_DOLL TK_LBRC JsonArg TK_COMA JsonArg TK_COMA JsonArg TK_RBRC 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("CallJson",38, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-7)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // JsonArg ::= TK_ID 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("JsonArg",39, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // JsonArg ::= TK_STRING 
            {
              Object RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("JsonArg",39, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expresion ::= Math 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expresion ::= Relation 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Expresion ::= Logic 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Expresion ::= CallFunc 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Expresion ::= CallJson 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Expresion ::= IncreDecre 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Expresion ::= TK_ID 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Expresion ::= TK_STRING 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Expresion ::= TK_CHAR 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Expresion ::= TK_INT 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Expresion ::= TK_DOUBLE 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Expresion ::= KW_TRUE 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Expresion ::= KW_FALSE 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Expresion ::= TK_LPAR Expresion TK_RPAR 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Expresion",9, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Math ::= Expresion TK_PLUS Expresion 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Math",10, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Math ::= Expresion TK_MINUS Expresion 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Math",10, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Math ::= Expresion TK_MULT Expresion 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Math",10, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Math ::= Expresion TK_DIV Expresion 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Math",10, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Math ::= TK_MINUS Expresion 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Math",10, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Relation ::= Expresion TK_GEQ Expresion 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Relation",11, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Relation ::= Expresion TK_LEQ Expresion 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Relation",11, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Relation ::= Expresion TK_EQEQ Expresion 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Relation",11, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Relation ::= Expresion TK_NOTEQ Expresion 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Relation",11, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Relation ::= Expresion TK_GREATER Expresion 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Relation",11, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Relation ::= Expresion TK_LESS Expresion 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Relation",11, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Logic ::= Expresion TK_AND Expresion 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Logic",12, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Logic ::= Expresion TK_OR Expresion 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Logic",12, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Logic ::= TK_NOT Expresion 
            {
              Expression RESULT =null;

              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Logic",12, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-1)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Print ::= KW_PRINT TK_LPAR Expresion TK_RPAR TK_SCOLON 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-2)).value;
		RESULT= new Print(pleft, pright, exp);
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Print",42, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-4)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Print ::= KW_PRINT TK_LPAR TK_RPAR TK_SCOLON 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)).value;
		RESULT= new Print(pleft, pright, null)
              CUP$STPParser$result = parser.getSymbolFactory().newSymbol("Print",42, ((java_cup.runtime.Symbol)CUP$STPParser$stack.elementAt(CUP$STPParser$top-3)), ((java_cup.runtime.Symbol)CUP$STPParser$stack.peek()), RESULT);
            }
          return CUP$STPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$STPParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$STPParser$do_action(
    int                        CUP$STPParser$act_num,
    java_cup.runtime.lr_parser CUP$STPParser$parser,
    java.util.Stack            CUP$STPParser$stack,
    int                        CUP$STPParser$top)
    throws java.lang.Exception
    {
              return CUP$STPParser$do_action_part00000000(
                               CUP$STPParser$act_num,
                               CUP$STPParser$parser,
                               CUP$STPParser$stack,
                               CUP$STPParser$top);
    }
}

}
